text
international forum technology society computational thinking curriculum framework implications teacher knowledge authors charoula angeli joke voogt andrew fluck mary webb margaret cox joyce malynsmith jason zagami source journal technology society vol july published international forum technology society stable url httpswwwjstororgstablejeductechsoci references linked references available jstor article httpswwwjstororgstablejeductechsociseqcidpdfreferencereferencestabcontents need log jstor access linked references jstor notforprofit service helps scholars researchers discover build upon wide range content trusted digital archive information technology tools increase productivity facilitate forms scholarship information jstor please contact supportjstororg jstor archive indicates acceptance terms conditions available httpsaboutjstororgterms international forum technology society collaborating jstor digitize preserve extend access journal technology society content downloaded wed jan utc subject htt angeli voogt fluck webb cox malynsmith zagami computational thinking curriculum framework implications teacher knowledge technology society issn online print article journal technology society available creative commons ccbyndnc license httpscreativecommonsorglicensesbyncnd queries please contact journal editors etseditorsifetsinfo computational thinking curriculum framework implications teacher knowledge charoula angeli joke voogt andrew fluck mary webb margaret cox joyce malynsmith jason zagami university cyprus cyprus university amsterdam netherlands university tasmania australia kings college london uk development center usa griffith university australia cangeliucyaccy jmvoogtuvanl andrewfluckutaseduau marywebbkclacuk mjcoxkclacuk jmsmithedcorg jzagamigriffitheduau corresponding author abstract adding computer separate subject core curriculum complex issue challenges authors herein address challenges curriculum based generic computational thinking framework knowledge need teach curriculum first issue discussed within perspective designing authentic computational thinking curriculum focus realworld second issue addressed within framework technological pedagogical content knowledge explicating detail body knowledge need able teach computational thinking environment example ideas applied practice given recognized lack adequate empirical evidence terms effectiveness frameworks proposed herein expected knowledge base dramatically increase next several years countries around world add computer separate subject curriculum keywords computational thinking curriculum pedagogical content knowledge technological pedagogical content knowledge teacher preparation introduction world digital technology plays important role carrying essential dailylife tasks imperative individuals knowledge critically understand technological systems well able troubleshoot solve things go wrong wing czerkawski national council czerkawski argues knowledge individuals need order competently respond challenges st century goes beyond acquisition mere immediate application knowledge longterm value enable understand basics computer structures practices essence society needs citizens understand true affordances computers terms cannot become effective authorscreators computational tools wing broadened idea computation proposed computational thinking considered basic taught curriculum defined computational thinking thought process formulating computers according wing teaching computational thinking basic curriculum enable learn abstract algorithmic logical thinking prepared solve complex openended prepare knowledge need survive effectively cope technological challenges st century educators strongly argued goal achieved integrating computer distinct discipline subject curriculum barr stephenson fluck webb cox angeli malynsmith voogt zagami goode chapman margolis hazzan lapidot ragonis tucker deek jones mccowan stephenson verno fluck stated strong case integrating computer curriculum arguments economic sectors succinctly case asserts computer develops promotes unique thinking namely computational thinking uses power logic algorithm abstraction precision empowers individuals create artifacts move consumers technology producers technology redefines learners think disciplines major impact teaching practices example interdisciplinary teaching economic case stresses critical shortage applicants itrelated jobs especially europe content downloaded wed jan utc subject htt time european commission predicts major european countries uk need additional professionals husing korte adding computer separate subject core curriculum however complex issue involves legislative administrative political challenges latter focal point paper particular major challenges related computer content teach levels body knowledge need able teach computer curriculum years variety computer curricula representing views important teach computer proposed literature enacted countries uk usa austria germany mongolia israel greece cyprus recently australia wellknown efforts united states amongst others computer principles exploring computer beauty joy computing project lead pltw codeorg computer principles part larger national effort united states namely cs project aims effective computing curricula enacted schools taught wellprepared computer principles constitutes framework standards computer courses built astrachan briggs framework specified set computational thinking practices ie connecting computing developing computational artifacts analyzing artifacts abstracting communicating collaborating set big ideas computer ie creativity abstraction information algorithms programming internet global impact adopted several schools united states developing computer courses beauty joy computing codeorg pltw astrachan briggs desjardins beauty joy computing course focuses big ideas computing main objective expose beauty joy programming engaging meaningful projects snap programming language similarly codeorg course lessons programming projects around big ideas computing well whereas pltw uses python primary programming environment expose computational thinking projects analogously various countries similar initiatives undertaken introducing computer van diepen perrenet zwaneveld micheuz furber undoubtedly last decades lot done computer community promoting computer subject secondary unfortunately conclusion cannot reached status computer elementary curriculum grades approximately years old computer researchers written concerns regards teaching computer eg armoni concerns primarily linked incompatibility abstraction essential process computer childrens weakness understand abstraction young armoni explained abstraction inherent component computer always encapsulated process thinking automating solution piagetian perspective cannot really understand concrete logic whereas eleven years old solve apply concrete objects apply abstract phenomena conversely gibson argued late exposing computer first time stated early exposure kindergarten necessary gibson found young think abstractly concrete reference systems situate thinking recently much impetus bringing computer experiences elementary kumar kumar wrote proliferation app development startup companies targeted early childhood computing next emerging frontier formal deliberative initiatives developing computer curricula succinctly acknowledge effort prottsman reported development thinkersmith curriculum introduced standalone set unplugged specifically designed provide strong computer foundations without computers lessons curriculum binary baubles materials found games crafts teach authentic computer codeorg expanded thinkersmith created offered hour unplugged curriculum grades wide adoption curriculum codeorg developed existing hour unplugged curriculum includes content downloaded wed jan utc subject htt lessons cs unplugged another unplugged computer cs approach proposed bell witten fellows adams mckenzie collection teach computational thinking engaging games puzzles cards string crayons lots physical movement learn binary numbers algorithms without computer programming clearly early computing forefront toward line urgently needed order informed body knowledge teaching computer accordingly authors propose curriculum framework focus promoting computational thinking ages computational thinking element computer albeit important fluck authors suggest curriculum explicit focus computational thinking covering theoretical applied computer secondary particularly sought address following questions computational thinking curriculum promote knowledge need able teach computational thinking curriculum definition computational thinking concept computational thinking traced back seymour papert papert wings article rekindled interest promoting computational thinking efforts aiming developing definition computational thinking include among others national academy sciences workshop national council initiative undertaken furber workshops organized computer association csta international society technology iste succinctly national councils report differentiated computational thinking computer literacy computer programming computer applications ie games broadened term include core discipline computer abstraction decomposition pattern generalization visualization problemsolving algorithmic thinking similarly furber offered concise definition computational thinking process recognizing aspects computation world surrounds us applying tools techniques computer understand reason natural artificial systems processes csta iste collaboration leaders higher industry developed operational definition computational thinking problemsolving process includes limited following elements formulating enables us computer tools help solve logically organizing analyzing representing abstractions models simulations automating solutions algorithmic thinking ie series ordered steps identifying analyzing implementing possible solutions goal achieving efficient effective combination steps resources generalizing transferring problemsolving process wide variety despite fact currently unanimous definition computational thinking seems fair conclude based literature reviewed researchers come accept computational thinking thought process utilizes elements abstraction generalization decomposition algorithmic thinking debugging detection correction errors abstraction removing characteristics attributes object entity order reduce set fundamental characteristics wing abstraction reduces complexity hiding irrelevant detail generalization reduces complexity replacing multiple entities perform similar functions single construct thalheim abstraction generalization often together abstracts generalized parameterization provide greater utility decomposition breaking complex simpler ones national council algorithmic thinking problemsolving related devising stepbystep solution differs coding ie technical required programming language selby additionally algorithmic notions sequencing ie planning algorithm involves putting actions correct sequence algorithmic notions flow control ie order individual instructions steps algorithm evaluated content downloaded wed jan utc subject htt considered important elements computational thinking selby debugging recognize actions correspond instructions fix errors selby shows elements computational thinking discussed defined section accordingly conceptual framework adopted developing computational thinking curriculum framework presented next section elements computational thinking element definition abstraction decide information entityobject keep ignore wing generalization formulate solution generic terms applied selby decomposition break complex smaller parts easier understand solve national council wing algorithms sequencing flow control devise stepbystep set operationsactions go selby put actions correct sequence selby order instructionsactions executed selby debugging identify remove fix errors selby computational thinking curriculum framework based computational thinking shown computational thinking curriculum framework developed presented shows indicators competence computational thinking namely abstraction generalization decomposition algorithmic thinking debugging progression simple complex levels succinctly framework aims engaging thinking developing solution automating solution algorithmic thinking generalizing solution common patterns identified recognized essence framework aims introducing young thinking processes computational thinking become competent learn advanced theoretical practical topics computer secondary addition framework targets development computational thinking levels albeit levels competence examples tasks within reach either without external support external reference systems noted boundaries specified possibly vary classroom classroom token expected refinements curriculum framework ongoing become available pilot offerings curricula aligned proposed framework diverse contexts computational thinking curriculum framework grade ages ages ages abstraction external reference systems create modelrepresentation solve ie specific directional language forward left turn right turn back turns given degree create path write instructions enable others follow path mat based story beebot create modelrepresentation solve ie create object assign properties digital game creation create modelrepresentation solve ie create simulation content downloaded wed jan utc subject htt follow path narrative generalization identify common patterns older newer problemsolving tasks sequences instructions previously employed solve ie sequence instructions older path program beebot follow path includes older path remix reuse extending needed resources previously created remix reuse extending needed resources previously created decomposition break complex task series simpler subtasks ie break longer path series smaller paths beebot follow break complex task simpler subtasks solution assembling together collections smaller parts break complex task simpler subtasks solution assembling together collections smaller parts algorithmic thinking define series steps solution put instructions correct sequence define series steps solution put instructions correct sequence repeat sequence several times iteration define series steps solution put instructions correct sequence repeat sequence several times iteration make decisions based conditions store retrieve update variables formulate mathematical logical expressions debugging recognize instructions correspond actions remove fix errors recognize instructions correspond actions remove fix errors recognize instructions correspond actions remove fix errors note modelrepresentation conceptual mathematical mechanical textual graphical etc curriculum issues focus holistic approach framework presented constitutes general framework various computational thinking programs courses modules curriculum framework conceptualized generic form allow freedom agency adapt customize framework see fit classrooms according van den akker enactment perspective create curriculum realities increasingly replacing fidelity perspective implementation faithfully follow curricular prescriptions external sources accordingly trend puts even emphasis key people curriculum change van den akker underlining utmost importance teacher preparation view authors herein propose holistic approach method enact computational thinking framework proposed paper holistic approach attempts deal complexity without losing sight separate elements interconnections elements van merrinboer kirschner opposite atomistic complex contents tasks reduced simpler elements promoting content compartmentalization fragmentation compartmentalization fragmentation support separation whole content downloaded wed jan utc subject htt small distinct often isolated parts example teach think computationally teaching abstraction decomposition followed generalization algorithmic thinking debugging doubtful end opportunity practice whole complex computational thinking case entirety doubtful ever learn think computationally hand holistic approach aims eliminating compartmentalization fragmentation focusing whole complex authentic tasks without losing sight individual elements make complex whole thus approach implemented correctly teacher learn think computationally solve learn constituent interconnected pieces knowledge theoretical practical directly related computational thinking task support holistic approach teaching computational thinking emphasize steps process namely problemsolving tasks focus reallife issues sequencing problemsolving tasks simple complex acknowledge steps exist literature regard first step argued sources computational thinking curriculum ought issues concerns directly related life curriculum kind result usable knowledge knowledge applied directly context real life concerns hand inert knowledge voogt fisser good mishra yadav webb fluck cox angelivalanides malynsmith voogt zagami researchers found curriculum focused around realworld result greater intellectual curiosity motivation improved attitude toward schooling higher achievement college wolf brandt consequently curriculum designed around reallife make computational thinking lives thus keep interested subject matter ultimately end increasing substantially eventually pursue computer major field later college implementation point view curriculum designed around reallife demands wider range content simply authentic realworld usually multidisciplinary nature consequence curriculum perspective poses demands teaching often requiring close collaboration among content expertise noted reallife problemsolving tasks constitute challenging endeavors curriculum designer approach process means rapid prototyping designing entire program course module regard sequencing problemsolving tasks sequence simple whole tasks complex whole tasks recommended made clear problemsolving task irrespective complexity engages learner wholetask problemsolving experiences context computational thinking means task simple complex confronts learner almost constituent computational thinking reallife computational thinking experience tasks meaningful authentic childrens life sequence tasks constitutes backbone computational thinking curriculum evident need guidance support start working challenging tasks support provided form external reference systems help gradually abstractions need guidance problemsolving process knowledge need teach curriculum galezer stephenson stated curriculum important preparing teach curriculum critical amongst computer teacher educators framework pedagogical content knowledge pck highly regarded appropriate framework defining knowledge need able teach computer eg hubwieser magenheim mhling ruf saeli succinctly pck refers body knowledge highly context sensitive cannot conceptualized isolation classroom teaching experiences beyond simple synthesis knowledge subject matter pedagogy shulman shulman pck amalgam knowledge embodies aspects content germane teachability shulman refers transformation content forms understandable learners according van driel berry good pck means several representations commonly taught topics within certain subject representations disposal better recognize difficulties effectively deploy pck van driel berry content downloaded wed jan utc subject htt within domain computer computer researchers attempted define pck computer either general ways hubwieser saeli perrenet jochems zwaneveld stephenson galezer haberman verno specific ways saeli saeli concentrated teaching programming secondary provided general conceptualization pck domain programming terms constituent elements ie teach computer programming teach programming learners difficulties programming following saeli able provide specific conceptualization pck domain programming context secondary included details constituent knowledge base terms content taught mentioned loops structures arrays problemsolving decomposition parameters algorithms amongst others regarding pedagogical knowledge mentioned offering simple programming language better facilitate effort learn syntax language choosing several worthy solve lastly identified learners difficulties programming loops arrays variables general problemsolving early though researchers undertook systematic efforts extending enriching concept pck adding technology knowledge another essential category knowledge base angeli valanides koehler mishra niess perspective introduction technology knowledge existing framework pck successfully expanded pck tpck technological pedagogical content knowledge angeli valanides angeli valanides koehler mishra niess conceptualization framework tpck proposed angeli valanides shown figure according figure tpck conceptualized unique body knowledge formed contribution distinct knowledge bases namely content knowledge pedagogical knowledge knowledge learners knowledge context technology knowledge angeli valanides angeli valanides body knowledge grows engaged systematically useful practices either classrooms teacher professional development programs figure technological pedagogical content knowledge adopted angeli valanides tpck important body knowledge field computer technology center computer domain either means ie learn technology goal means achieving teaching something else ie technology order solve teach computer concept purposes authors provide conceptualization tpck construct computational thinking defined order better explain need know able teach computational thinking course aligned framework proposed content downloaded wed jan utc subject htt analytically content knowledge ck defined knowledge computational thinking ckct includes knowledge understanding abstraction including modeling denoted ckcta generalization denoted ckctg decomposition designated ckctd algorithmic thinking designated ck ctalgo debugging denoted ck ctdebug ck ctalgo includes knowledge several computational thinking processing information sequencing loops parallel processing events conditions operators variables dataflow control learner knowledge computational thinking lkct includes knowledge learners difficulties developing abstractions beyond particular programming language tool denoted lk cta generalizing solution another identifying common patterns denoted lkctg decomposing complex simpler ones designated lkctd thinking algorithmically solve including difficulties understanding sequencing loops flow control conditions etc denoted lk ctalgo debugging denoted lkctdebug pedagogical knowledge computational thinking pkct includes general pedagogical knowledge applicable content domains ie questions promote understanding examples explanation demonstration addition knowledge subjectspecific pedagogical practices pertinent computational thinking pkct defined terms following teaching tactics solve think iterative incremental ways present explain solution terms series steps decision making based conditions something based expanding others done reuse remix show complex decomposed simpler solution increments show writing computer program try things go make revisions based happens technology knowledge computational thinking tkct includes knowledge operateuse variety technologies invent technologiestools solve task technical processes methods tools learn adapt technologies context knowledge computational thinking cxct defined point view explicated porrashernndez salinasamescua proposed regard context knowledge along important dimensions namely scope macro mezzo micro context actor inner external context macro context defined social political technological economic conditions global influence value worth adding computer computational thinking curriculum mezzo context defined social cultural political organizational economic conditions settled local community institution value computational thinking childrens lives finally micro context deals inclass conditions eg available resources computational thinking available technologies norms policies beliefs expectations goals computational thinking addition porrashernndez salinasamescua argued order comprehend uses technology important consider actors unique characteristics brought context separate objects knowledge internal eg needs preferences misconceptions difficulties prior knowledge selfefficacy pedagogical beliefs external contexts eg ethnicity culture community socioeconomic background lastly tpck computational thinking tpckct defined knowing identify range creative authentic computational thinking projects identify range technologies appropriate set affordances terms providing necessary technological means practicingteaching whole range computational thinking project affordances technology transform ckct pkct representations make overall computational thinking experience comprehensible learners content downloaded wed jan utc subject htt question naturally arises point form teacher preparation take tpckct competencies adequately next section provide preliminary evidence teacher course preparing teach computational thinking teacher preparation developing tpck competencies computational thinking fall fifteen elementary pursuing masters degree instructional technology enrolled course teach computational thinking classrooms unfamiliar computational thinking prior experiences computer programming participated threehour weekly meetings participants engaged handson computer programming environment learningbydesign approach shown effective contemporary teacher development mckenney kali markauskaite voogt course engage designing models situations constructing computer programs course instructor initially engaged authentic asking think citytown living identify ways peoples lives places could improved explained thinking possible improvements instructor asked think computers could identified brainstorming resulted ideas constituted reallife tasks course instructor teach computational thinking tasks sequenced simple complex based involvedness solution taught create first writing computer program creating proved extremely difficult often times asked instructor help early attempts creating models resulted models containing lots unnecessary information gradually help course instructor learned models abstractions something free inessential detail taught create models process explicitly taught involved identification important entities characteristics parameters relationships either quantitative qualitative parameters entities showed commitment developing best models could possibly create often times exhibited lots creative ideas make better regards teaching computer programming course instructor systematically following pedagogical strategies decide sprites needed project decide scripts needed project organize scripts meaningful ways others code try debug build extend existing projects ideas programming tasks computational processing information sequencing loops parallel processing events conditions operators variables dataflow control explicitly explained illustrated lots programming examples difficulties understanding programming even though found variables conditional logic challenging others concluding remarks conclusion authors paper presented computational thinking curriculum framework designing curriculum area still infancy described guidelines enacting curriculum framework defined tpckct body knowledge need able teach curriculum addition authors provided example teacher preparation course specifically designed promote tpckct recognized empirical evidence form rich cases needed terms investigating effectiveness frameworks proposed herein variety contexts expected gradual adoption computer distinct subject curriculum countries around world knowledge base regarding issues discussed paper dramatically expand next several years content downloaded wed jan utc subject htt references angeli valanides preservice ict designers instructional based expanded view pedagogical content knowledge journal computerassisted angeli valanides epistemological methodological issues conceptualization development assessment icttpck advances technological pedagogical content knowledge tpck computers armoni teaching cs kindergarten early pipeline begin inroads astrachan briggs cs principles project inroads barr stephenson bringing computational thinking involved role computer community inroads bell witten fellows adams mckenzie cs unplugged enrichment extension programme primaryaged retrieved httpcsunpluggedorgwpcontentuploadscsunpluggedosvpdf czerkawski computational thinking virtual environments proceedings elearn world conference elearning corporate government healthcare higher chesapeake va association advancement computing aace desjardins creating ap cs principles let flowers bloom inroads fluck webb cox angeli malynsmith voogt zagami arguing computer curriculum technology society furber shut restart forward computing uk schools london uk royal society galezer stephenson computer teacher preparation critical inroads gibson july teaching graph algorithms ages proceedings th annual sigcse conference innovation technology computer iticse york ny goode chapman margolis beyond curriculum exploring computer program inroads hazzan lapidot ragonis guide teaching computer activitybased approach london uk springer hubwieser magenheim mhling ruf august towards conceptualization pedagogical content knowledge computer proceedings ninth annual international conference international computing york ny husing korte evaluation implementation communication european commission eskills st century bonn germany empirica retrieved httphdlvocededuau koehler mishra introducing tpck aacte committee innovation technology eds handbook technological pedagogical content knowledge tpck educators york ny routledge kumar digital playgrounds early computing inroads mckenney kali markauskaite voogt teacher knowledge technology enhanced ecological framework investigating assets needs instructional micheuz findings informatics austrian academic secondary schools informatics national council committee workshops computational thinking report workshop scope nature computational thinking washington dc national academy press doi niess preparing teach mathematics technology developing technology pedagogical content knowledge teaching teacher papert mindstorms computers powerful ideas york ny basic books inc content downloaded wed jan utc subject htt porrashernndez salinasamescua strengthening tpack broader notion context narratives reveal knowledge construction journal computing prottsman computer elementary classroom inroads saeli teaching programming secondary pedagogical content knowledge based approach unpublished doctoral dissertation technische universiteit eindhoven netherlands saeli perrenet jochems zwaneveld teaching programming secondary pedagogical content knowledge perspective informatics selby teaching programming enhance computational thinking unpublished doctoral dissertation university southampton southampton uk shulman understand knowledge growth teaching researcher shulman knowledge teaching foundations reform harvard review stephenson galezer haberman verno imperative improving computer york ny computer association csta thalheim fundamentals entityrelationship modeling york ny springer tucker deek jones mccowan stephenson verno curriculum computer york ny acmcomputer association van diepen perrenet zwaneveld informatics schools netherlands dutch dilemma informatics van driel berry teacher professional development focusing pedagogical content knowledge researcher van den akker building bridges improve curriculum policies classroom practices beyond lisbon perspectives development policy europe aarau switzerland cidree van merrinboer kirschner steps complex systematic approach fourcomponent instructional mahwah nj lawrence erlbaum voogt fisser good mishra yadav computational thinking compulsory towards agenda practice information technologies webb fluck cox angelivalanides malynsmith voogt zagami curriculum advancing understanding roles computer scienceinformatics curriculum kw lai ed edusummit summary report retrieved httpwwwcurtineduauedusummitlocaldocsedusummitebookpdf wing computational thinking communications wing march computational thinking retrieved httpscstaacmorgcurriculumsubcurrfileswingctprezpdf wolf brandt know brain leadership content downloaded wed jan utc subject htt 
systematic mapping assessing computational thinking abilities ana liz souto de araujo software practices laboratory federal university campina grande departament exact sciences federal university para ba para ba brazil analizcopinufcgedubr wilkerson andrade software practices laboratory federal university campina grande para ba brazil wilkersoncomputacaoufcgedubr dalton serey guerrero software practices laboratory federal university campina grande para ba brazil daltoncomputacaoufcgedubr abstractseveral initiatives created promote computational thinking abilities multiple approaches assessing wide abilities involved however evidence assess yet systematically grouped reviewed goal identify classify approaches promote ways assessing abilities achieve goal systematic mapping planned executed results reveal programming courses common pedagogical approaches promote ii multiple involved algo rithms abstraction common abilities assessed iii codes multichoice questionnaires common artifacts assessing abilities points fact open questions exploring developing researches promoting assessing abilities introduction according wing seminal paper subject computational thinking developing fundamental rote mentioned among others ability think recursively abstraction decomposition dealing complex tasks heuristics reason possible solutions thinking like computer scientist requires able think multiple levels abstraction since several researchers focused defining core set characterize computational thinking according hu represents cognitive process hence seen hybrid paradigm accommodates thinking models logical algorithmic analytic mathematical engineering creative thinking con sequence several abilities associated instance analysis generalization frequently employed discussions general abilities like designing systems programming comput ers well able apply automation modeling frequently employed discussions general computer results related abilities found recent academic literatures focused relation teaching grover presented environments tools foster interact computing voogt presented historical review gathered examples taught discussed position curriculum taking perspective selby woollard recently proposed definition main involved based frequently terms associated related field investigation focuses assess abilities report workshop pedagogical aspects computational thinking national council cites reasons assessing computational thinking abilities judge curriculum related materials pedagogy ii judge individuals progress iii manage instructor support however significant amount developed discussion assessment still infancy focus approaches researchers observe assess development abilities far know system atic review scientific literature subject assessment identified classified proposed approaches promote ways assess abilities within approaches concretely aimed characterizing state art assessing abilities ii identifying classifying approaches artifacts assess abilities various levels iii discussing results based approaches artifacts abilities assessed achieve goal planned executed systematic mapping based guidelines established petersen rest paper organized follows section ii briefly discuss related section iii present methodology questions guided section iv present collected along section present discuss results achieved finally section vi present conclusions ieee ii related best knowledge literature reviews assessing abilities existing involve definition role important show overview essential aspects indicate abilities promoted assessed systematic review presented barcelos consid ered describe evaluate approaches integrate mathematics wide variety mathematical topics developed emphasis algebra calculus higherorder thinking programming main ap proach followed spreadsheets mathematical related according another systematic review identified tools promoting common tool promoting followed app inventor alice systematic reviews interested promoting mathematics tools show interest assess development context literature review presented lye koh focused teaching programming computational concept ie programmer widely explored promoting programming authors pro pose intervention focused computational practices computational perspectives could conducted promotion addition propose constructionismbased problemsolving environment information processing scaffolding reflection activ ities could designed foster computational practices computational perspectives authors reveal assess proposed approach iii methodology section details methodology executing systematic mapping objective mapping categorize several primary frequently providing visual summary results addition clusters gaps evidenced allowing identification possible open future works mapping papers categorized based search questions aiming providing visual summary field methodology increasingly software engineering petersen chose protocol defined petersen applied computer field every mapping clear protocol guide step outcome protocol detailed rest section questions multiple approaches promoting assessing along several involved abilities following httpsscratchmitedu httpappinventormiteduexplore httpwwwaliceorg questions rq defined order guide systematic mapping rq pedagogical approaches promot ing kind audience purpose elicit kind schemesactivities researchers apply promote acquisition audience grade carried rq assessed aim bring forth abilities assessed pedagogical approach ability considered synonyms rq instruments artifacts assessing abilities objective identify instruments artifacts order measure abilities pedagogical approach conduct search defining questions strategy de signed select related papers following steps adopted analyze terms search string order answer questions decide central idea computational thinking assess abilities choose synonyms assessing context edu cation synonym assessing search analyze results digital library select synonyms boolean connect selected assessing synonyms link computational thinking boolean execute pilot tests gauge search string result following search string obtained computational thinking assess analyze evaluation measure validation digital libraries chosen conduct eric ieeexplore sciencedirect elsevier springer scopus digital libraries chosen main publication vehicles computer presents summary search returned digital library collected based titleabstract search thus step outcome papers selected initial search papers screening inclusion exclusion criteria applied mapping described defined inclusion criteria assessing ability context kind levelgrade summary primary search results digital librarydatabase name eric ieeexplore sciencedirect scopus springer total search results reported workshop conference jour nal defined exclusion criteria introduce assess measure abilities introduce analysis validation abilities ie papers analyzed validated approach instead abilities context computational biology secondary short papers chapter book selection process conducted steps first stage title abstract papers selected first search read step duplicated papers secondary short papers removed judged potentially point second step papers read inclusion exclusion criteria applied excluded demonstrate assess measure abilities accordingly last step selected goals avoid search bias stages discussed authors outcome step selected answer questions based inclusion exclusion criteria iv results section details result mapping conducted september april first general results extracted directly headers papers presented countries done publication vehicle journal conference distribution year publication remaining sections answers question defined section iii general results countries distribution fig shows countries distri bution done united states leading country approaches assessing abilities investigated south africa italy uk countries brazil china germany hungary india israel zealand romania singapore south korea united states leading country publi cation possible explanation presence computer fig publication vehicle distribution teacher association csta computational thinking task force csta computational thinking task force responsible current developments dissemination teaching resources related publication vehicle fig presents publication vehi cle adopted selected publication conferences frequent type journals appear publication years fig presents distribu tion year publication delimit time conduct term computational thinking earned signification jannette wing however found first selected reported assessing abilities respectively increase april httpscstaacmorgcurriculumsubcompthinkinghtml fig countries distribution fig distribution year publication iii courses promoting course content reference frequency computational thinking app inventor alice agentclub game kodu computer literacy course web introductory programming multidisciplinary collaboration class fig distribution approaches ii pedagogical approaches promoting classification approaches classified based approaches approaches chosen petersen following validation evaluation solution proposal experience papers philosophical papers opinion paper definitions see fig shows result distribution approaches philosophical papers opinion papers found selected rq pedagogical approaches promoting kind audience ii presents approaches applied promote course framework tool mapping term course includes courses general regardless duration moreover term course includes workshops modules regular classes includes applied exams framework intention measuring abilities last tool comprises game digital ink platform online interactive platform offers several foster evaluate abilities point view course leading pedagogical approach promoting tests second common followed frameworks tools since course popular pedagogical approach iii presents classification course content program ming course common pedagogical approach common programming environ ment followed app inventor courses specific computational thinking remainder included programming environ ments alice agentclub game course kodu computer literacy course spreadsheets web course introductory programming course multiple languages multidisciplinary collaboration class fig audience addition mapping aimed knowing kind audience grade carried fig grouped grade leading audience followed undergraduate undergraduates computer noncomputer kindergarten preservice rq assessed aim elicit abilities assessed selected approaches measured abilities identified adopted abilities iv shows abilities assessed pedagogical approaches common abilities emphasized bold algorithms abstractions decomposition best visualization frequency abilities fig shows word clouds iv fig word clouds abilities assessed approach reference frequency course framework tool iv abilities assessed abilities reference frequency algorithm abstraction programming logical thinking representation collection analysis modeling decomposition procedures automation parallelization simulation debugging sequences loops conditionals computational computational practices computational perspectives sensors processes transformations models abstractions patterns algorithms tools resources inference logic evaluations improvements condicionals recall synchronize troubleshooting computer fundamental computational literacy screen interface events persistence sharing lists public web services accelerometer location awareness parameters functions recursion event screen interface rq instruments artifacts assessing abilities aim present instruments artifacts order measure abilities shows instruments artifacts classified based approaches questionnaire classified types multiplechoice openended surveys interviews multiplechoice questionnaire need choose correct alternative openended questionnaire need write draw correct answer survey right wrong answer opinion multiple choice questionnaire finally interview speaks answers questions necessarily right wrong answer multiplechoice questionnaire common artifact assessing abilities eleven code second followed responses survey interviews openended questionnaires lesson plan video journals scenarios instruments assessing abilities fig shows frequency instruments artifacts instruments selected instrument assessing abilities fig combines results instruments approaches bubble plot fig instruments artifacts asses video survey response questionnaire lesson plan interview game scenarios code bubble plot intruments approach fig instruments approaches bubble plot instrument evaluation experience papers solution proposal validation instruments artifacts assess categorized approach practice abilities avoiding syntax hurdle sociated textbased programming languages moreover appointed pedagogically appropriate computational thinking alternative learn program however argue initiated programming judge programming good approach promote worry assess development individuals progress difficulties programming promote abilities considered instance testing debugging looking optimal solutions concept involved abilities discussed context programming courses specifically noncomputer computational thinking workshops computational thinking workshops designed target teach ers preservice preservice participated oneweek module minute classes psychology course module aims demonstrating probabilistic reasoning algo rithmic thinking heuristics hypothesis testing assessment conducted based survey openend questions explaining concept ii knowing whether integrated classroom iii whether related disciplines another participated days workshop showed correlation taught subjects stimulated examples teach respective classrooms lesson plan done workshop assessed order measure ability synthesize core courses differ purpose time duration content type assessment first course preservice analyzed whether understood content whether intended apply future classroom content involved multiple abilities beyond computational thinking programming involved second course assessed ability connect practices subjects evaluation rubric created assess whether effectively computational thinking core lesson plans case programming experience alice courses options promote without programming courses game courses web de sign courses computer literacy courses multidisciplinary collaboration classes courses distinguished purpose content audience assessed abilities ap proaches programming courses related dependent computers course promotes without computers abilities involved papers except therefore considered core approach instrument artifact reference course code responses lesson plan survey multiplechoice questionnaire pisa survey openended questionnaire survey multiplechoice questionnaire framework code code interviews scenarios code robotic video responses code questionnaire game multiplechoice responses tool survey game questionnaire response game platform responses digital ink discussion section discusses presented section iv regarding concept pedagogical approaches assessed abilities instruments artifacts finally threats validity presented concept computational thinking concept influence abilities assessment understanding concept abilities elicited appropriate instruments selected assess theses abilities definitions found literature broad making difficult find systematic classification addition propose definitions instead alyzing existing ones propose without exposing vision thus large interpretation seen selected regarding theoretical references refer wings seminal papers refer wings precursors papers published although wings seminal papers strong influence literature recent proposing terms abilities pedagogical approaches programming courses programming courses common intervention promote visual program ming environments broadly employed app inventor alice agentclub although environments attractive seem limited solve programming make digital storytelling game spite feasible introduce software programming visual programming language technical feature allows learn programming computational thinking addition abilities collabo rate solve mapping papers treat troubleshooting instead papers troubleshooting seen common types usually possess single fault state known solutions rely efficiently experience based rules diagnosing require learners make judgments nature considering definition troubleshooting fit context algorithm directly related indirectly mapping thereby algorithmic thinking pointed fundamental abilities related designing algorithm producing solution set steps defining following steps help us achieve solution reason algorithmic thinking considered essential wing seminal paper argued essence abstraction author algorithm seen abstraction stepbystep procedure taking input producing desired output moreover thinking abstractly involves identifying heart visualize levels details help solve abstraction helps simplify complex decomposes complex tasks abstraction related algorithm therefore abstraction considered essential well computer association csta points following set abilities collection analysis representation decomposition abstraction algorithms procedures au tomation parallelization simulation abilities explored csta argues role methodology automated transferred applied subjects csta designed teacher resources leadership toolkit help apply classes abilities appropriate cstas already highlighted alternative learn programming incited programming papers considered conditional loop procedures parameters functions recursion event abilities terms correlation programming abilities context programming needs discussed another paper mobile computational thinking mct term refer programming aspects plus mobile programming aspects designed mit app inventor rubric assessment mct includes screen interfaces events component abstraction persistence sharing lists public web services accelerom eter orientation sensors location awareness although abilities specific mobile programming considered part abilities wide set abilities appeared elicited processes transformations ii models abstractions iii patterns algorithms iv tools resources inference logic vi evaluations im provements set abilities wide encompass involve without technology development assessing instruments artifacts assessing since programming courses common ap proaches promote code already expected common artifact assessing abilities addition frameworks code measure code measure development limit assessment checklist ie presence absense programming structure accordance lye koh computational practices computational perspectives included context programming computational thinking moreover measure abilities based code discussed questionnaires multiplechoise openended question naires common instrument assessing ques tionnaires pretest posttest applied courses advantages limitations cases possible analyze impact specific offered course highlighted context programming course preassessment programming tasks could frustrate previous knowledge programming could negative impact attitudes towards future highlighted multiplechoice questionnaires com mon type questionnaire multiplechoice questionnaires advantage quicker reproduce compile results questionnaires simpler summarize statistical analysis challenge elaborate appropriate order measure cognitive processes elaborate questionnaires known measure problemsolving pisa program international assessment hand responses exercises assessing abilities responses exercises possi bility understand specific role individual impact content analysis allows us make inferences reasoning appear gain insight thought processes moreover content analysis identify mistakes exercises course experiment besides help understand range errors identify potential patterns investigations propose solution traditional instrument assessment however concern planning content instru ment teacher underestimated difficulty plan based previous experience considering appropriate pedagogical foundations audience context consolidated apply measuring however already expected concept essential abilities well defined literature considering tools mapping identified sults game digital ink platform game tested real environment digital ink undergoing validation process verify adequacy assessment tool platform prototype purpose collaboratively assess exercises multiplechoice openended questionnaires game puzzle need tested empirical evidences react could assessed practice games strategic pedagogical approach foster games benefits provide fun help learn subjects assist certain play games designed assess abilities teacher would like train measure tools projected order capture informa tion performance specific digital tools act entry mechanism store subject retrieved processed future analysis concerning parameters tools assess final result development process digital ink proposed example tool platforms designed capture performance moreover platforms help automated assessment repository questionstasks threats validity mapping threats validity result affected limitation automated search engines digital library human factors screening papers extraction steps search could identify extract information limited peerreviewed conference papers journal articles available considers neither book chapters short papers vi conclusion future works reinforced minds broad varied interpretation conse quently approaches promote interpretations irreconcilable enforce views lead significantly assessment approaches however able identify commonly approaches general particular considered vast majority direct pro gramming courses popular pedagogical approach promote rq within programming courses visual programming environments broadly employed particular tools like app inventor currently least popular pedagog ical approaches however rather limited programming digital storytelling game revealed broad range abilities promoted researchers consequence several artifacts metrics dimensions assessment abilities assessed artifact varies depending researchers conceptualization developing algorithms applying abstraction common abilities assessed among identified rq coding multichoice ques tionnaires leading artifacts assessing abilities rq artifacts method actually assess code produced well answers questionnaires vary according pedagogical approach purpose evaluation finally interpretation core subjective nature definition abilitites major influence set pedagogical approaches assessment methods despite confirming expectations programming courses popular pedagogical approaches however seems consequence fact either performed computer scientists within context promoting computer however approaches based programming fact alternatives justified desirable since wings seminal paper researchers accept conceptualizing programming thus finding ways promote without need explicitly depend teaching computer programming within visual frameworks important contribution help promote effectively unfortunately still need propose investigate alternatives broad definition collaborates actively encourage audiences kindergarten graduate introduces chal lenges respect assessment audience pedagogical approaches artifacts assessing methods necessary particular major concern master pedagogical approach well methods assess development finally must comment methodological aspects papers considered perhaps subject difficult complex presented simply cannot replicated either clear presentation conditions occurs precise characterization methods assess evaluate results know difficult perhaps impossible make fully replica ble believe whole community researchers could benefit careful description procedures assessment methods well general conditions necessary conduct similar believe area needs improve methods adopted better support claims relevance effectiveness references wing computational thinking communications vol chucomputationalthinkingwhatitmightmeanandwhatwemight proceedings th annual joint conference innovation technology computer selby woollard computational thinking developing definition accessed january online available httpeprintssotonacuk grover pea computational thinking review state field researcher vol voogt fisser good mishra yadav computational thinking compulsory towards agenda practice information technologies vol council report workshop pedagogical aspects computational thinking washington dc national academies press accessed january online available httpwwwnapeducatalogreportofaworkshopon thepedagogicalaspectsofcomputationalthinking petersen feldt mujtaba mattsson systematic map ping software engineering th international conference evaluation assessment software engineering vol sn tbarcelosrmun ozrvacevedoandifsilveirarelac esentre pensamento computacional matema tica uma revisa sistema tica da literatura anais dos workshops congresso brasileiro de informa tica na educac vol bombasar raabe de miranda santiago ferramen tas para ensinoaprendizagem pensamento computacional onde esta alan turing anais simpo sio brasileiro de informa tica na educac vol lye koh review teaching computational thinking programming next computers human behavior vol grover cooper pea assessing computational proceedings conference innovation technology computer ser iticse york ny usa yadav mayfield zhou hambrusch korb compu tational thinking elementary secondary teacher transactions computing toce vol bort brylow csimpact measuring computational thinking present cshs participant lesson plans proceeding th technical symposium computer miller perkovic settle file references trees com putational thinking proceedings fifteenth annual conference innovation technology computer kazimoglu kiernan bacon mackinnon programming computational thinking via digital gameplay procedia computer vol kc yeh xie ke teaching computational thinking noncomputing majors spreadsheet functions frontiers conference fie ieee fj werner denner campe kawamoto fairy performance assessment measuring computational thinking middle proceedings rd technical symposium computer sherman martin assessment mobile computational thinking journal computing sciences colleges vol dcwebbtroubleshootingassessmentanauthenticproblemsolving procediasocial behavioral sciences vol giordano maiorana cutting edge tools initial programming course global engineering conference educon ieee ieee seiter solo classify programming responses primary grade proceedings th technical symposium computer pulimood pearson bates impact multidisciplinary collaboration computational thinking proceedings th technical symposium computing duncan bell pilot computer programming course primary proceedings workshop primary secondary computing zurbargury parv lanzberg nationwide exam tool improving curriculum proceedings th conference innovation technology computer educationseriticse newyorknyusaacmpp online available httpdoiacmorg jun han kim lee assessing computational literacy elementary national korea assessment evaluation accountability vol gouws bradshaw wentworth first year perfor mance computational thinking proceedings south african institute computer scientists information technologists conference hubwieser muhling investigating psychometric structure bebras contest towards mesuring computational thinking teaching computing engineering latice international conference ieee csernoch biro th abari testing algorithmic traditional nontraditional programming environments informatics vol jajoinesdraubenheimerandacraigusingcomputationaltools enhance computers journal vol gouws bradshaw wentworth computational thinking evaluation game light bot proceedings th conference innovation technology computer seiter foreman modeling progressions computational thinking primary grade proceedings ninth annual international conference international computing brennan resnick frameworks studying assessing development computational thinking proceedings annual meeting american association vancouver canada bers tangiblek program applied computational thinking young early childhood practice vol zhong wang chen li exploration dimensional integrated assessment computational thinking journal computing ambrosio xavier georges digital ink cognitive assessment computational thinking frontiers con ference fie ieee ieee giordano maiorana csizmadia marsden riedesel mishra vinikiene horizons assessment com puter beyond leveraging viva platform proceedings iticse working reports akcaoglu problemsolving making games game summer program technology development vol wing computational thinking thinking computing philosophical transactions royal society london math ematical physical engineering sciences vol barr stephenson bringing computational thinking involved role computer community inroads vol 
computational thinking builds power limits computing processes whether executed human machine computational methods models give us courage solve systems us would tackling alone computational thinking confronts riddle machine intelligence humans better computers computers better humans fundamentally addresses question computable today know parts answers questions computational thinking fundamental everyone computer scientists reading writing arithmetic add computational thinking every childs analytical ability printing press facilitated spread rs appropriately incestuous vision computing computers facilitate spread computational thinking computational thinking involves designing systems understanding human behavior drawing fundamental computer computational thinking includes range mental tools reflect breadth field computer solve particular might ask difficult solve whats best solve computer rests solid theoretical underpinnings answer questions precisely stating difficulty accounts underlying power machinethe computing device run solution must consider machines instruction set resource constraints operating environment efficiently might ask whether approximate solution good enough whether randomization advantage whether false positives false negatives allowed computational thinking reformulating seemingly difficult know solve perhaps reduction embedding transformation simulation computational thinking thinking recursively parallel processing interpreting code code type checking generalization dimensional analysis recognizing virtues dangers aliasing giving someone something name recognizing cost power indirect addressing procedure call judging program correctness efficiency aesthetics systems simplicity elegance computational thinking abstraction decomposition attacking large complex task designing large complex system separation concerns choosing appropriate representation modeling aspects make tractable invariants describe systems behavior succinctly declaratively confidence safely modify influence large complex system without understanding every detail modularizing something anticipation multiple users prefetching caching anticipation future computational thinking thinking terms prevention protection recovery worstcase scenarios redundancy damage containment error correction calling gridlock deadlock contracts interfaces avoid race conditions synchronizing meetings another computational thinking heuristic reasoning discover solution planning scheduling presence uncertainty search search search resulting list web pages strategy winning game counterexample computational thinking massive amounts speed computation making tradeoffs time space processing power storage capacity thinking like computer scientist means able program computer requires thinking multiple levels abstraction consider everyday examples daughter goes morning puts backpack things needs day thats prefetching caching son loses mittens suggest retrace steps thats backtracking point stop renting skis buy pair thats online algorithms line stand supermarket thats performance modeling multiserver systems telephone still power outage thats independence failure redundancy completely automated public turing tests tell computers humans apart captchas authenticate humans thats exploiting difficulty hard ai foil computing agents computational thinking become ingrained everyones lives words like algorithm precondition part everyones vocabulary nondeterminism garbage collection take meanings computer scientists trees drawn upside witnessed influence computational thinking disciplines example machine transformed statistics statistical scale terms size dimension unimaginable years ago statistics departments kinds organizations hiring computer scientists schools computer embracing existing starting statistics departments computer scientists recent interest biology driven belief biologists benefit computational thinking computer sciences contribution biology goes beyond ability search vast amounts sequence looking patterns hope structures algorithmsour computational abstractions methodscan represent structure proteins ways elucidate function computational biology changing biologists think similarly computational game theory changing economists think nanocomputing chemists think quantum computing physicists think kind thinking part set scientists everyone else ubiquitous computing today computational thinking tomorrow ubiquitous computing yesterdays dream became todays reality computational thinking tomorrows reality back top isnt computer computationwhat computed compute computational thinking thus following characteristics conceptualizing programming computer computer programming thinking like computer scientist means able program computer requires thinking multiple levels abstraction fundamental rote fundamental something every human must know function modern society rote means mechanical routine ironically computer solves ai grand challenge making computers think like humans thinking rote humans computers think computational thinking humans solve trying get humans think like computers computers dull boring humans clever imaginative humans make computers exciting equipped computing devices cleverness tackle would dare take computing build systems functionality limited imaginations complements combines mathematical engineering thinking computer inherently draws mathematical thinking given like sciences formal foundations rest mathematics computer inherently draws engineering thinking given build systems interact real world constraints underlying computing device force computer scientists think computationally mathematically free build virtual worlds enables us engineer systems beyond physical world ideas artifacts software hardware artifacts produce physically present everywhere touch lives time computational approach solve manage daily lives communicate interact people everyone everywhere computational thinking reality integral human endeavors disappears explicit philosophy people equate computer computer programming parents see narrow range job opportunities major computer people think fundamental computer done engineering remains computational thinking grand vision guide computer educators researchers practitioners act change societys image field especially need reach precollege audience including parents sending main messages intellectually challenging engaging scientific remain understood solved domain solution domain limited curiosity creativity major computer anything major english mathematics go multitude careers ditto computer major computer go career medicine law business politics type engineering even arts professors computer teach course called ways think like computer scientist college freshmen making available nonmajors computer majors expose precollege computational methods models rather bemoan decline interest computer decline funding computer look inspire publics interest intellectual adventure field well thus spread joy awe power computer aiming make computational thinking commonplace 
introduction presents discusses specific didactic approach support development computational thinking wing argues computational thinking fundamental everyone considered important component every childs analytical ability along reading writing arithmetic recently growing recognition importance controlling managing cognitive well understanding wide range contexts field computer disciplines corresponding author tel email addresses atmatzidcsdauthgr atmatzidou sdemetricsdauthgr demetriadis tool offers opportunities engage computational thinking introduced schools innovative environment enhancing building higher order thinking abilities helping solve complex furthermore guided instruction approach robots facilitates teamwork develops conceptual understanding enhances critical thinking promotes higherorder domains mathematics paper describes implementation secondary focusing possible impacts instructional approach might development depending guided worksheets worked small solve programming evaluated times focus key constructsabstraction generalisation algorithm modularity decomposition httpdxdoiorgjrobot elsevier bv rights reserved atmatzidou demetriadis autonomous systems background usually seen interdisciplinary drawing mostly mathematics informatics technology offering major benefits general levels powerful flexible teaching tool encouraging construct control robots specific programming languages roots found seymour paperts creator logo programming language papert suggests effective experiencing discovering things argues tremendous potential improve classroom teaching drawing theoretical underpinnings paperts constructionism vygotskys sociocognitive approaches help transform passive active learners constructing knowledge collaborating peers developing essential mental acting researchers indicate positive impact development critical thinking metacognitive programming language demonstrate promotes joyful mode advancing motivation collaboration selfconfidence creativity researchers argue programs provide valuable avenue increase interest participation technology engineering mathematics stem motivate pursue career fields eg however certain researchers point although seems excellent tool teaching compelling topic ages pedagogy teaching still infancy noted needed point help specific focuses means advancing concisely review next theoretical framework erct relationship wing describes type analytical thinking draws fundamental computer provides designing systems understanding human behaviour roots go back paperts ideas computer childrens machine would allow procedural thinking programming refers ways algorithmically acquisition technological fluency literature multiple definitions several suggestions abilities integrate curricula grades wing asserts potential advance problemsolving processes abstraction generalisation decomposition algorithm separation concerns astrachan emphasise developing computational artefacts abstracting analysing artefacts communicating working effectively teams still others argue key abstraction automation simulation evaluation algorithm building conditional logic debugging decomposition analysis distributed computing effective teamwork emphasis given view benefits transfer domain field computer enhancing reinforcing intellectual yadav argues emphatically potential significantly advance problemsolving naturally researchers started exploring potential promote development certain emphasise program robots learn apply core abstraction automation analysis decomposition modularisation iterative national foundation provided evidence programmers project developed abstraction automation analysis related programming agent interact environment however worth mentioning according researchers field requires systematic assessment procedures engaging younger reported positive outcomes demonstrating years old build simple projects becoming acquainted powerful ideas engineering technology computer programming building specifically kindergarten lego wedo robots cherp creative hybrid environment programming language reported involved understood basic programming sequencing choosing correct instructions similar kazakoff kindergarten focusing solely sequencing showed improvement first last regarding elder junior report positive results development grover developed curriculum teaching language principles schools results indicated intervention certain related vocabulary principles conditional logic decomposition whereas like abstraction representation algorithmic flow control seldom another touretzky engaging aged special abilities focused abstraction programming environments especially deep abstract understanding programming researchers concluded despite limitations helpful tool young facilitating abstract understanding penmetcha investigated effects university exploring relationship developing programming algorithmic thinking results showed fulfil purpose medium incorporating practices regardless background teach designing programming testing abstract limitations reported small sample size finally case eguchi explores effects competition reporting overall positive effect overall although concept attracted considerable attention literature implementing setting still relatively sparse lack empirical evidence defining explicit boundaries although recent articles begin describe looks like introduced classroom early stages shortage description learn another issue understand grade ready familiar advanced abstraction automation decomposition etc teach progressively likewise little agreement strategies assessing development young people existing typically employ specific thus limiting generalisation results eg small sample sizes eg provide explicit teacher guidance organise wellguided promote researchers differ build operational framework apply presents various models employed various another issue interest differences observed stem much atmatzidou demetriadis autonomous systems models employed various article context lee abstraction automation analysis grover mean computational thinking language ctl abstraction taskbreakdown conditional logic representation algorithm debugging penmetcha university abstraction algorithm programming designing bers kindergarten sequencing kazakoff kindergarten sequencing touretzky aged abstraction software frameworks kodu alice lego nxt recognise fundamental programming bers kindergarten debugging correspondence sequencing control flow eguchi aged debugging prototyping decomposition logical thinking creating stepbystep procedure analysing critical thinking iteration debugging documented differences showing men higher levels selfefficacy higher probability success stemrelated fields eg however past decades gap narrowed stereotypic role might clear impact attitudes technology positively changed right conditions indicate genders successful rewarding experience exposed milto found although men confident abilities women introductory engineering class women men displayed equivalent competency similarly nourbakhsh investigated differences course involving according although entered course less confidence likely struggled programming end course confidence increased another cheng reported terms assembling programming lego robots slightly higher average male significant difference however comparing development genders relatively sparse conducted differences mathematics areas limited carried differences programming achievement especially early childhood motivation key question considering background current aimed conduct instructional wellguided recruit relatively large sample size explore impact comparing thus overarching question set developing context method participants purpose conducted series robotic seminars public schools area thessaloniki total levels junior vocational participated specifically seminars engaged junior vocational operationalise theoretical approach focused core dimensions broader conceptual framework included abstraction generalisation algorithm modularity decomposition proposed encompasses easily emerge engage detail proposed presented implementation procedure total conducted seminars junior vocational schools year lego mindstorms nxt kit seminars organised supervised main researchers authors seminar comprised sessions conducted week trained postgraduate trainers assisted practicalities eg organising handling worksheets encouraging scaffolding teams administering questionnaires etc seminars conducted typical time schedule class remained classroom simply helping maintain flow lesson detail sessions follows st beginning teacher introduced general lego mindstorms nxt lego nxtg programming environment handed profile questionnaire pq filled individually working implemented first program kit emphasis placed concept algorithm importance developing precise instructions implemented lead solution nd objective familiarisation basic programming sequential structure loop structure became familiar motors touch sensor sound sensor finally basic feature nxt us displaying images screen programmed robots dance presented placed focus abstraction generalisation participants prompted reflect role rd th sessions worked control structure ultrasonic sensor wait block practised conversion numbers text order show numerical value screen last th challenge create robotic alarm system detects motion sound end fourth administered first questionnaire order assess development rd focus modularity decomposition importance optimising structure algorithm implementation th onwards challenged engage practising th th sessions became familiar operation light sensor creation reusable subprograms atmatzidou demetriadis autonomous systems applied current description able abstraction abstraction process creating something simple something complicated leaving irrelevant details finding patterns separating ideas tangible details wing argues essence abstraction separate important redundant information analyse specify common behaviours programming structures scripts identify abstractions programming environments generalisation generalisation transferring problemsolving process wide variety expand existing solution given cover possibilitiescases algorithm algorithm practice writing stepbystep specific explicit instructions carrying process kazimoglu argue selection appropriate algorithmic techniques crucial part explicitly state algorithm steps identify effective algorithms given find efficient algorithm modularity modularity development autonomous processes encapsulate set often commands performing specific function might autonomous code sections decomposition decomposition process breaking smaller parts easily solved break smallersimpler parts easier manage wing argues decomposition attacking designing large complex task make block lamp block parallel programming programmed recycler moves following black line sorts items recycled depending colours th th sessions worked concept variable basic arithmetic operators context implemented security guard moves around building detects every motion sound change lightness th th sessions given increased difficulty practise developing context complex authentic car moves following traffic code etc project allowed demonstrate powerful ideas learned previous sessions well apply continue second questionnaire administered end assess current development th final given final challenge demanding programming task compete winner proposed effective efficient task solution optimised code fastest solution completion seminar instruments capture views regarding experience thinkaloud protocol implementation opinion questionnaire overall procedure seminar various collection instruments presented fig didactic seminar worked necessary guided worksheets investigating programming tasks gradually increased complexity enabled start constructing understanding developing prescribed worksheets directed assume roles analyst analyse algorithm designer describe algorithm programmer write code debuggerevaluator review assess solution exchanged roles successively evolved sessions trainers acted facilitators scaffold programming tasks th trainers gradually faded support means detailed guidance gradually replaced simple prompts assume role practise acquired capacity trainers ready fadein support circumstances require trigger reflection development modelled prompts following see included worksheets peers expected spend time discussing answer prompts peer assigned responsibility writing answer worksheet measures instruments analysis instruments collect evaluation respective measures follows profile questionnaire pq individual questionnaire administered beginning seminar questionnaire recorded simple demographic eg background computer example frequency computer computer experience etc experience previous knowledge constructing programming robots intermediate questionnaires handed th th questionnaires asked solve programming practise solution process example identify common programming structures guide behaviour tasks abstraction propose general solution generalisation describe stepbystep solution process algorithm etc assessment answers based graded criterion instrument rubric point likert scale unsatisfactory quite satisfactory satisfactory excellent specific criteria construct abstraction generalisation algorithm modularity decomposition assigned grade construct answering questionnaires mean value calculated constructs respectively consider measurements indicators development certain phases seminar th th following refer measurement starting simply measurement final simply measurement reflecting early covariate statistical analysis would like clarify although administering pretest atmatzidou demetriadis autonomous systems fig seminar organisational structure lower row indicates introduced arrows indicate sessions evaluation interventions conducted prompts trigger selfreflection abstraction common behaviour programs would describe common behaviour common programming structure information actually need irrelevant detail necessary description generalisation propose general solution cover wider variety cases proposed solution general algorithm write stepbystep operations needed asks steps need solve modularity parts code met created blocks expect need parts particular code future decomposition break complex smaller ones solve explain smaller building solution towards complex feasible though better approach first provide common programming tool expressing case lego mindstorms programming software collect initial sessions argue approach enabled us help homogeneous background led reliable measurement initial express programming tool compare short development long development opinion questionnaire soq opinion questionnaire handed filled individually completion instrument recorded subjective views understanding developing views opinions regarding outcomes overall experience key aspects development understanding basic programming ingroup collaboration benefits possible drawbacks likes dislikes overall thinkaloud protocol individually given certain programming task asked describe aloud process would follow solve simultaneously researcher prompted reflect solution assessment proposed solution based graded criterion instrument rubric consider grade indicator evaluated context questionnaires main difference thinkaloud method allows express thinking freely opposed highly structured form questionnaire instruments following refer thinkaloud measurement ta simply ctta individual measures construct mean ctta grade calculated constructs interview thinkaloud asked semistructured interview freely state opinion key aspects aspects described soq section observation systematic monitoring applied taking notes structured form observation sheets supervising researcher trainers filled sheets extensively discussed observations reach consent decide importance observation gradually developed displaying researchers observations order discussed importance results statistical analysis profile questionnaire revealed none participating previous experience collection statistical processing follows presents statistical controls applied junior vocational presents statistical controls applied analysed dimensions presents statistical control applied ctta total analytical dimensions presents statistical control applied junior girlsboys distribution highly uneven excluded comparisons presents statistical controls applied analysed dimensions refer within presents statistical control applied ctta total analytical dimensions atmatzidou demetriadis autonomous systems comparing paired ttest ancova sd sd compared comparing covariate total significant difference comparing analytically dimensions paired ttest ancova sd sd comparing covariate abstraction generalisation algorithm modularity decomposition significant difference comparing ctta ttest sd sd abstraction generalisation algorithm modularity decomposition total ctta significant difference comparing paired ttest ancova sd sd compared comparing covariate girl boy total significant difference opinion questionnaire soq soqs interviews helped us understand opinions regarding overall key findings summarised follows subjective impression acquired certain reported detect describe common behaviours programming structures tasks sd suggest general solution given sd ii reported guidelines worksheets helped certain problemsolving process sd find process useful think comes mind domains well sd statements think differently solve easily changed thinking even subjects mathematics iii stated became familiar basic programming constructs sd would like continue programming particular mentioned better understood basic programming learned programming environments control structure else loop structure next working robots helped deeper understanding programming sd kept atmatzidou demetriadis autonomous systems comparing analytically dimensions paired ttest ancova sd sd comparing levels covariate abstraction girl boy generalisation girl boy algorithm girl boy modularity girl boy decomposition girl boy significant difference statistical analysis comparing ctta independent ttest sd sd abstraction generalisation algorithm modularity decomposition total ctta terest motivated keep working programming sd iv regarding collaboration enjoyed working minds better motivate working together assuming roles sd popular role programmer finally found experience interesting sd reporting would like continue practising future sd engage challenging tasks indicative interest fact finishing worksheets explored programming structures blocks even learned yet ideas expand improve solutions discussion conclusions current analysed development computational thinking context special focus impact instructional approach ages genders provides evidence evaluation instruments administered various times thus offering picture progresses evaluated modalities assessment instruments questionnaires answered written problemsolving think aloud protocols finally researchers observations qualitative opinion questionnaires help triangulate deeper understand meaning first observation end independently additionally cases significantly improved proceeds comparing tables clear total population although appears strong tendency exactly reaching significance paired ttest ancova thus key conclusion satisfactory development needs considerable sessions independently simply matter sessions conclusion line emphasising development general requires adequate amount time reflecting see significant differences measures identified certain cases independently clearly modularity decomposition dimensions cases differences evidenced algorithm generalisation dimensions abstraction explain differences resort researchers observations regarding composition preference writing willing provide answers written line suggesting significantly reluctant writers example contrast almost equally distributed adopt positive attitude towards expressing written compared keeping mind explore implications development abstraction reaches already surpassed next sessions indication onwards deal programming tasks without development reflected measures additional workload expressing written seem affect however generalisation algorithm developed probably explained observation younger willing follow instructions provide answers written already th improve significantly gradually familiarise following worksheet guidelines become willing provide written documents expressing thinking explanations supported fact aforementioned differences observed modality assessment instrument changes see comments regarding finally considering modularity decomposition dimensions observe significant differences regarding modularity believe significant improvement atmatzidou demetriadis autonomous systems score mainly due improvement score see modularity comment regarding decomposition see improve significantly score see believe due increase complexity proceeds increased complexity gives opportunity practise extensively reflected additionally identify decomposition statistically significant difference favouring ancova suggest another manifestation unwillingness routinely follow instructions actually think necessary decompose smaller ones solve however attitude could linked cognitive maturity elder adolescents compared younger adolescents enables former manage complex programming solutions without decomposing moving ctta see evaluating orally thinkaloud protocol betweengroup differences identified except generalisation favouring corroborates already stated conclusions development happens independently measures might affected workload imposed recording instrument modality asked provide written evidence might appear underperform poorly following instructions decomposition however clear outperforms generalisation possible explanation oral modality allows specific profile male thoroughly express complex thinking required describe generalised solution thus might another indication interaction assessment instrument modality seriously considered researchers dimensions total score significant differences recorded next focus analysis tables key conclusion although reach ancova however significant difference subsample indicating need longer time reach difference reflected total population paired ttests outcome line suggesting seem require time compared comes development see presents analytically dimensions previously discussed pattern genders reach need time appears abstraction strong tendency generalisation strong tendency modularity significant difference algorithm decomposition dimensions decomposition believe explanation increased complexity programming tasks proceeds allow genders practise decomposition systematically reflected finally interesting evidence emerges hand significant differences appear neither total ctta score dimension except strong tendency algorithm favouring significant outcome compatible overall pattern reach finally hand however strong tendency algorithm seems odds discussed far algorithm developed possible explanation might understand express algorithmic dimension programming task efficiently nevertheless additionally given opportunity express algorithmic thinking orally tend effectively anyway acknowledge needed clarify point reflecting researchers observations report important follows despite initial difficulties grasping concept abstraction able easily identify common programming comparing scenarios conclusion line quantitative indicating abstraction easily grasped practised beginning faced difficulties understanding concept generalisation suggesting general solutions however end interesting generalisations observed solutions especially assimilated concept easily often without intervention trainers corroborates findings elder adolescents seem practise generalisation significantly better assessment modality oral thus generalisation appears develops better elders perhaps related cognitive developmental certainly needed clarify issue difficulty describing algorithm clarity accuracy preferred describe process general rather analyse step step perhaps due cognitive load induced analytically expressing algorithm modality effect identified tend orally describe algorithm better encouraged trainers practised modularity creating programming blocks familiarised integrated last observation line quantitative showing applies decomposition better attribute behaviour mostly unwillingness follow instructions decomposing able manage code whole overall provides evidence ages vs genders eventually reach development view supported evidence assessment instruments modalities time essential commodity development evaluated later found cases significantly improved compared initial analysing particular certain differences identified related following factors cognitive developmental attitudes following instructions afford workload induced task assessment instrument modality impact generally reluctant writers compared attitude intense appear underperform evaluation based instruments written modality appear cases need time sessions order reach provided overall instructional context supportive time adequate overcome initial difficulties successfully understanding conclusions done considering limitations important remember cannot conducted full experimental control factors might atmatzidou demetriadis autonomous systems interact unexpected relatively uncontrolled current provides evidence coming various collecting methods assessment instruments modality something believe increases validity conclusions however possible include control would allow exploring issue whether compared control noner instructional condition additional limitation exclusion controls due highly uneven distribution girlsboys sample permit current simultaneously apply acrossage acrossgender controls could shed light differences reveal possible interaction factors finally administer preintervention controls preference writing attitude general ability levels experience indicates tests could provide valuable information regarding observed differences acknowledgements authors would like thank postgraduate studenttrainers involved seminars helpful collaboration journal editor manuscript reviewers constructive comments 
current issue full text archive journal available emerald insight wwwemeraldinsightcomhtm abstract artificial intelligence computational thinking mathematics artificial intelligence received september revised october accepted november george gadanidis western university london canada purpose purpose paper examine intersection artificial intelligence ai computational thinking mathematics young specifically focuses key elements common ai agency modeling phenomena abstracting beyond specific instances designmethodologyapproach theoretical framework paper adopts sociocultural perspective knowledge constructed interactions others vygotsky others refers multiplicity technologies surround us including digital artefacts media world human methods specialized processes acting world technology simply tool human intention actor cognitive ecology immersive humanswithtechnology environments levy supports disrupts reorganizes human thinking borba villarreal findings fruitful overlap ai value consider mathematics originalityvalue seeing lenses disciplines recognizing significant overlap key elements reinforces importance agency modeling abstraction provides contexts tools incorporating classroom practice keywords artificial intelligence mathematics computational thinking paper type conceptual paper introduction paper examines intersection artificial intelligence ai computational thinking mathematics young specifically focuses key elements common ai agency modeling phenomena abstracting beyond specific instances see figure case lot authors theoretical framework paper adopts sociocultural perspective knowledge constructed interactions others vygotsky others refers multiplicity technologies surround us including digital artefacts media world human methods specialized processes acting world technology simply tool human intention actor cognitive ecology immersive humanswithtechnology environments levy supports disrupts reorganizes human thinking borba villarreal actornetwork theory latour emphasizes reciprocal relationship actor technology acting acted upon thumlert examination overlap ai identify explore key elements actors thinkwith teaching process first sections introduce ai third section discusses agency modeling abstraction seen common key elements ai ai ai intelligence evident machines software name academic field create computers computer software intelligent behavior major ai researchers textbooks international journal information technology vol emerald publishing limited doi ijilt ijilt define field intelligent agents intelligent agent system perceives environment takes actions maximize chances success artificial intelligence nd para today ai increasingly pursued variety ways industry seen development selfdriving cars google cognitive systems like watson ibm ai singularity experts estimate years away ai singularity machines recursive selflearning surpass human intellectual capacity control ai machines match surpass human intelligence seen leading positive technological advances eliminating aging disease enhanced space travel bostrom yudkowsky time ai singularity prove disastrous stephen hawking told bbc cellanjones development full ai could spell end human race hawking para wrote superior alien civilisation sent us message saying well arrive decades would reply ok call us get well leave lights probably less happening ai although facing potentially best worst thing happen humanity history little serious devoted issues us ask improve chances reaping benefits avoiding risks ai ai historically focused digital tutors provide exposition learned intelligence respond meaningfully behavior providing adaptive support gilbert addressing styles dorca providing culturally appropriate communication blanchard historically tutors embedded software packages designed specific content areas mathematics today especially higher grades postsecondary settings increasingly occurring online settings focus webbased intelligent agents act content tutors online discussion facilitators adamson tegos ai support online especially important growth massive open online courses moocs enrollment popular mooc platforms averages ferenstein ai play role organizing supporting online collaboration assessing another form ai us take granted online search engines coupled tremendous amount freely accessible online information agency modeling abstracting figure elements common ai ai need definition knowledge complete task help understand concept quick search available online knowledge identify variety text multimedia resources assist us instances screenbased coding digital tangibles programmable robots circuits offscreen algorithms pseudocode term popularized wings advocacy reading writing arithmetic add every childs analytical ability currently isolated curriculum objective rather integrated enriching existing subject areas gadanidis however natural connection mathematics logical structure ability mathematical relationships wing aictme let us turn intersection ai explore common focus agency modeling abstraction agency ai agency associated features selfregulation selflearning key aspects ai lets take selfdriving cars example core analysis sensor image instance kind object front car car respond examines images guesses kind object image initially guesses wrong therefore algorithm modifies internal parameters parts structure somewhat tries process continues discarding changes reduce algorithms accuracy keeping changes increase accuracy correctly classifies images afterward entirely images presented algorithm classify accuracy algorithm learned top misconceptions autonomous cars selfdriving vehicles para team programmers designing selfdriving car could attempt anticipate every obstacle situation variations numerous carinaction able learn experience make decisions based selflearning interesting car learns something situation knowledge immediately shared cars cars learn agency key feature educationoriented environments building paperts logo programming several programming languages available today eg available httpsscratchmitedu offer low floor enabling even young engage little prerequisite knowledge ceiling providing opportunities explore complex relationships elaborated greater detail gadanidis press environment offers opportunities abstract automate dynamically explore relationships experience conceptual surprise insight implementing preprogrammed simulations creating editing thus experiencing mathematics producers well consumers example figure shows code drawing set circles rotated point young drag drop code blocks snap together various mathematical computer coding experiences control writing personally meaningful code exploring related extensions agency key feature theory burton suggests agentic control makes substantial difference mathematics attitude achievement artificial intelligence ijilt go clear pen repeat draw circle turn degrees change pen color define draw circle repeat move steps turn degrees schoenfeld suggests come believe mathematics consists mastering formal procedures completely divorced real life discovery papert adds convinced best takes place learner takes charge modeling ai developing selfdriving car involves conceptualizing models cars move react pedestrians interact vehicles give examples similarly designing intelligent agents contexts tutoring online facilitation requires development models subject matter learners modelcreation associated modeltesting refinement integral component ai development approach focuses logic computational algorithms sequences steps implemented computer aho wing power modeling dynamic nature making change computer code shows mathematical reaction immediately example changing values parameters figure cause program draw fewer circles shapes dynamic modeling allows play mathematics helps bring life studying play naturally engages creative ginsburg historically valued early childhood perry dockett duncan lockwood abstraction ai abstraction plays key role representing knowledge reasoning saitta zucker integral component ai development example case selfdriving car creating pedestrian abstracts key attributes figure creating circles pattern yadav note abstraction key element wing states computing abstract notions beyond physical dimensions time space abstractions extremely general symbolic numeric abstractions special case process abstraction seen figure code represents variety related cases abstraction heart mathematics abstraction everyday sense word natural human example young easily abstract beyond specific instances objects mental models classes objects cat despite sizes colors behaviors cat instances however argued gadanidis idea engaging young abstraction widely accepted primarily due widespread acceptance piagets stages development egan notes piagets ideas overall approach absolutely dominate papert egan fernandezarmesto schmittau challenge piagets notion young abstract thinking egan identifies integral language development abstraction helps conceptualize engage complex relationships reducing information detail wing notes abstraction better manage complexity concluding remarks tremendous interest enthusiasm today canada example january prime minister justin trudeau need lot better job getting young people understand coding important program solve create elegant algorithm possible kitchener post around time provinces british columbia nova scotia announced computer coding added grades curriculum internationally example england mandated coding curriculum time discussed growing industry focus ai phenomena distinct separate ancient greek playwright sophocles suggested plots life better understand evolving phenomena around us important examine overlap see lens another paper offers nascent exploration intersection ai highlighting common elements agency modeling abstraction seeing lenses disciplines helps us recognize significant overlap key elements draws pedagogical attention importance agency modeling abstraction provides contexts tools incorporating classroom practice references adamson dyke jang rose cp towards agile approach adapting dynamic collaboration support needs international journal artificial intelligence vol aho av computation computational thinking computer journal vol artificial intelligence nd wikipedia available httpsenwikipediaorgwikiartificial intelligence accessed march blanchard eg sociocultural imbalances aied investigations implications opportunities international journal artificial intelligence vol borba mc villarreal humanswithmedia reorganization mathematical thinking information communication technologies modeling experimentation visualization springer york ny artificial intelligence ijilt bostrom yudkowsky ethics artificial intelligence frankish ramsey eds cambridge handbook artificial intelligence cambridge university press cambridge burton practices mathematicians tell us coming know mathematics mathematics vol cellanjones stephen hawking warns artificial intelligence could end mankind british broadcasting corporation december available wwwbbccomnews technology accessed february dorca implementation simulated validation adaptive systems practical insight international journal artificial intelligence vol duncan lockwood play workbased approach early years continuum international publishing york ny egan educated mind cognitive tools shape understanding university chicago press chicago il egan getting wrong beginning progressive inheritance herbert spencer john dewey jean piaget yale university press ferenstein massive online courses enroll average completion tech crunch available httptechcrunchcomstudymassive onlinecoursesenrollanaverageofstudentscompletion accessed february fernandezarmesto truth history guide perplexed bartam london gadanidis young mathematics coding low floor ceiling wide walls environment polly ed cases technology integration mathematics igi global hershey pa gadanidis coding trojan horse mathematics reform journal computers mathematics teaching vol gadanidis hughes minniti white press computational thinking grade binomial theorem digital experience mathematics gilbert sb blessing sb guo authoring effective embedded tutors overview extensible specific tutor xpst system international journal artificial intelligence vol ginsburg hp mathematical play playful mathematics guide early golinkoff rm hirshpasek singer eds playlearning oxford university press york ny hawking transcendence looks implications artificial intelligence taking ai seriously enough independent available wwwindependentcouknews sciencestephenhawkingtranscendencelooksattheimplicationsofartificialintelligencebut arewetakinghtml accessed february kitchener post google opens doors breithaurt pm trudeau takes part available wwwkitchenerpostcanewsstorygoogleopensitsdoorsonbreithauptpmtrudeau takespart accessed june latour reassembling social introduction actornetworktheory oxford university press oxford levy tecnologias da inteligencia futuro pensamento na era da informatica technologies intelligence future thinking informatics era editora rio de janeiro levy becoming virtual reality digital plenum press york ny papert mindstorms computers powerful ideas basic books york ny papert childrens machine rethinking computer basic books york ny perry dockett young childrens access powerful mathematical ideas english ld ed handbook international mathematics directions st century lawrence erlbaum associates mahwah nj saitta zucker jd abstraction artificial intelligence complex systems springer york ny schmittau development algebraic thinking vygotskian perspective zdm vol schoenfeld ah whats fuss metacognition schoenfeld ah ed cognitive mathematics lawrence erlbaum associates hillsdale nj tegos demetriadis tsiatsos configurable conversational agent trigger productive dialogue pilot call domain international journal artificial intelligence vol thumlert de castell jenson short cuts extended techniques rethinking relations technology theory philosophy theory vol top misconceptions autonomous cars selfdriving vehicles driverless car market watch available wwwdriverlessfuturecompageid accessed february vygotsky ls mind society harvard university press cambridge wing notebook computational thinking link magazine spring carnegie mellon university pittsburgh pa available httplinkcscmuedu articlephpa wing jm computational thinking communications vol wing jm computational thinking thinking computing philosophical transactions royal society vol yadav mayfield zhou hambrusch korb jt computational thinking elementary secondary teacher transactions computing vol corresponding author george gadanidis contacted ggadaniduwoca artificial intelligence instructions order reprints article please visit website wwwemeraldgrouppublishingcomlicensingreprintshtm contact us details permissionsemeraldinsightcom 
comprehensive articles bringing computational thinking involved role computer community valerie barr chris stephenson process increasing exposure computational thinking complex requiring systemic change teacher engagement development significant resources collaboration computer community vital effort inroads march vol comprehensive articles introduction jeanette wing launched discussion regarding role computational thinking disciplines ignited profound engagement core questions computer might contribute spectrum human inquiry wing argued advances computing allow researchers disciplines envision problemsolving strategies solutions virtual real world computing made possible profound leaps innovation imagination facilitates efforts solve pressing example prevention cure dis eases elimination world hunger expands standing biological systems relationship world around us advances turn drive need educated individuals bring power computing supported expanded field endeavors longer sufficient wait college introduce todays go live life heavily influenced computing fields involve influenced computing must gin algorithmic computational methods tools successful embedding com putational thinking curriculum requires efforts directions policy must changed overcoming significant infrastructure hurdles need resources starting cogent definition appropriate examples paper report first part multiphase project aimed developing operational definition computational thinking along suitable resources policy curricular change addition explaining sues involved arena paper following galezer stephenson intended help bridge gap cs communities note effort distinct cs efforts zendler spannagel goal articulate set key con cepts within computation applied disciplines rather proposing set central computer sci ence solely cs curricula computer community play impor tant role highlighting algorithmic practices applications computing disciplines help integrate application computational methods tools diverse areas time cs educators must understand complexities setting incorporating knowledge outreach support changes developing definition approach computational think ing suitable especially challenging light fact yet widely agreed upon definition compu tational thinking certainly already learn think solve computer scientists help teach ers understand processes algorithmic identify actual computation manipulation computer fit disciplines require promote teach solv ing logical thinking algorithmic thinking computer sci entists promote understanding bring computational processes bear fields lie intersection disciplines example bioinformatics computational biology benefit combination biology computer former involves collecting analyzing biological information latter involves simulating biological systems processes presenting bio informatics computational biology algorithmic form helps scientists exchange information multiple definitions computer computational thinking questions nature value computer old discipline abelson sussman argued computer discipline constructing ap propriate descriptive languages denning however posited computer consists mechanics computation com munication coordination automation recollection principles simplicity performance reliability evolvability se curity practices programming engineering systems ing validation innovating applying curriculum computer provides defini tion computer specifically educators computer argues neither programming computer literacy rather computers algorithmic processes cluding principles hardware software applications impact society pg computer therefore includes programming hardware networks graphics databases information retrieval computer security software programming languages paradigms logic translation levels abstraction artificial intelligence limits computations computers cannot applications information technology information systems social issues internet security privacy intellectual property etc recently felleisen krishnamurthy argued imaginative programming crucial element computing closely aligns mathematics computing brings mathematics life framing conceptual importance com putational thinking distinct computer wing suggested computational thinking includes seeking algorithmic march vol inroads comprehensive articles bringing computational thinking continued approaches domains readiness move dif fering levels abstraction representation familiarity de composition separation concerns modularity recently isbell argued computationalist thinking focus providing services interfaces behaviors involves central role modeling means formulating relationships identifying agencies sources change international working computational thinking pointed however computational thinking shares elements various types thinking algorith mic thinking engineering thinking mathematical thinking perkovic similarly focus intellectual neces sary apply computational techniques computer applications projects discipline hemmendinger notes must aware risks arrogance reaching discussing role computational thinking es pecially disciplines argues elements compu tational thinking computer scientists tend claim constructing models finding correcting errors creating representations analyzing shared disciplines appearance grand territorial claims risks provoking would computational thinking look like classroom would demonstrate would teacher need order put computational thinking practice already could modified extended useful definition must ultimately coupled ex amples demonstrate computational thinking corporated classroom regarding implementa tion computational thinking informal provides valuable insights international working computational thinking example points several suc cessful projects simulation modeling computer game teach abstraction automation analy sis note kinds involve iterative refinement reflection process resnick argues central creative well computational thinking summer computer sociation csta international society technology iste began multi phase project aimed ing operational definition computational thinking organizations see appendix informa tion csta iste particularly suited taking extensive involvement ex pertise developing standards curriculum materials professional development educators project would bring together computational think ing curriculum thought leaders committed focusing definitions implementation computational thinking context real curriculum outcomes standards arti facts project began selection small steering com mittee met identify criteria names potential invitees thought leaders meeting agenda twoday thought leaders meeting designed create frameworklexicon better facilitate discussions key elements computational thinking diverse disciplines steering committee identified educators ad ministrators interest computational thinking expertise curriculum development implementation would provide representation broad spectrum backgrounds perspectives higher faculty researchers professional associations schoolbased leaders corporate community experience demonstrated interest issues useful definition must ultimately coupled examples demonstrate computational thinking incorporated classroom adverse reactions hemmendinger concludes ultimate goal teach everyone think like computer scientist rather teach apply common elements solve discover questions explored within disciplines creating definition computational thinking today highly complex highly politicized en vironment multiple competing priorities ideologies peda gogies ontologies vie dominance simultaneously subject wildly diverse expectations intense scrutiny di minishing resources effort achieve systemic change environment requires deep understanding realities system passionate debate nature computer computational thinking provide intellectual stimulation computing fields however embedding computational thinking requires practical approach grounded op erational definition requires begin set ques tions focused specifically implementation inroads march vol comprehensive articles demonstrated leadership particularly stem discipline areas steering committee eventu ally selected thought leaders charged developing shared vision set strategies embed ding computational thinking curriculum especially stem subject areas purpose meeting held days april craft formal defin itive definition computational think ing debated academics rather goal meeting reach consensus computational think ing means well explain particularities cs representatives spe cifically collaboration successful college faculty must un derstand complexities teaching making changes setting computer scientists participating particular noted change considerably complex suspected working educators multiple diverse disciplines meant disconnect computational thinking computer ways envisioning computational thinking classroom participants identified ideas computational thinking could classrooms chal lenged task describing makes computational thinking distinct kinds thinking participants tended focus centrality computer set encompassed computational thinking approach implemented computer become merely tool users tool builders set ab straction recursion iteration process analyze create real virtual artifacts methodology automated transferred applied subjects considered generation computational thinking potential wide variety disciplines power computational thinking applies every type reasoning enables kinds things get done quantum physics advanced biology humancomputer systems de velopment useful computational tools participants envisioned computational thinking manifesting classroom active saw engaged tools solve comfort able trial error working atmosphere figuring things gether saw key hear talk sequences inputs outputs saved value complex solution meeting participants predicted whose abounded opportunities computational ing would evidence fluid kind would understand solved multiple ways tolerance ambiguity flexibility rea sonable expectations prospect producing working solution structured emerged focused identifying core computa tional thinking capabili ties providing examples might embedded multiple disciplines shows results efforts participants discussed core context capabilities dispositions predispositions classroom cul ture ways capabilities category reiteration core focused would actually capabilities include solutions abstraction automation creating algorithms collection analysis implement designs programming appropriate debug run simulations systems analysis reflect practice communicating vocabulary recognize abstractions move levels abstractions innovation exploration creativity disciplines employ diverse strategies dispositions predispositions category arose attempt capture areas values motivations feelings stereotypes attitudes applicable computational thinking included confidence dealing complexity persistence working difficult ability handle ambiguity ability deal openended setting aside differences others achieve common goal solution knowing ones strengths weaknesses working others meeting participants predicted whose abounded opportunities computational would evidence fluid kind march vol inroads comprehensive articles bringing computational thinking continued core computational thinking capabilities concept capability collection analysis representation decomposition abstraction algorithms procedures automation parallelization simulation cs find source area write program basic statistical calculations set structures array linked list stack queue graph hash etc define objects methods define main functions procedures encapsulate set often repeated commands perform function conditionals loops recursion etc classic algorithms implement algorithm area threading pipelining dividing task processed parallel algorithm animation parameter sweeping math find source area example flipping coins throwing dice count occurrences flips dice throws analyzing results histogram pie chart bar chart represent sets lists graphs etc contain apply order operations expression variables algebra identify essential facts word functions algebra compared functions programming iteration solve word long division factoring carries addition subtraction tools geometer sketch pad star logo python code snippets solve linear systems matrix multiplication graph function cartesian plane modify values variables collect experiment analyze experiment summarize experiment species classification build physical entity experimental procedure probeware simultaneously run experiments parameters simulate movement solar system social battle statistics population identify trends statistics summarize represent trends summarize facts deduce conclusions facts language arts linguistic analysis sentences identify patterns sentence types represent patterns sentence types write outline simile metaphor write story branches write instructions spell checker reenactment story excel play empires oregon trail attempting define classroom culture would conducive computational thinking participants identified strategies characteristics could considered broadly beneficial experience included team explicit decomposition breaking smaller parts easily solved abstraction simplifying concrete general solutions developed negotiation within team working together merge parts solution whole consensus building working build solidarity behind idea solution increased computational vocabulary appropriate describe solutions acceptance failed solution attempts recognizing early failure often put path successful outcome inroads march vol order articulate expand set resources thought leaders identified several strategic areas would addressed order successfully embed computational thinking within strategic area developed set requirements suggestions would support element systemic sustained change policies vision language policies include computational thinking part every include following present single message federal state local levels importance computational thinking encourage computer professional organizations advocate federal state levels active state standards incorporate computational thinking throughout entire experience outcomes demonstrate incremental steps attach computational thinking possible existing policies example could included explicit outcome state technology tests include teacher preservice preparation programs class computational thinking disciplines shared vision common language include following inspiring preparing change include follow ing foster professional development since critical successful change cs faculty help providing summer institutes demonstrating role computational thinking noncs disciplines providing curricular materials encourage administrators provide incentives change courses curricula nsf ret grants awarded cpath grantees provides incentives adopt curricular pedagogic changes piloted college provide resources support change including curricular materials models simulations web sites independent provide professional development support form communities summer institutes peer offered computational thinking experience exposure industry applications utilized help identifying computational thinking already included teaching make available districts opensource tools blogs wikis forums webbased social networks content delivery systems vetted districts likely block encourage current professional associations show computational thinking fits current standardswork comprehensive articles detail synthesis clearly required planned next phase project models provide begin embedding computational thinking within formal counters potential claim computa tional thinking addressed informal expe riences discipline basedlearning classroom constraints major encumbrances however still considerable barriers must considered attempt systemic sustained change strategies achieving systematic change kind systemic sustained change proposed necessitates sets resources resources needed help improve relationships communication educators faculty administrators college cs faculty computer professionals others industry clear statement computational thinking core competency demystify terminology computational thinking give clear examples ways applies integrated range curricular areas inspiration leadership district leadership inspiring change provide materials help administrators stand computational thinking see associated knowledge important todays larger cs com munity help providing suitable materials taking advan tage opportunities administrators inform policy makers nature importance computational thinking con nections goals already set example national state standards ways best integrated within larger framework suc cess need resources demonstrate appropriately effectively integrate first sphere content pedagogical knowledge classroom content practice larger cs community help providing suitable materials taking advantage opportunities administrators march vol inroads comprehensive articles bringing computational thinking continued ask professional associations include focus computational thinking conferences workshops professional development events represent strategic areas would support long term goal embedding computational thinking clearly demonstrate myriad issues obstacles involved trying achieve change illustrate critical importance engaging knowledgeable educators projects purport improve extent successful effort require expertise resources dedication educators policy makers levels next step next phase project involve practitioners workshop begin resources strategies identified thought leaders meeting challenge determine best possible artifacts promote implementation compu tational thinking expect practitioners workshop therefore include development various resource sets example framework might developed guide policy eg district state second resource might consist exemplars classroom precise set resources content yet deter mined clear practitioners workshop focused formulating materials implementing curriculum advocating computational thinking key component given efforts already college including development curricula resources expect computer community much contribute effort ir csta membership organization computing educators postsecondary mission support promote teaching computer computing disciplines providing opportuni ties understand better computing disciplines prepare successfully teach learn since inception years ago csta become primary voice computer advocating importance computer part canon centrality stem technology engineer ing mathematics disciplines development publication curriculum computer supporting curriculum implementation documents csta provided de facto national standards computer csta conducts groundbreaking published several germinal white papers key computer issues provides multiple levels professional development workshops annual conferences helped educators improve theiir technical knowledge pedagogical references abelson sussman structure interpretation computer programs mit press cambridge denning great principles computing communications felleisen krishnamurthi viewpoint computer doesnt matter com munications galezer stephenson computer teacher preparation critical inroads hey tansley tolle jim gray escience transformed scientific method fourth paradigm dataintensive scientific discovery microsoft redmondwa hemmendinger plea modesty inroads isbell stein cutler forber fraser impagliazzo proulx russ thomas xu redefining computing curricula redefining computing sigcse bulletin iwg computational thinking youth development center inc newton resnick really need know creative thinking learned studying chil dren learn kindergarten creativity cognition conference washington dc perkovic settle hwang jones framework computational thinking curriculum proceedings conference innovation technology computer tucker mccowan deek stephenson jones verno curriculum computer report task force computer curriculum committee association computing machinery york ny wing jm computational thinking communications zendler spannagel empirical foundation central computer sci ence journal resources computing valerie barr computer department union college union street schenectady ny barrvunionedu chris stephenson computer association penn plaza suite york ny cstephensoncstaacmorg categories subject descriptors computers computer information computer curriculum general terms human factors keywords computational thinking curriculum cs crossdisciplinary computing doi appendix ste recognized leadership improve teaching effective integration technology curriculum throughout enterprise istes commitment transformation best represented national technology standards nets administrators convening educators teacher educators curriculum associations government business private foundations iste built consensus framework momentum standards iste leader convening educators leaders best illustrated annual conference showcases emerging technology innovative effective technology classroom inroads march vol note project supported national foundation grant nos 
computers human behavior xxx xxxx xxxx contents lists available sciencedirect computers human behavior journal homepage wwwelseviercomlocatecomphumbeh full length article computational thinking improved methodology based metaphors teach computer programming diana perezmarina raquel hijonneiraa adrian baceloa celeste pizarrob rey juan carlos university computer department mostoles madrid spain rey juan carlos university applied mathematics department mostoles madrid spain article info keywords computational thinking primary programming methodology metaphor introduction computational thinking defined designing systems understanding human behavior based computer wing key chil dren st century wing however unclear developed effective currently pedagogical methodologies researched last years authors claimed acquired developed teaching programming addition claimed done early possible heintz mannila farnqvist kazakoff sullivan bers mccartney mccartney tenenberg papadakis kalogiannakis zaranis strawhacker portelance lee bers possible acquired means bers storytelling lee unplugged brackmann barone casali boucinha munoz hernandez jr papadakis even ethics lessons seoanepardo although paper focuses pro gramming foster program worthwhile reason real need programmers corresponding author email address dianaperezurjces perezmarin httpsdoiorgjchb abstract computational thinking key st century however clear effective acquire improve big efforts made determine pedagogical means trend based idea teaching programming since primary suffices improve previous proposed validated methodology based metaphors mecoprog teach basic programming hypothesis applying mecoprog check carried experiment primary years beginning experiment asked fill programming tests measure sessions taught according mecoprog finally took tests significant increase results tests measured supporting metaphors teach computer programming primary digital society margulieux catrambone guzdial well advantages improvement higher cognitive pea kurland countries implemented computer subject primary train creators computer programs heintz common approach teaching computer sci ence defined authoring environment de veloped lifelong kindergarten mit media lab interactive media snapping together programming instruction blocks resnick ouahbi kaddari darhmaoui elachqar lahmine approaches focus makey makey interact computer means fruits playdoh rather traditional mouse lee kafai vasudevan davis lego wedo mindstorms ev ro bots sovic jagust sersic producing making games campe denner another possibility follow unplugged approaches storytelling free exercises codeorg particularly useful countries limited resources de veloped countries computer considered interesting lack trained andor resources brackmann results approaches yet properly eval uated effectiveness still unclear kalelioglu received december received revised form august accepted december elsevier ltd rights reserved please cite article diana perezmarin computers human behavior httpsdoiorgjchb perezmarin computers human behavior xxx xxxx xxxx moreover methodology particular resources identified adequate teach programming difficulties teaching even basic program construction lahtinen alamutka jarvinen loops ginat structures control algorithms seppala malmi korhonen difficulties arise poor teacher lack proper teaching methodology barker mcdowell kalahar coull duncan become evident need guidance approach task adequately brackmann jovanov stankov mihova ristov gusev yadav gretter hambrusch sands previous proposed validated meta phors introduce basic programming according methodology mecoprog perezmarin stance proposed metaphors thermomix recipe program sequence pantry memory boxes variables illustrated possibility applying metaphors source available teacher reason metaphors widely reported usefulness metaphors powerful tools metaphors focus facilitate organization ideas clearer straightforward thinking rodriguez dieguez metaphors require special equipment helps turn abstract simple ideas images need clear careful wellfocused thinking correctly write computer programs heintz paper asks following question computational thinking improved methodology based metaphors teach computer programming hypoth esis answer yes asked primary aged follow mecoprog weeks objectives teach basic computer programming teaching metaphors results derived show metaphors significantly able learn basic programming paper organised follows section reviews background literature computational thinking teaching programming primary section outlines materials methods experiment carried reproduced elsewhere section presents results experiment section sum marises main conclusions suggests future lines background computational thinking term dates back referred algorithmic thinking defined algorithms produce appropriate output given input denning wing relaunched interest topic defined follows involves designing systems understanding human behavior drawing con cepts fundamental computer wing given gen eric nature definition recently several un successful attempts make specific aho brennan resnick csta iste google wing according grover pea includes decomposition pattern generalisations location abstraction algorithms among computer resources debugging systematic error detection iterative parallel recursive thinking control flow symbols brennan balch chung explored terms programming specifically based clas sification practices computational perspectives brennan resnick see summary dimensions source brennan resnick sequences loops parallelism events conditionals operators practices incremental iterative development debugging mix reuse abstract encapsulate perspectives express connect question goal replace creative critical thinking competences add computers algorithms solve cuny snyder wing wing csta iste furber espino soledad gonzalez governments emphasise need fluent digital language rather making mere users computer software garciapenalvo already certain resources available specialised literature balanskat engelhardt wing program induce changes people think papert resnick likely ana lytical component quite similar mathematical thinking ie engineering thinking eva luation processes scientific thinking systematic analysis useful professionals computer person wing starting early possible particular interest shown aged young understand programming even build simple robots move interact environment bers ponte juelich viera schenker bers teaching computer programming cluded primary curricular countries heintz see commonly approach teach com puter resnick interacting learn basic se quences loops parallelism events conditionals operators brennan resnick ouahbi approaches include making program campe denner lego wedo mindstorms ev robots sovic regard unplugged approaches common countries limited resources developed countries consider computer interesting option lack trained andor internet connections brackmann unplugged approaches computer transmitted storytelling free exercises available codeorg bears mentioning established method evaluate effectiveness approaches therefore validity still unclear kalelioglu previous perezmarin contributed debate introducing metaphors alternative approach teaching programming metaphorical language employed real everyday life considered crucial component thinking lakoff johnson particular conceptual metaphors ie cognitive mechanisms project source domain target domain order facilitate understanding concept target domain great interest environments sanford tietz farooq guyer shapiro metaphors teach biology paris glynn chemistry thomas mcrobbie mathematics boero bazzini garuti metaphors teach computer common college subject interest putnam sleeman baxter kuspa sanford perezmarin computers human behavior xxx xxxx xxxx interest teaching programming based heinz mannila farnqvist country australia england estonia finland zealand norway sweden south korea finland usa macedonia content form subject integrated replaces existing subject integrated integrated primary compulsory compulsory compulsory compulsory compulsory compulsory compulsory compulsory secondary compulsory compulsory opcional opcional opcional opcional compulsory opcional digital technologies computing programming programming programming programming programming informatics computer computer computers basics programing subject subject integrated subject subject subject subject computer digital competence specific metaphors locker memory teach dynamic memory jimenezperis parejaflores patinomartinez velazqueziturbide matrixes event handling java milner however metaphorical language tool teach basic computer primary minimum yet researched detail therefore proposed validated methodology called mecoprog see description section teach programming primary metaphors purpose experiment described paper analyse whether mecoprog impact programming knowledge whether improve computational thinking method participants spanish primary male femal aged recruited parts asked take part experiment order assess whether computational thinking improved teaching programming mecoprog methodology based metaphors reason parts programming compulsory spanish schools therefore usually private schools opportunity attend programming lessons asked several private schools offered programming colla borate agreed programming teacher sick leave required skilled temporary teacher th th th grades given permission teach mecoprog method weeks teacher needed convalesce addition order provide op portunity attend programming classes ensure het erogeneous sample offered schools madrid city council fuenlabrada authors live costfree program ming camp held consecutive saturdays aged could attend camp mecoprog methodology participants attended private schools rest tended public schools recruited partici pated programming camp fig shows distribution per grade spain th grade corresponds aged th grade corresponds aged th grade corresponds aged th grade th grade th grade followed longitudinal pretestposttest quasi experimental headmaster private fig distribution participants grades provide control could randomly assign similarly could control programming camp randomly assign city councils conditions providing us classroom must receive teaching moreover rooms available pm divide thus th grade attended midday whereas th grade attended midday pm possible recruit th grade city council according cook campbell could measure im pact intervention mecoprog following quasiex perimental outlined rewards offered materials mecoprog main resource mecoprog perezmarin summarises metaphors mecoprog grouped blocks program sequence variable input output instructions conditional instructions loops process block introduce concept metaphors practice see fig global overview mecoprog block first concept programming explained thermomix tx cooking recipe metaphor explained likewhen following steps tx recipe metaphors mecoprog programming block concept program sequence memory variable input output conditional loop metaphor thermomix tx recipe pantry box mouth rectum beginning end digestive system intelligent fridge hand mixer perezmarin computers human behavior xxx xxxx xxxx fig overview mecoprog blocks first concept second left right sample script inputoutput block sample script conditionals block sample script loops block computer able execute instructions program step time ambiguity allowed computer understand instructions precise additionally goal fol lowing recipe produce good food program always specific output first program asked execute say hello scratchs say ask instructions help teach basic input output programming whenever understand metaphor input eating something mouth digestive system processes passes rectum output understand enter computer input execute program produce result output concept sequence explained sentences tx recipeprogram must executed another asked whether think computer memory surprisingly think therefore help understand concept computer memory pantry taphor concept explained comparing gredients need carry tx recipe computer needs executes program moreover pantry metaphor explain concept variables boxes metaphor like food organised kitchen eggs box fruit fruitbowl etc computer organises boxes inside memory variables illustrate concept created program shown fig left block intelligent fridge metaphor ex plain conditionals told fridge sensor detect pieces food contains instance told imagine charge serving dessert family dinner intelligent fridge would know family members thus pieces fruit would need family members would need least pieces fruit fewer pieces contained fridge intelligent fridge connect internet buy fruit illustrate concept created program shown fig center block loops hand mixer metaphor like hand mixer repeats movement loop repeats command condition fulfilled told condition case hand mixer whip eggs times illustrate concept cre ated program shown fig right following see concept dimensions methodology covers sequences loops conditionals operators see left mecoprog covers first practices practices dimension see encouraged revisit programs incrementally improve learnt examples involved testing debugging simple coding reused incorporated complex ones see top right regard perspective dimension metaphor methodology allows questioning giving solutions proposed guided metho dology expressing giving solution com puter see right bottom practices perspectives covered mecoprog highlighted underlined proposed brennan resnick sequences loops parallelism events conditionals operators practices incremental iterative development debugging mix reuse abstract encapsulate perspectives express connect question perezmarin computers human behavior xxx xxxx xxxx computational thinking unplugged approaches types ex ercises brackmann debated whether pcnt exclusively gardless however decided idea romt validated wanted ensure results provided tests could correlated procedure fig shows experimental procedure start ex periment took tests th th grades spanish primary aged attended classes taught programming mecop rog pedagogical method certain chosen programming optional subjects attended part schooling remaining take programming subject compulsory spain grouped programming camp saturdays weeks per week private hsessions camp took tests previously decided tests guarantee posttests difficulty pretests order avoid boredom taking tests waited minimum weeks asking take posttest addition first resolve questions taking pretests avoid giving solutions post measures variables achieved cont romt pcnt tests specifically following con knowledge cont score rom validated romt score pcnt ctt score pcnt analysis comparative nonparametric tests measure hypothesis contrast prepost pcn con rom values performed nonparametric tests gathered analysed saw come normal distribution enough assume normality findings overall results shows means medians representative mean asymmetric distribution standard deviation pretest posttest pcn con rom without making distinctions per grade reveals clear crease posttest results variables showing greater improvement con variable smaller improvement rom variable standard deviation slightly increases variables ex cept pcn reduced posttest fig shows boxplots variables pretest posttest graphically central represented experiment cutting cross blocks occasion ally application named compthink app sessions developed adhoc improvement childrens computational thinking app works aspects focused improving computational thinking see fig loops select element set times element repeat action watch ani mation action repeated selected times algorithms establish order finite set steps carry certain cooking recipe planting tree patterns choose features face variety options create face choose types hair eyes mouths outcome animated gif selections made conditionals drag drop images according op tions given ifelse branches instance weather cold scarfs coat boots else tshirts bathing suit shorts steps select part missing several possibilities picture fig example cream cherry needed complete cupcake instructions find final position map divided squares following set movement instructions automats select correct order follow path place another certain restrictions compthink app compthink app draganddrop visual interface android tablets smartphones shows dimensions brennan resnick presents part app covers including proposed brennan resnick op cit tests tests measure impact interven tion mecoprog teach programming improve computational thinking cont questionnaire measure participants knowl edge programming measures con variable ex plained section cont tests participants knowledge programming sequence memory variables input output structions conditionals loops question formats fol lows think program give example seek measure knowledge areas tests measure computational thinking first called romt measures rom variable explained sec tion romt validated items measures computational thinking aged romangonzalez perezgonzalez jimenezfernandez fig shows sample question romt questions based code blocks cover certain areas given romt cannot evaluate computational thinking younger second validated suitable however far know vali dated measure younger therefore proposed measure created called pcnt measures pcn variable explained section fig shows example pcnt question pcnt exercises grouped categories outlined section compthink app cover di mensions created brennan resnick assess httpstinyurlcommecoprogct spanish httpstinyurlcommecoprogtrg spanish httpstinyurlcommecoprogctl spanish romt validated measure computational thinking romangonzalez cont concept created adhoc experiment pcnt measure based fields literature perezmarin computers human behavior xxx xxxx xxxx fig compthink app example games options available concept dimension covered dimensions compthink app compthink app loops algorithms pattern conditionals steps instructions automats brennan resnick concept dimension loops sequences sequences conditionals sequences operators sequences sequences conditionals box median marked line representative measure highest lowest values boxplot correspond values less qqq greater qqq outliers marked case analysing shapirowilk found distribution variables come normal distribution except postcon variable postrom therefore without enough population nonparametric tests chosen guarantee robustness results spearmans rank correlation coefficient shows significant corre lation pre posttests pcn con rom variables wilcoxon signedrank compare related samples case pre posttests evaluate whether statisticallysignificant difference pre posttests variables studied shows significant improvement tests rom value much higher others therefore con variable significant consequently could conclude population saw significant improvement tests additional information size effect value troduced rosenthal pcn value corre sponding small effect con variable corresponding large effect finally rom variable indicating small effect results per grades first descriptive analysis variable grades presented tables show median mean standard deviation fig example romt question instructions give pac man reach ghost choose con variable shows large increase grades addition increasing dispersion see rom variable th th show increase median well standard deviation box perezmarin computers human behavior xxx xxxx xxxx fig example pcnt question know steps need take plant tree place following actions order take shovel water tree plant tree dig hole fig boxplot variables pcn con rom pre posttest spearmans rank correlation coefficient shows significant correlation pre posttests pcn con grades th th grades rom wilcoxon signed rank compare related samples case pre posttest evaluate whether statistically significant median mean standard deviation pre posttests pcn con rom pcn con rom comparative wilcoxon pcn con pvalue rom fig flow diagram experiment mdn sd pre post mdn sd mdn sd difference pre posttests variables studied grade shows significant differences grades significant improvement pcnt variable th well romt variable although higher pvalue case con variable improvement significant grades rosenthal value quantifies improvement happens th grade large improvement close large observed con variable th grade small increase near plots confirm statement see pcn variable shows large increase th grade followed th grade standard deviation reduced improvement observed th grade see boxplots confirm reasoning show existence several outliers related low marks grades especially th grade perezmarin computers human behavior xxx xxxx xxxx median mean standard deviation pretest posttest pcn per grades rosenthal quantify improvement detected tests pcn th mdn msd th th dpcn th th th dcon drom pre post mdn sd mdn msd possible teach basic computer programming memory programming conditionals loops improve young worth noting although general consensus garding need foster childrens romangonzalez results reported significantly contribute litera ture sens still much controversy surrounding defi nition term integrate cur riculum gouws bradshaw wentworth since required practical definition comprises order anaylse parts could improved chose brennan resnick see reason selecting created authors program allows program noted vico translated spanish child learn program handicap spanish child able understand english wanted foster interest become programmers otherwise seems though taught preschool read write however computer educators argued pro gramming necessary teach computational thinking lu fletcher yadav zhou mayfield hambrusch korb even suggested teaching programming foster could deter find computer pro gramming boring lu fletcher light results experience program engaging helps focus payed attention lessons regardless grade general well known love computers think difficult boring could base start working naturally fasci nated technology particularly national curri culums shows enjoy program ming recently unconceivable think could learn programming contrary taught secondary even university begin find complex ideas difficult understand contrast younger easily absorb adapted become evident need guidance approach task according able learn programming taught methodologies mecoprog metaphors must trained methodologies want reach primary median mean standard deviation pretest posttest con per grades con th mdn msd th th pre post mdn sd mdn msd median mean standard deviation pretest posttest rom per grade rom th th mdn sd mdn sd pre post medium increase pcn variable large increase occurs con variable small increase rom variable finally th grade large effect found synopsys gathers increase tests taken mecoprog finally response question regarding relationship tween pcnt romt low lineal correlation spearman discussion paper explored whether primary improved extent primary able learn programming included factors grade tests measure childrens knowledge computational thinking important conclusion statistic significant crease childrens posttest results knowledge according cont knowledge values grades according pcnt romt tests suggests even short period time comparative wilcoxon pcn con rom th th th th pvalue th th th th perezmarin computers human behavior xxx xxxx xxxx aged younger conclusion could drawn results pcnt analysed significant results could drawn either indicating need quantify increase development aged younger learn programming cannot end without highlighting fact th grade improved performance tests learn programming mecoprog ctmeasuring tests increased significantly finally th th grade knowledge programming improved significant im provement found romt pcnt indicate ei ther need time improve mecoprog metaphors methodology applicable aged acknowledgments funded projects tin cr sice references aho computation computational thinking computer journal balanskat engelhardt computing future computer programming coding priorities curricula initiatives europe brussels belgium european schoolnet barker mcdowell kalahar exploring factors influence com puter introductory course persist major sigcse bulletin vol bers tangiblek program applied computational thinking young early childhood practice bers ponte juelich viera schenker designers integrating early childhood information technology childhood annual bers rogers beals portsmore staszowski cejka innovative early childhood proceedings iste computational thinking leadership toolkit boero bazzini garuti metaphors teaching mathe matics case concerning inequalities pme conference vol brackmann barone casali boucinha munozhernandez computational thinking panorama americas computers siie international symposium iee brennan balch chung creative computing cambridge masachussets harvard graduate educationhttpscratchedgseharvardeduguidefiles creativecomputingpdf consulta brennan resnick frameworks studying assessing de velopment computational thinking proceedings annual meeting american association vancouver canada campe denner programming games synthesis paper presented annual meeting american association chicago il cook campbell causal assumptions quasiexperimental practice synthese compthink app httpwwwliteetsiiurjcestoolscompthinkapp coull duncan emergent requirements supporting introductory programming innovation teaching information computer sciences csta iste operational definition computational thinking retrieved httpcstaacmorgcurriculumsubcurrfilescompthinkingflyer pdf cuny snyder wing demystifying computational thinking non computer scientists unpublished manuscript progress line available refer enced httpwwwcscmueducompthinkresourcesthelinkwingpdf denning profession beyond computational thinking communications espino soledad gonzalez estudio sobre diferencias de genero en las competencias las estrategias educativas para el desarrollo del pensamiento com putacional revista de educacion distancia furber shut restart forward computing uk schools line available retrieved httproyalsocietyorgeducationpolicy computinginschoolsreport garciapenalvo brief introduction taccle coding european project computers siie international symposium ieee ginat novice loop boundaries range conceptions computer google exploring computational thinking retrieved wwwgooglecomeduresourcesprogramsexploringcomputationalthinking gouws bradshaw wentworth computational thinking therefore line digital competence include pedagogical intef measuring progress necessary tests could differ depending definition instance created korkmaz cakir ozden limited subskills comprising iste definition addition limited associate older validated found measure according useful young authors kindly allowed us romangonzalez however romt validated older younger tried pcnt explained line published results gathered romt pnct proved improved mecoprog however given low correlation found pcnt romt carried focusing assess young particularly aged limitations future aware measures would change dif ferent definition results change dif ferent andor computer program furthermore mecoprog resources thus produce results case core metaphors paper based cooking metaphors car metaphors door inputoutput car junctions conditionals roundabouts loops class able select adequate metaphor mecoprog published perezmarin experiment described great detail researchers interested repeating sample advanced programming easily experiment focused basic introductory computer programming first contact particular project limited amount time authors currently carrying multifactorial determine whether factors sex motivation effort might impact would like continue validation pcnt given low correlation found pcnt romt conclusions findings longitudinal pre posttest quasiexperiment carried primary aged posi tively confirmed formulated question computational thinking improved methodology based metaphors teach computer programming gathers main results knowledge programming concept tests romt pcnt found better posttest analysed grades results suggest metaphors useful teaching computer programming primary improving providing positive answer question contributes area exploring computational thinking covering gaps methodologies uses first time metaphors teach basic programming primary together analysis carried per grade shows th grade understand programming fact seems show actually able learn pro gramming increase cont knowledge improves could apply romt perezmarin computers human behavior xxx xxxx xxxx evaluation game lightbot proceedings th conference innovation technology computer grover pea computational thinking review state field researcher heintz mannila farnqvist review models introducing computational thinking computer computing frontiers conference fie ieee intef marco comun de competencia digital docente httpsintefesblogmarco comundecompetenciadigitaldocenteseptiembre iste leadership toolkit available httpswwwisteorgdocsctdocuments ctleadershipttoolkitpdffsfvrsnbc jimenezperis parejaflores patinomartinez velazqueziturbide ja locker metaphor teach dynamic memory sigcse bulletin vol jovanov stankov mihova ristov gusev computing compulsory subject macedonian primary schools curriculum global engineering conference educon ieee ieee kalelioglu teaching programming code computers human behavior kazakoff sullivan bers effect classroombased tensive programming workshop sequencing ability early child hood early childhood korkmaz cakir ozden validity reliability computational thinking scales cts computers human behavior lahtinen alamutka jarvinen difficulties novice programmers sigcse bulletin vol lakoff johnson metaphors live university chicago press lee kafai vasudevan davis playing arcade designing tangible interfaces makey makey games playful user interfaces springer singapore lee martin denner coulter allan erickson werner computational thinking youth practice inroads lu fletcher thinking computational thinking sigcse bulletings margulieux catrambone guzdial employing subgoals com puter programming computer httpsdoi special issue ii computer schools mccartney ed transactions computing special issue computing schools transactions computing mccartney tenenberg eds milner broken metaphor java sigcse bulletings ouahbi kaddari darhmaoui elachqar lahmine basic programming creating games programming environment procediasocial behavioral sciences papadakis kalogiannakis zaranis developing fundamental pro gramming computational thinking scratchjr preschool educa tion case international journal mobile organisation papert mindstorms computers powerful ideas york ny basic books paris glynn elaborate analogies text tools en hancing preservice knowledge attitudes contemporary psychology pea kurland cognitive effects computer pro gramming ideas psychology perezmarin hijonneira martinlope methodology proposal based metaphors teach programming ieee revista iberoamericana de tecnologias del aprendizaje putnam sleeman baxter kuspa summary mis conceptions basic programmers journal computing resnick paradigms computing paradigms thinking inkafai resnick eds constructionism practice designing thinking digital world mahwah nj erlbaum resnick maloney monroyhernandez rusk eastmond brennan programming communications rodriguez dieguez las metaforas en la ensenanza ensenanza teaching revista interuniversitaria de didactica universidad de salamanca romangonzalez computational thinking guidelines content validation proceedings edulearn conference romangonzalez perezgonzalez jimenezfernandez cognitive abilities underlie computational thinking criterion validity com putational thinking computers human behavior httpsdoiorg jchb nd rosenthal metaanalytic procedures social ed newbury park ca sage sanford tietz farooq guyer shapiro metaphors teach proceedings th technical symposium computer seoanepardo computational thinking philosophy stem programming decision making applied behaviour moral machines ethical values classroomieeeritahttpsdoiorgrita seppala malmi korhonen observations mis conceptionsa case buildheap algorithm computer sovic jagust sersic teach basic universitylevel program ming first graders integrated stem conference isec ieee ieee strawhacker portelance lee bers designing tools developing minds role child development technology idc workshop available online httpeverychildacoderorgukwpcontentuploads strawhackeretalfinalpdf last visit november rd thomas mcrobbie metaphor improve metacognition chemistry classroom journal teaching vico el nino que programe tendra un handicap como hoy lo tiene el que entiende ingles entrevistas educacion httpswwweducaciontrespuntocerocom entrevistasfranciscojvicoprogramacionhtml wing computational thinking communications wing computational thinking communications wing computational thinking thinking computing philosophical transactions royal society mathematical physical engineering sciences wing notebook computational thinking line available link magazine springpittsburgh carnegie mellon university retrieved httplinkcscmueduarticlephpa wing computational thinking years later httpwwwmicrosoftcomen usresearchblogcomputationalthinkingyearslater yadav gretter hambrusch sands expanding computer schools understanding teacher experiences challenges computer yadav zhou mayfield hambrusch korb introducing computational thinking courses proceedings special interest computer dallas tx 
original version ubiquity reprinted permission doicomjnlbxs computation computational thinking alfred aho department computer columbia university york ny corresponding author ahocscolumbiaedu recommend term computation conjunction welldefined computation whose semantics clear matches investigated computer already useful clearly defined models computation whose behaviors capabilities well understood models part definition term computation however domains investigation appropriate models necessary invent formalisms represent systems need clear definitions scientific discipline reasons terms precise definitions understanding terminology discipline essential subject precise terminology enables us communicate ideas clearly people computer even acute need construct software hardware components must smoothly interoperate interfaces clients components distributed systems definitions interfaces need precisely specified interoperability good systems performance term computation without qualification often generates lot confusion part nature systems exhibiting computational behavior varied term computation means things people depending kinds computational systems studying kinds investigating since computation refers process defined terms underlying computation would achieve clearer communication made clear underlying rather talking vague notion computation suggestion term conjunction well defined computation whose semantics clear matches investigated computer already useful clearly defined models computation whose behaviors capabilities well understood models part definition term computation however domains investigation appropriate models necessary invent formalisms represent systems computational thinking consider computational thinking thought processes involved formulating solutions represented computational steps algorithms important part process finding appropriate models computation formulate derive solutions familiar example would finite automata solve string pattern matching less familiar example might quantum circuits order finding formulation peter shor devise integer factoring algorithm runs polynomial time quantum computer associated basic models computation computer wealth wellknown algorithm problemsolving techniques solve common arising computing however computer systems wish build become complex apply computer abstractions domains discover always appropriate models devise solutions cases computational thinking becomes includes inventing appropriate models computation corrado priami colleagues centre computational systems biology trento italy process calculi computation create programming languages simulate biological processes priami states basic feature computational thinking computer journal vol downloaded httpsacademicoupcomcomjnlarticleabstract user january abstraction reality neglected details make executable machine shall see finding devising appropriate models computation formulate central often nontrivial part computational thinking forces play last half century think computational system expanded dramatically earliest days computing computer isolated machine limited memory programs submitted time compiled run today internet era networks consisting millions interconnected computers move cloud computing foresee global computing environment billions clients universal ondemand access computing services hosted gigantic centers located around planet anything pc phone tv sensor client center consist hundreds thousands servers needless say models studying universally accessible complex highly concurrent distributed system ones single isolated computer another force play heat dissipation considerations architecture computers changing ordinary pc today computing elements multicore chips graphics processing units exascale supercomputer end decade expected giant parallel machine million nodes possibly thousand processors understanding write efficient programs machines limited good models parallel computation parallel algorithm techniques vital open area effective parallel computing addition increasing interest applying computation studying virtually areas human endeavor fascinating example simulating highly parallel biological processes found human cells organs purposes understanding disease drug good computational models biological processes still infancy clear ever able find computational human brain would account emergent phenomena consciousness intelligence theory computation theory computation still core areas computer explores fundamental capabilities limitations models computation computation mathematical abstraction computing system important sequential computation studied computer turing machine first proposed alan turing let us briefly review definition turing machine appreciate detail necessary understand even familiar computation think turing machine finitestate control attached tape head read write symbols squares semiinfinite tape initially finite string length representing input leftmost squares tape infinite sequence blanks follows input string tape head reading symbol leftmost square finite control predefined initial state turing machine makes sequence moves move reads symbol tape tape head consults transition finitestate control specifies symbol overprinted square tape head direction tape head move square left right state enter next turing machine enters accepting halting state next move string nonblank symbols remaining input tape point time output mathematically turing machine consists components finite set states finite input alphabet containing blank finite tape alphabet includes input alphabet blank transition function maps state tape symbol state tape symbol direction left right start state accept state moves reject state moves characterize configuration turing machine given moment time quantities state finitestate control ii string nonblank symbols tape iii location input head tape computation turing machine input sequence configurations machine go starting initial configuration tape terminating computation terminates halting configuration say function strings strings computable turing machine given input string always halts accepting state tape say computes turing machine provides precise definition term algorithm algorithm function turing machine computes models computation equivalent turing machines sense models compute exactly set functions turing machines compute among turingcomplete models computation multitape turing machines lambdacalculus random access machines production systems cellular automata generalpurpose programming languages reason models computation equivalent turing machines rarely want implement algorithm turing machine program computation computational thinking computer journal vol downloaded httpsacademicoupcomcomjnlarticleabstract user january av aho would like computational notation programming language easy write easy understand matter notation choose famous churchturing thesis hypothesizes function computed computed turing machine note algorithm compute function infinite much computer devoted finding efficient algorithms compute given function clarity point defined computation sequence configurations turing machine go given input sequence could infinite machine halt possible sequences case machine nondeterministic reason went explanation point much detail involved precisely defining term computation turing machine simplest models computation surprising move complex models amount effort needed precisely formulate computation terms models grows substantially concurrent models realworld computational systems compute single functionthe world moved interactive computing term reactive system describe system maintains ongoing interaction environment examples reactive systems include operating systems embedded systems distributed system consists autonomous computing systems communicate another kind network message passing examples distributed systems include telecommunications systems internet airtraffic control systems parallel computers distributed systems reactive systems perhaps intriguing examples reactive distributed computing systems biological systems cells organisms could even consider human brain biological computing system formulation appropriate models computation understanding biological processes formidable scientific challenge intersection biology computer distributed systems exhibit behaviors deadlock livelock race conditions like cannot usefully studied sequential computation moreover determining throughput latency performance distributed system cannot productively formulated singlethread computation reasons computer scientists developed models concurrent computation phenomena architect tools components building distributed systems theoretical models concurrent compu tation messagepassing actor consisting computational entities called actors actor send receive messages make local decisions create actors fix behavior next message receives actions executed parallel fixed order actor devised behavioral properties parallel computing machines consisting large numbers independent processors communicating passing messages network wellstudied models concurrent computation include petri nets process calculi picalculus mucalculus variants computational models distributed systems devised understand behaviors biological systems example dematte describe language called blenx based process calculus called betabinders modeling simulating biological systems space describe concurrent models detail however still open area find practically useful concurrent models computation combine control areas distributed computing benefits models computation addition aiding understanding practical benefits appropriate models computation systems trying build cloud computing example still host poorly understood concerns systems scale need better understand architectural tradeoffs needed achieve desired levels reliability performance scalability adaptivity services systems expected provide appropriate abstractions describe properties automatically mapped computation implementation around cloud computing host challenges system developers tool builders examples need programming languages compilers verification tools defect detection tools service management tools scale huge clients servers involved networks centers future cloud computing important area benefit innovative computational thinking conclusion mathematical abstractions called models computation heart computation computational thinking computation process defined terms underlying computation computational thinking thought processes involved formulating computer journal vol downloaded httpsacademicoupcomcomjnlarticleabstract user january solutions represented computational steps algorithms useful models computation arising sequential computation range simple finite state machines turingcomplete models random access machines useful models concurrent computation arising analysis complex distributed systems still subject current author alfred aho lawrence gussman professor computer department columbia university served chair department spring acknowledgements author would like thank peter denning jeannette wing thoughtful comments importance computational thinking author grateful jim larus insights confronting cloud computing corrado priami stimulating conversations computational thinking biology references shorpwalgorithmsforquantumcomputationdiscrete logarithms factoring proceedings th annual symposium foundations computer ieee computer society priami computational thinking biology transac tions computational systems biology viii turing computable numbers application entscheidungsproblem proceedings london mathematical society goldin smolka wegner eds interactive computation paradigm springer hewittcbishoppandsteigerrauniversalmodular actor formalism artificial intelligence proceedings rd international joint conference artificial intelligence stanford usa morgan kaufmann publishers inc dematte priami romanel blenx language tutorial proceedings sfm bertinoro italy springerverlag denning beyond computational thinking commun wing computational thinking commun computation computational thinking computer journal vol downloaded httpsacademicoupcomcomjnlarticleabstract user january 
computational thinking susan german computational thinking approaching situations variety computerbased methods including simulation mining networking automated collection gaming algorithmic reasoning programming computational thinking mathematical thinking according sneider mathematical thinking attempt approach situation acquired math including counting arithmetic algebra geometry calculus set theory topology computational thinking part next generation standards engineering practices see figure computational thinking conjunction practices implementing computational thinking computer simulations provide opportunity phenomena changing input conditions measuring outcome firmly believe best interact physical phenomena computer simulation time efficient allows try scenarios safe manner computer simulations best situations physical phenomena difficult directly solar system molecular motion however electric circuits directly observable simulation bring unobservable parts phenomenon observable developed assessment electric circuits completed unit electricity learned series parallel circuits assessment phet circuit construction kit dcvirtual lab see resources allowed virtually construct types circuits adjust figure ngss sep mathematical computational thinking ngss lead states appendix mathematical computational thinking builds experiences progresses identifying patterns large sets mathematical support explanations arguments digital tools eg computers analyze extensive sets patterns trends mathematical representations describe support scientific conclusions solutions create algorithms series ordered steps solve apply mathematical processes eg ratio rate percent basic operations simple algebra scientific engineering questions digital tools mathematical arguments compare proposed solutions engineering teacher teacher resistors add switches studied measured current amps voltage volts following circuits simple figure series figure parallel figure complex figure building circuits measuring current voltage asked charges moving slower series circuit parallel circuit determine chargers moving slower chose ammeter measure current circuit ammeter measured lower amperage wires charges moved slower able observe current build mental electric current alternatively could physical circuit set series circuit parallel circuit light bulbs would able observe differences brightness bulbs make measurements voltage current circuit however actual movement charge would based inference computer simulation scientific allows unseen parts circuit made visual assess understanding series parallel complex circuits asked build models circuit flashlight bulbs specific criteria figure simulation access large voltage battery well regular battery battery beyond norm flashlight batteries allowing battery forced think deeper constructing circuit order solve created battery large flashlight needed add resistors order circuit properly set lot simulation circuit fires worked solutions conclusion computational thinking computer simulation make observations lesson required digital tools mathematical arguments compare proposed solutions engineering ngss lead states appendix simulation explore questions integrated highvoltage battery energy source circuit created circuit meets requirements assessment furthermore engineering nature simulation ideas well met defined criteriaa process made quicker simulation rather physical materials important step lesson understand simulation programmed algorithms based physical circuit works abstractions allow visualize figure simple circuit figure series circuit figure parallel circuit figure complex circuit july teacher teacher figure flashlight want create flashlight bulbs essential control lights turned light lights lights batteries switches much wire necessary flashlight maximize brightness bulbs circuit simulation working come circuit screenshots final written explanation final claima statement describing final evidencedata investigation supports reasoningconnect evidence claim describing involved final voltage current normally unseen portions phenomenon references ngss lead states next generation standards states states washington dc national academies press sneider stephenson schafer flick toolkit exploring framework ngss computational thinking classroom scope yadav hong stephenson techtrends resource circuit simulationhttpsphet coloradoeduensimulationcircuitconstructionkitdcvirtuallab susan german sgermanhallsvilleorg teacher hallsville riv district hallsville missouri grade simulations assessments videos sky sleuth helps fi gure patterns predict positions sun moon stars thinking beyond english language arts connections mathematics connections differentiated guides implement threedimensional classrooms stem kids phenomenonbased threedimensional content thats designed incorporates engineering practices seps crosscutting cccs disciplinary core ideas dcis comprehensive guides available guide provides connections gradelevel content including ela mathematics plus tips practical information enhance ebook experience guides implement threedimensional classroom lexile visit wwwnstaorgebooksgradesk learn order purchases ebooks single title include detailed guide specifi ebook reproduced permission copyright owner reproduction prohibited without permission 
computational thinking tinkering exploration early childhood curriculum marina umaschi bers louise flannery elizabeth kazakoff amanda sullivan tufts university medford usa article info article history received january received revised form october accepted october keywords elementary interactive environments pedagogical issues teachinglearning strategies programming early childhood abstract engaging constructionbased young play learn range tangiblek program paired developmentally appropriate computer programming tools constructionist curriculum designed engage kindergarten computational thinking programming problemsolving paper documents kindergarten classrooms exposure computer programming explores outcomes results point strengths curriculum areas redesign curriculum technologies would appropriate overall demonstrates kindergartners interested able learn aspects programming computational thinking tangiblek curriculum elsevier ltd rights reserved introduction decades early childhood preschool grade curricula focused primarily literacy math especially reforms child left behind zigler bishopjosef however recent attention technology engineering math stem young gelman brenneman sesame workshop white house furthermore technology standards best practices integrating technology early childhood developed barron international society technology iste naeyc fred rogers center early childrens media us department note technology policy statement naeyc fred rogers center early childrens media provides guide early childhood professionals interactive digital technologies balanced developmentally appropriate ways addresses important issues related digital technology ages threeeight years including needs technology serve needs educators able understand evaluate integrate developmentally appropriate technologies classrooms however little computer programming specifically early childhood subject paper explores devices smartphones tablet computers electronic toys find audiences increasingly young challenging question arise define developmentally appropriate content ages majority programming focuses later schooling teaching subjects foundational early childhood years engaging rewarding experience young learners bers previous shown young foursix years old build program simple projects bers ponte juelich viera schenker cejka rogers portsmore kazakoff sullivan bers perlman wyeth well learn powerful ideas engineering technology computer programming building computational thinking bers robotic manipulatives allow finemotor handeye coordination engaging collaboration teamwork additionally provide fun playful integrate academic content creation corresponding author devtech eliot pearson department child development college ave medford usa tel email address elizabethkazakofftuftsedu kazakoff contents lists available sciencedirect computers journal homepage wwwelseviercomlocatecompedu see front matter elsevier ltd rights reserved httpdxdoiorgjcompedu computers meaningful projects young experiment engineering well storytelling creating narrative contexts projects bers engaging types projects young play learn play creative context resnick computers offer ways representing interacting information entirely category objects think papert form programmable interactive robots computers become powerful tools offers opportunity engage content domain computer practice problemsolving finemotor eyehand coordination tangiblek program designbased initiative fifth year paired developmentally appropriate programming tools curriculum engage kindergartners computational thinking programming well problemsolving reasoning goal paper present young childrens outcomes computer programming taught tangiblek curriculum order highlight potential integrating computer programming early childhood classroom theoretical framework constructionism positive technological development theoretical approach designing intervention curriculum integrating tangiblek program early childhood classrooms incorporates elements paperts constructionist framework states learn deeply build meaningful projects community learners reflect carefully process paperts constructionism rooted piagets constructivism conveys idea child actively builds knowledge experience related learnbydoing approach piagets theory developed explain knowledge constructed individuals mind papert expands focus ways internal constructions supported constructions world including computers constructionist teaching approach provides freedom explore interests technologies bers investigating domainspecific content exercising metacognitive problemsolving reasoning eg clements gullo clements meredith papert discussed welldesigned constructionist embedded powerful ideas central within domain epistemological personally useful interconnected disciplines roots intuitive knowledge child internalized long period time bers papert idea considered powerful degree useful building extending knowledge papert curriculum described paper composed powerful ideas domains computer engineering eg engineering process debugging robotic motion sensing programming instructions control flow sequence control flow specific instructions classroom designed impact outcomes cognitive growth impact influenced childrens social emotional moral development framework guide implementation curriculum focuses dimensions child bers positive technological development ptd utilized ptd takes consideration environment pedagogical practices well cultural values rituals mediate teaching bers rogoff goodman turkanis bartlett experience proposed presented curriculum structured ptd framework encourage behaviors turn foster development beneficial core cognitive social traits specifically engaging content generation creative problemsolving collaboration communication choices conduct communitybuilding lead sense competence confidence ability connect care others contribution entities outside self moral character bers instance iteratively planning revising project supportive environment gain confidence abilities learn solve alternatively discussions share limited resources fairly amongst class opportunities positive moral development computer programming embedded exploration computer programming tangiblek curriculum fosters computational thinking term defined ways encompasses broad somewhat debated range analytic problemsolving dispositions habits approaches computer barr stephenson international society technology computer association lee tangiblek curriculum specifically fosters computational thinking representation systematicity generating implementing solutions exploring multiple possible solutions problemsolving multiple levels approaching overall challenge debugging troubleshooting specific difficulties given solutions implementation productive attitudes toward failure misconceptions uncovered along route successful project strategies approaching openended often difficult general applicability beyond computational thinking tangiblek program tangiblek program whose informed theoretical frameworks constructionism ptd iteratively implemented assessed set programming tools curricula pedagogical approaches close collaboration hundreds dozens course years goals tangiblek program provide evidencebased description young childrens trajectories computational thinking capacity understanding computer programming given developmentally appropriate materials early childhood curriculum teach developmentally appropriate computer programming kindergarten second grade investigate features programming interface mediating role interface plays program mu bers computers paper addresses first goals describe young childrens trajectories computational thinking capacity understand computer programming understanding allow revision tangiblek curriculum tangiblek project makes commercially available construction kits cherp creative hybrid environment programming language give behaviors robotic constructions bers bers horn horn kazakoff bers kazakoff sullivan bers cherp hybrid tangible graphical computer language designed provide young engaging introduction computer programming developmentally appropriate software allows create programs control robots tangible wooden blocks andor graphical onscreen icons cherp avoids technical syntaxrelated challenges textbased programming languages furthermore hybrid interface allows choose interface best suits changing preferences physical abilities perceived social appeal challenge hand evolve horn tangible graphical interfaces represent tangiblek curriculum introduces increasingly complex powerful ideas computer context structured developmentally appropriate powerful ideas computer addressed curriculum include engineering process debugging troubleshooting robotic motion sensing aspects programming choosing correct programming instructions controlling flow actions sequencing action instructions accordingly controlling flow actions special control flow instructions section contains detailed definitions powerful idea addition concrete programming introduced observation reflection decomposition complex processes interwoven throughout curriculum curriculum takes approximately classroom includes structured min culminating interdisciplinary project focus building programming robotic vehicle accomplish particular goal lesson addresses powerful ideas within context narrative theme lesson embedded content follows lesson engineering process build sturdy nonrobotic vehicles transport toy people floor map apply stages engineering process plan improve vehicles lesson share learn ideas robots explore robotic parts designing building robots learn appropriately connect robotic parts eg snaptogether wires motors make moves lesson choosing sequencing programming instructions program robots dance hokeypokey choosing instructions putting correct order sequence lesson looping programs control flow instructions repeat instructions program robots move forward forever next program move forward particular times reach fixed location lesson sensors light sensors program robots turn light dark vice versa draw comparisons robotic sensors human senses lesson branching programs control flow instructions introduced pair conditional control flow instructions sensor make programs incorporate environmental conditions robots behavior addition structured described tangiblek curriculum includes songs games freeplay programming materials order foster playful environment example lesson sing dance hokeypokey play simon says cherp programming commands recall apply programming instructions throughout curriculum ample opportunity freely build materials create cherp programs beyond set forth structured lessons completing lessons described classroom embarks culminating interdisciplinary project invite apply familiar powerful ideas particular theme context teacher decides theme drawn subjects studied year child chooses challenge within theme past classrooms selected topics animal behaviors vehicles help community created projects representing snakes slither recycling trucks collect refuse sewing needles travel back forth fabric among others projects allow demonstrate powerful ideas learned well apply continue context introduced overview tangiblek program including technological curricular theoretical components present kindergarten classrooms tangiblek program implemented following sections report distribution achievement attained selected computer programming tied mu bers computers powerful ideas listed achievement form basis discuss curriculum structure content consider implications understanding childrens early trajectories computational adaptation curriculum within designbased tradition iterative testing analysis refinement intervention see eg cobb confrey disessa lehrer schauble tangiblek program spent years exploring accomplishing domains programming described paper examines successfully learned core powerful ideas programming tangiblek curriculum took place fourth year overall project following piloting refinement software curriculum range settings classrooms afterschoolsummer programs lab extensive testing exploration refinement preceding iterations laid foundation understanding young learn think core programming instance several curricular simplified enable better focus target movement games songs added curriculum engage multiple modes understanding provide reinforcement basic knowledge addition programming icons revised familiar imagery participants involved volunteered participate following email notification opportunity principals limited schools greater boston area classroom participated curriculum family option allow decline collection according community needs consent materials available english portuguese spanish attended greater boston area kindergarten classrooms public urban private suburban total enrolled classes included analysis included analysis unless missed collectible attrition due typical classroom absences well difficulty collecting limited researchers bustling classroom environment classroom kindergarten independent religiousbased private suburb boston included analysis population white asian black hispanic httpnces edgovgloballocator kindergarten class male female ranged ages years start median years kindergarten classroom class taught male teacher years teaching experience scale none expert rated computer experience programming experience experience classrooms located urban nclb located outside boston makeup year white hispanic african american asian american multirace comprised englishlanguage learners classified low income massachusetts department female teacher years teaching experience taught classroom rated computer experience experience programming experience classroom enrolled included analysis male female start curriculum classroom ranged years old median years female teacher years teaching experience taught classroom rated computer experience experience programming experience analysis includes enrolled classroom participants female male childrens ages start curriculum classroom ranged years median years old overall range included analysis years average start curriculum years old classrooms whole female male participants thought generally representative general kindergartners population sample includes public private male female fairly even proportion male female described diverse range ethnic socioeconomic backgrounds particularly participating public procedure classrooms head teacher assistants nearly collaborators total received prepare teaching assisting curriculum participating collection assistants needed reasons first low studenttoadult ratio lesson ensured adequate observation documentation secondly assistants limited availability full set sessions therefore attention given collaborators ensure received careful detailed introductory covered technical curricular pedagogical aspects program including cherp programming language lego kits well content structure teaching approach framed ptd presented earlier included explanation examples score childrens according scale understanding levels described implemented tangiblek curriculum classrooms technical support trained assistants curriculum whole class working together third teacher worked half class time finishing entire curriculum starting curricular took min sessions teacher introduced key days wholegroup setting along short song game reinforce mu bers computers mentioned earlier lesson class sang danced hokeypokey programming robots dance additionally game simon says often lessons reinforce cherp programming instructions corresponding robotic actions wholegroup built andor programmed robotic vehicles worked independently projects sat received support needed assistant classroom teacher interacting peers variety coders evaluating childrens systematically accounted potential intercoder differences varying adult worked lesson sessions ended discussion share progress questions successful strategies teacher help reinforce core programming engineering process assess outcomes assistants evaluated andor program made child assessed childs understanding selected core seen successful application program needed talked gain information understandings examining instance childs program correct selection sequencing action instructions proper repeat instruction assistants scored childs achievement core goals lesson following point likert scale designed document thoroughness childs understanding application activityspecific well general problemsolving score higher defined target achievement complete achievement goal task understanding mostly complete achievement goal task understanding partially complete achievement goal task understanding incomplete achievement goal task understanding complete goal task understanding attemptother lesson scored multiple likert scale example lesson programmed robots dance hokeypokey choosing correct instructions referred correspondence putting instructions correct order sequencing sequencing correspondence described detail sections illustration general scale received point correspondence scale programming instruction correctly matched line song examples childrens programs scored correspondence lesson begin forward backward forward shake spin end correct begin forward forward forward shake spin end second forward backward begin forward backward shake end missing forward spin begin shake spin end missing forward backward forward begin shake end missing forward backward forward spin despite assistance prompting child attempt hokeypokey task programs received score sequencing lesson variables examined examine childrens growing computational thinking ability throughout implementation tangiblek curriculum key variables observed assessed debugging correspondence sequencing control flow debugging faced difficult task adults often unable determine suitable solution first attempt situations debugging helpful debugging troubleshooting form problemsolving fields engineering computer encompasses steps debug child must first recognize something working meeting stated goal example child programming dance hokeypokey lesson watches program running realizes shake step debugging process either decide keep original goal switch appropriate alternative child might continue pursue original plan making dance parts hokeypokey common might come alternative dance third stage debugging generating hypothesis cause child example hypothesize program missing instruction would make shake finally last aspect debugging attempting solve child might put shake block positions program program fully matches song debugging limited arena engineering computer previous found acquire transfer debugging outside programming context appropriate support including explicit instruction klahr carver salomon perkins steps debugging process critical component engineering process refers cyclical iterative process engineers artifact order meet need massachusetts department defined curriculum frameworks steps include identifying looking ideas solutions choosing developing prototype testing improving sharing solutions others see fig steps testing improving require debugging particularly important establishing environment failure rather immediate success expected seen necessary engineering process expected get right first time mu bers computers tangiblek curriculum debugging engineering process first introduced lesson applied throughout rest curriculum assessed ability apply core aspects debugging described lesson final project correspondences actions instructions program sequence instructions computer case acts order specified programmer stair reynolds instruction specific meaning order instructions leads robots overall actions making correspondences actions instructions encompasses understanding programming instruction represents specific action carried another understand process correspondence frame notion symbols core concept kindergarten math literacy programming instruction symbol action carry order program robots behavior must understand general people symbolic language communicate computers must select specific instructions accurately represent intended outcome robots behavior correspondence first introduced lesson curriculum choose sequence programming instructions make dance hokeypokey accomplishing task requires identify corresponding programming instruction line hokeypokey versedance example child understands correspondence actions instructions would find programming instruction block shake symbol recreate line shakes measure correspondence assessed correct instructions chose sequencing instructions sequencing component planning involves putting objects actions correct order zelazo carter reznick frye create successful program must procedural thinking plan programs terms sequence happens next another action pea kurland literacy mathematics sequencing essential putting phonemes letters words elements formula appropriate order neuman dickinson prior tangiblek project showed participated program earned significantly higher story sequencing kazakoff bers kazakoff sullivan bers curriculum first introduced idea sequencing instructions lesson hokeypokey challenge described sequencing core component lessons properly arrange action instructions increasingly complex control flow instructions correct order achieve particular outcomes robots behavior control flow instructions control flow refers concept programmers control order follows instructions program various programmatic methods curriculum introduced control flow instructions parameters control flow instructions allow carry instructions nonsequentially eg loop certain conditions example cherp program include repeat control flow instruction following begin forward repeat shake endrepeat sing end make shake times sing attachment light touch sensor sensor parameters qualify control flow instructions based environmental stimuli instance child program carry action set actions environment dark light another set actions lightdark currently curriculum frameworks explicitly addressing control flow connect mathematics reinforcing sense estimation natural comparing human animal sensory functions sensors able compare contrast repeating looping programs patterns cyclical events natural world calendar time assessed correct control flow structures lessons final project results section presents compares childrens achievement programming debugging taught tangiblek curriculum since focus computational thinking robotic context assessments presented evaluate programming instead knowledge childrens introductory lesson assessed programming total reassessed final project additionally debugging assessed lessons final project measure uses likert scale shown ranges attempt task complete goal task understanding completely achieved goal task understanding analysis conducted aggregating classrooms pairedsample ttests compare concept lesson next findings grouped powerful idea relate note teacher classroom chose formally teach activitys items come classrooms discussion choice provided later paper debugging average various debugging measures fell range partial mostly complete understanding application see little variation debugging consecutive see fig exception average score keeping original goal higher marked words childrens ability keep working original goal choose acceptable alternative higher require sensors sensor parameters components debugging remained steady midtoupper range achievement scale lessons mu bers computers repeated measures anova analyses see run debugging variables analyses run case debugging assessed addition separate repeated measures anova run debugging variable since classroom participate lesson project lesson unstructured average debugging score vary significantly lessons considered however removing challenge lesson class participate repeated measures anova debugging variable show change time meaning perhaps variation debugging score structure lessons variation averaged worked projects powerful ideas programming culminating project completed specific programming challenges assessed ability select instructions put order would result goal behavior special control flow instructions tell loop set actions repeatedly follow branch instructions another based sensor choosing correct programming instructions overall mean score abilities choose correct instructions started dropped average returned starting levels project see detailed means mean fell statistically significantly lower levels percent reaching target achievement dropped seventysix percent achieved target range choosing programming instructions action instructions introduced first control flow instructions achieved target added sensors sensor parameters second challenging type control flow instruction however reached target achievement projects similar rate lesson first require choosing programming instructions see fig control flow sequencing sequencing ability introduced along making correspondences intended robotic actions programming instructions made robots dance hokeypokey threequarters achieved target range first programming sequencing core component properly arrange debugging debugging step debugging step debugging step debugging step mean sd mean sd mean sd mean sd project note classroom denotes significant differences mean paired items debugging step debugging step last completed classes project debugging step project fig mean achievement debugging average debugging project debugging components appear follow similar trend keeping original goal attempting solve statistically significant changes mu bers computers actions increasingly complex control flow instructions correct order respectively achieved target fewer able reach target achievement sequencing comparison mean sequencing next revealed statistically significant drop differentiating programs actions requiring twopart control instructions well see seen correspondence average sequencing score childrens projects statistically significantly higher average score see fig control flow special instructions introduced control flow instruction creating looping branching programs average achieved partially complete understanding see detailed means less reached target mostly complete understanding measures degree understanding reached looping numeric parameters sensor parameters first half conditional statement second half conditional statement differences average found looping conditional instructions comparing types parameters see fig statistically significant difference parts conditional statement versus average comfortable making programming equivalent statement dark turn light less comfortable appending turn light first statement comparison projects differences childrens achievement introductory culminating projects examined ways first childrens last completed classes compared childrens final project continued comparison consecutive secondly first introduced particular concept compared corresponding final project example sequencing first concept compared sequencing final project comparison done address childrens might change time exposure note due selfselected nature final projects employed every concept complete relatively lower comparisons statistically significant increases final introductory completed classrooms culminating projects seen overarching programming choosing correct instructions see sequencing instructions accomplish goal see well elements debugging see sticking original goal choosing acceptable alternative taking steps attempt solve fact dropped course returned starting levels final projects described sections repeated measures anovas debugging steps repeated measures anova conducted see significant difference means debugging time possible without lesson project df df debugging step sphericity assumed debugging step greenhousegeisser correction debugging step greenhousegeisser correction sphericity assumed debugging step greenhousegeisser correction sphericity assumed notes classroom project openended could choose less difficult blocks denotes significance selecting programming instructions selecting instructions comparison subsequent mean sd df project note classroom denotes significance denotes significance comparison made alternative toproject comparison last completed classrooms prior project mu bers computers anticipated childrens might increase exposure comparisons made childrens score concept introduced score concept final project however statistically significant differences seen comparisons see summary class reached target achievement programming tasks course curriculums culminating project first introduced engineering process programming childrens levels achievement particularly average reaching target achievement introduced sophisticated programming instructions fewer average attained understanding achieved properly selecting sequencing instructions programming involved action instructions final projects achievement comparatively lower involved conceptually functionally complicated control flow instructions andor sensors programs special control flow instructions visually appear linear carry action per programming block program containing actions instructions logical flow program loop forked path rather line introduces conceptual complexity programming control flow instructions exist action instructions alone similarly appears based relative instruction simpler instruction versus target achievement complexity programming concept appears reflected portion reached target levels understanding discussion results provide critical information accessibility selected fields computer kindergarten adding clarity developmentally appropriate expectations order revise improve curricular features early childhood programming technologies results shed light challenges conducting designbased classroom setting interesting feature results trend decreasing achievement lessons possibly related amount time spent topic curriculum introduced progressively challenging concept later lessons asked build recently learned lesson carefully designed teach particular topic provide space exploration fully ingrained mastered yet material introduced could help explain lower later lessons another interesting result relates several childrens average achievement increased final introductory lesson culminating project statistical significance averaged higher choosing sequencing fig mean achievement choosing sequencing instructions average choosing sequencing programming instructions according goal dip choosing instructions marked sequencing marked represents significantly lower compared project drop score choosing instructions statistically significant sequencing control flow sequencing instructions comparison subsequent mean sd df project note classroom denotes significance denotes significance comparison made alternative toproject comparison last completed classrooms prior project mu bers computers instructions final project introductory except first simplest programming assistant adults remained stable throughout aspects curriculum final projects circumstances project compared lessons improved might attributed fact enthusiasm personallyselected projects would soon part showandtell celebration well time experiment pace lessons alternatively assuming chose projects wellmatched expertise would reasonable expect higher demonstrated levels achievement projects likely focused already felt comfortable however statistically significant differences seen comparisons control flow instruction sensorrelated measures introduced concept culminating project possible even time exploring needed significant gains occur surprisingly always perform better simpler complex ones example lack statistically significant differences childrens understanding looping versus conditional programs numeric versus sensor parameters unexpected theoretically based anecdotal observations researchers present associated looping numeric parameters principle straightforward involved programming conditional statements sensor parameters thus least somewhat higher levels achievement looping numeric parameters expected compared conditional statements sensor parameters comparisons described low less half overall sample size impacted results statistically significant findings varied instance researchers could collect tended belowaverage achievement levels curriculum increased difficulty assistants tended provide increased support questions leaving less time equally observe assess fact observed perceived difficult refrained attempting resulting achievement lower measures curriculum discussion beyond scope paper fully evaluate tangiblek curriculum results indicate curriculum generally engaging developmentally appropriate kindergarten results point kindergarten able effectively implement curriculum kindergartners interested able learn apply aspects programming computational thinking however fact fewer achieved target understanding complex topics introductory might indicate curriculum devote time build fully explore complex material order fully understand order iteration curriculum currently special instructions control flow control flow instructions comparison analogous concept mean sd concept df looping instruction numeric parameters sensor parameters numeric parameters conditional looping instruction conditional conditional looping instruction note classroom conditional statements denotes statistically significant difference fig mean achievement control flow comparison average types control flow instructions parameters significant difference conditional instructions marked mu bers computers developed divide prior curriculum based action sensing expand lessons amount time spent exploring topic particularly complex ones structured freeplaybased formats provide opportunities investigation reinforce additional supporting added kindergarteners vary widely levels cognitive development abilities adaptations tangiblek curriculum address range even current format already results demonstrate complexity assessing sophisticated processes classroom setting necessary tradeoff built gathering adequately detailed picture childrens balanced keeping collection feasible given adult working several context full classroom cases particularly later setting individualchild sessions provided better context demonstrate abilities however goal examine tangiblek program typical kindergarten classroom endeavor successful although ultimately could collected every every measure information gathered reality implementing curriculum classroom settings supports necessary meet needs limitations future directions tangiblek curriculum taught regular hours schools greater boston area benefits drawbacks conducting setting rather experimental setting testing curriculum taught kindergarten public private schools demonstrated given professional development dedicated teacher successfully teach content classroom however takes place setting present faced several environmental limitations participating taught curriculum impossible control teacher classroom variations influenced results example another allowed class difficult others gave stepbystep instructions given leeway teach curriculum whatever believed best suited needs classrooms however causes methodological issues analysis conducted focus teaching styles classroom culture serve enhance hinder curriculum fig illustration engineering process culmination project project comparison introductory mean sd scoring df choosing instructions sequencing repeats numeric parameters sensors sensor parameters ifsa note classroom separate measure instructions projects mu bers computers another drawback encountered fluctuating daily participants fairly regularly absent temporarily classroom otherwise unable participate class times busy classroom divided adult attention prevented assessments collected particularly assessment required long sustained periods observation teacher differences impacted low participants example teacher chose teach lesson order time review previous final project drastically lowering lesson done expanding scope gathering participants possible ensuring consistent completion present inspires additional agendas focus kindergartners investigations look younger prekk older stnd grade able learn apply powerful ideas would important determine whether particularly challenging kindergartners pose less challenge longer exposure introduced older expand overall sample size well experience range sample attempt assess feasibility implementing curriculum classroom teacher typical support staff minimal involvement assistants except conducting collection present participating trained assistants classroom help troubleshoot technology issues assess childrens progress provide oneonone help needed curriculum become widespread necessary know supports need modifications curriculum classroom management alternatives additional adult support etc successfully implement curriculum finally beyond scope current followup could look longitudinal transfer effects tangiblek curriculum retain computational thinking impact areas academic extracurricular lives able apply engineering process subject areas completing curriculum look longterm benefits incorporating programming early childhood important note challenges arose part present posed hardware curricular highlights importance making developmentally appropriate hardware software specifically designed young results show correctly connecting robotic parts proved challenging understanding function part underlying computational concept result surprising since cherp programming interface curricular introducing robots parts purposes specifically developed kindergartners part project kit hardware designed older part commercially available lego product furthermore spent significant amount time fixing robots came apart frequently challenging assemble pieces needed adult help spent repair time working computer programs instead able spend time providing support central rather helping rebuild robots perhaps would attained higher levels achievement understanding complex powerful ideas involved computational thinking findings informed tangiblek project early childhood prekindergarten nd grade systematically implement curriculum revised according several points outlined document experiences outcomes course year kiwi developmentally appropriate hardware replace lego hardware current despite limitations described paper poststudy collected speaks success tangiblek program would participate tangiblek given chance along general success enthusiasm feedback highlights overall positive nature experience conclusion early childhood classroom typically place expect find programming robots yet availability developmentally appropriate technologies increasingly possible result advancement technological fluency nations youth paper explored tangiblek program viable option classroom integrate developmentally appropriate technology early childhood classroom cherp spend time building planning actions physical wooden block computer screen construct programs iteratively improving programs according initial goals subsequent discoveries tangible programs robots exist offscreen drawn investigate collaboratively negotiate sharing materials well finemotor artifacts serve points discussion reminders content even computer turned analysis presented paper explored rich process creation physical digital worlds actively engage problemsolving learn powerful ideas computer including core computational thinking essential understanding impact technologies development could tools parents educators policymakers researchers responsibility ensure receive technological needed healthy development successful future tangiblek program introduced paper shows given ageappropriate technologies curriculum pedagogies young actively engage computer programming applied field take first steps developing computational thinking acknowledgments tangiblek project supported national foundation nsf drl opinions findings conclusions recommendations expressed material authors necessarily reflect views national foundation authors would like thank participating schools commitment participation project mu bers computers references barron caytonhodges bofferding copple darlinghammond levine take giant step blueprint teaching digital york joan ganz cooney center sesame workshop barr stephenson bringing computational thinking involved role computer community inroads httpdxdoiorg bers blocks robots computers technology early childhood york college press bers beyond computer literacy supporting youths positive development technology directions youth development bers designing digital experiences positive youth development playpen playground oxford university press bers horn tangible programming early childhood revisiting developmental assumptions technologies berson berson eds hightech tots childhood digital world greenwich information publishing bers ponte juelich viera schenker designers integrating early childhood information technology childhood cejka rogers portsmore kindergarten motivate math engineering literacy elementary international journal engineering clements gullo effects computer programming young childrens cognition journal psychology httpdxdoiorg clements meredith logo effects efficacy retrieved httpelmediamitedulogofoundationpubspapersresearchlogohtml cobb confrey disessa lehrer schauble experiments researcher gelman brenneman pathways young early childhood quarterly special issue early math horn davis hubbard keifert leong olson june sustainability next generation ecofeedback technology proc th international conference interaction short paper ann arbor mi international society technology nets profiles washington dc iste retrieved wwwisteorgstandardsnetsforstudents netsforstudentsprofilesaspxpk international society technology computer association operational definition computational thinking thinkingoperationaldefinitionflyerpdf international society technology computer association kazakoff bers programming context kindergarten classroom impact sequencing journal multimedia hypermedia kazakoff sullivan bers effect classroombased intensive programming workshop sequencing ability early childhood early childhood journal klahr carver cognitive objectives logo debugging curriculum instruction transfer cognitive psychology lee martin denner coulter allan erickson computational thinking youth practice inroads massachusetts department massachusetts technologyengineering curriculum framework retrieved massachusetts department httpwwwdoemasseduframeworksscitechpdf naeyc fred rogers center early childrens media technology interactive media tools early childhood programs serving birth joint position statement washington dc naeyc latrobe pa fred rogers center early saint vincent college retrieved wwwnaeyc orgfilesnaeycfilepositionspstechnologywebpdf neuman dickinson eds handbook early literacy york guilford press papert mindstorms computers powerful ideas york basic books papert whats big idea toward pedagogy idea power ibm systems journal httpdxdoiorgsj pea kurland cognitive effects computer programming ideas psychology httpdxdoiorg perlman computer technology provide creative environment preschool logo memo cambridge mit artificial intelligence laboratory publications piaget construction reality child york basic books resnick playful creative societies update retrieved httpwebmediamiteduwmrespaperseducationupdatepdf rogoff goodman turkanis bartlett together adults community york ny oxford university press salomon perkins transfer cognitive programming journal computing sesame workshop sesame workshop pnc foundation join white house effort stem retrieved httpwwwsesameworkshoporg newsandeventspressreleasesstemeducation stair reynolds principles information systems th ed boston course technology itp us department office technology transforming american powered technology washington dc us department office technology retrieved httpwwwedgovtechnologynetp white house educate innovate retrieved httpwwwwhitehousegovissueseducationeducateinnovate wyeth young learn program sensor action logic blocks international journal sciences zelazo carter reznick frye early development executive function problemsolving framework review general psychology zigler bishopjosef cognitive child vs whole child lessons form years head start singer golinkoff hirshpasek eds play play motivates enhances childrens cognitive socialemotional growth york ny oxford university press mu bers computers 
computers human behavior xxx xxxx xxx please cite article charoula angeli michail giannakos computers human behavior httpsdoiorgjchb available online november elsevier ltd rights reserved computational thinking issues challenges article info keywords computational thinking digital competences coding technological fluency algorithmic thinking abstract computational thinking term applied describe increasing attention knowledge development designing computational solutions algorithmic thinking coding focuses practicing programming algorithms enables development qualities abstract thinking pattern recognition logical reasoning contemporary infrastructural developments like cs httpswwwcsforallorg istes standards computational thinking httpswwwisteorgexploresolutionscomputationalthinkingforallarticle id computer associations computational thinking httpadvocatecst eachersorgcomputationalthinkingandbeyond appearance tools printing microprocessors intuitive programming languages posit computational thinking promising area support competences special issue computers human behavior editors report conducted interdisciplinary teams introduction special issue draws attention great potential need area computational thinking engage meaningful useful thinking digital competences finally editorspropose directions future practice computational thinking introduction computational thinking term since describes notion structured thinking algorithmic thinking produce appropriate output given input denning recent efforts revitalize importance aim democratizing computing knowledge important body knowledge learners need order cope well challenges st century wing relaunched term interest area defining process involves designing systems understanding human behavior drawing fundamental computer wing definition adopted widely due generic nature created need specific definition csta iste selby woollard last years increasing interest schools role childrens acquisition thinking digital competences accordance need computational thinking coding recent years become integral part curricula countries estonia israel finland united kingdom examples growing efforts governments integrate coding literacy support creative problemsolving tasks hubwieser giannakos berges brinda diethelm magenheim jasute addition computer association csta international society technology csta iste cyber innovation center httpscyberinnovationcenterorg national math initiative httpswwwnmsorg developed conceptual guidelines similarly organizations codeacademycom offer environments promote coding well accepted literature involves like decomposition breaking complex simpler ones developing algorithms stepbystep solutions abstraction still limited evidence around several issues challenges someone needs aware order appropriate experiences competences issue herein editors present covering aspects discuss challenges practice well raising important questions researchers field contributions special issue area growing significance scholarly emerging conceptually empirically response need accelerating foundations developments computers human behavior presents special issue disseminates latest findings special issue consists contributions addressing topic perspectives disciplinary backgrounds well covering areas needs articles provide insights importance metaphors putting practice empower importance employing empirical contents lists available sciencedirect computers human behavior journal homepage httpwwwelseviercomlocatecomphumbeh httpsdoiorgjchb computers human behavior xxx xxxx xxx experimentation furthering development young childrens scaffolds embodied metaphors computing first article manches mckenna rajendran robertson issue investigated elementary computing metaphors lens embodied cognition metaphor figure speech describes object action literally true helps explain idea make comparison conceptual metaphors extremely important sciences eg energy transfer thermodynamics mathematics offer explanation ability think reason abstract manches als analysis showed participants drew upon overarching embodied metaphors explanations namely computing constructs physical objects participants simulated manipulating physical objects eg pinching referring range computing computing processes motions along path whereby participants moved hands along bodybased axes referring temporal sequences authors concluded embodiment might shape understanding addition well examples integrated metaphors communicate meaning construct representations allow us better support teaching techniques well development technologies interfaces eg embodied interfaces interactions teaching metaphors introduce programming second article perezmarn hijonneira bacelo pizarro issue expanded notion metaphors teach within context computer programming authors put practice methodology called mecoprog metaphors recipeprogram pantrymemory boxesvariables teach programming following empirical experiment primary years findings validated coupling metaphors blockbased programming environment eg potential improve knowledge acquisition primary strategies pathway fostering third papavlasopoulou sharma giannakos issue designed evaluated workshop learn code development successfully scaffolded motivated proved critical teaching goal examine differences eyetracking objective measure triangulating findings qualitative coming childrens interviews results showed statistically significant difference gaze gain interestingly qualitative showed differences strategies implemented practices coding perceptions results provided objective evidence female lack competences behavior based gaze compared simply approachstrategy perspectives coding thus important approach taken consideration assist mastering childrens computational thinking interaction effect scaffolding strategy fourth angeli valanides issue examined effects beebot floor programmable young computational thinking hypothesized scaffolding would play significant role development childrens computational thinking beebot beebot provide visual representation commands program scaffolding techniques designed taking consideration differences anticipating genders would benefit least techniques results showed statistically significant gains initial final assessment childrens computational thinking according findings benefited scaffolding techniques statistically significant interaction effect detected scaffolding strategy showing benefited individualistic kinesthetic spatiallyoriented manipulativebased cards benefited collaborative writing contributes body knowledge inform teaching computational thinking addition practical significance curriculum developers instructional leaders classroom results curricula classroom focus broader set computational thinking coding challenges computational thinking future directions findings suggest order adopt powerful concept researchers need invest systematic efforts addressing several issues related defining competencies grade developmental contributors special issue discussed efforts made define competencies guidelines curricula eg csta iste currently missing literature abstraction decomposition structures fig fivestep plan angeli giannakos computers human behavior xxx xxxx xxx might map abilities grade disciplines thus needed order solve inconsistencies denning validate robust theoretical conceptualization construct metaphors teaching efficiently effectively according manches issue perezmarn issue learnercentered metaphors enhance understanding special issue provides preliminary evidence importance metaphors teaching understanding needed order create metaphors effectively teaching pedagogical strategies technologies teaching articles papavlasopoulou issue angeli valanides issue point need scaffold engagement importance alignment teaching considering fact studentfriendly programming environments eg alice bluejay greenfoot kodu hardware materials printers initiatives eg code codeacademycom appear means promote future needs undertaken investigate interrelationship competencies representations tools teaching practices teacher professional development need systematically prepared terms teach assess technologies teach thus teacher professional development programs need implemented inservice time teacher educators need find ways integrate teaching preservice courses better preparation preservice assessment competencies lastly articles special issue mentioned assessment competencies well underdeveloped thus need future identify ways assessed either holistic measure array subskills within context authentic problemsolving subjects disciplines accordingly fig presents fivestep plan areas addressed future fivestep plan presented cycle expected intense practice progress area inform another evolve time first step tackles definition competencies order provide baseline common language contexts eg countries levels subjects disciplines etc concept next step creating powerful metaphors mechanism transforming abstract concrete easier notions understand third step effectiveness pedagogies technologies enhancing enabling development competencies fourth step focuses crucial issue preparing instructors teach well integrate appropriate technological tools enable teaching respective teaching contexts lastly fifth step deals measurement assessment competencies area currently infancy acknowledgements would like thank reviewers special issue timely reviews commissioning editor computers human behavior paul kirschner ongoing support guidance preparation special issue partly supported comnplayscience project european commissions horizon swafs program project references angeli valanides developing young childrens computational thinking interaction effect scaffolding strategy computers human behavior csta iste operational definition computational thinking available httpsidisteorgdocsctdocumentscomputationalthinkingoperationaldefinitionflyerpdf csta operational definition computational thinking available httpwwwcstaacmorgcurriculumsubcurrfilescompthinkingflyerpdf denning beyond computational thinking communications denning remaining trouble spots computational thinking communications hubwieser giannakos berges brinda diethelm magenheim jasute july global snapshot computer schools proceedings iticse working reports manches mckenna rajendran robertson identifying embodied metaphors computing computers human behavior papavlasopoulou sharma giannakos coding coupling eyetracking qualitative investigate differences computers human behavior perezmarn hijonneira bacelo pizarro computational thinking improved methodology based metaphors teach computer programming computers human behavior selby woollard computational thinking developing definitions proceedings th technical symposium computer sigcse wing computational thinking communications charoula angeli university cyprus cyprus michail giannakos norwegian university technology norway corresponding author email address cangeliucyaccy angeli angeli giannakos 
david barr john harrison leslie conery computational thinking digital national foundation assembled thought leaders bring computational thinking classroom agroup cluster around computer looking series graphs charts screen talking quietly intently col laborating south america skype together gathered created depicting rate defores tation rain forests around world today discussing changes need make representation algorithm running simulation engaged called computational thinking computational thinking seminal article published jeanette wing described computa tional thinking solv ing designing systems understanding human behavior drawing fundamental computer noted computational thinking involves familiar decomposition representation modeling well less familiar ideas binary search recur sion parallelization argued computational thinking fundamental everyone computer scientists reading writing arithmetic add computational thinking every childs analytical ability wings article gave rise often controversial discussion debate among computer scientists cognitive researchers educators regarding nature definition applica tion people proposed revisions refinements wings original description far single widely accepted defini tion computational thinking emerged result pk educa tors recognize importance want help ac quire lacked clear practical definition guide make accessible national foun dation nsf funded project titled leveraging thought leadership computational thinking pk led jointly iste com puter association csta project intended make computational thinking accessible educators providing operational definition shared vocabulary ageappropriate examples com putational thinking tied current objectives classroom practices year ago project convened di verse educators interest higher pk industry help define common language surrounding computational thinking articulate challenges opportunities integrating pk identify promising practices strategies moving computational thinking concept deep integration meeting consensus emerged regarding essential elements importance objec tive might introduced pk environment outcomes meet ing summarized synthesized tentative operational definition ctthat description compo nents educators build curriculum grade levels content areas copyright iste international society technology us canada intl isteisteorg wwwisteorg rights reserved leading technology marchapril istockphotocomdrafter everyone computational thinking process includes formulating enables us computer tools help solve logicallyorganizingandanalyzing representingdatathroughabstrac tions models simulations automating solutions algo rithmic thinking series ordered steps identifying analyzing imple menting possible solutions goal achieving efficient effective combination steps resources generalizing transferring problemsolving process wide variety supported en hanced dispositions attitudes essential dimensions including confidenceindealingwithcomplexity persistence working difficult tolerance ambiguity ability deal open ended ability communicate others achieve common goal solution respon dents agreed strongly agreed definition captured essential elements additional confirmed definition would means build consensus pk community basis survey feedback educators gathered confer ence presentations infor mal collection project leaders begun implementing next phase project involves learn learn teach vocabulary computational thinking pk classrooms please visit isteorgcomputationalthinking csta website httpcstaacmorg check back months find curriculm resources vocabulary tools toolkit leaders copyright iste international society technology us canada intl isteisteorg wwwisteorg rights reserved marchapril leading technology developing examples look like classroom well assembling resources sup port guide implementation computational thinking pk dispo sitions listed operational defini tion computa tional thinking critical thinking mathematical thinking question given rise much debate yet widely accepted consensus participants workshops sponsored iste csta project proposed differs critical thinking mathemati cal thinking computational thinking classroom scenarios developed participants istecsta practitioners workshop illustrate computational thinking play various grade levels disciplines examples computational thinking nontraditional settings become internalized easily transferred setting another developing applied variety situationsin classes workplace hobbiesfrom variety perspectives authentic setting emphasize begin apply naturally exciting ways mr davis ninth grade language arts class studying various literary elements plot point view irony voice read short stories wrapping unit preparing write essays explore particular literary device plays part essence workings chosen stories must state theses clearly include least pieces evidence support theses logically organizing analyzing necessary proving thesis citations strong thorough textual evidence essential elements computational thinking concept representing abstractions literary elements plot structure setting figurative language tone point view necessary writing coherent essay literary analysis clear thesis statement ability communicate others achieve common goal solution facilitates active participation class discussions especially guided seminar question reflect unit enable effective writers begin making connections language arts application subject areas ms martinezs sixth grade social class studying roman empire compare events ancient roman childs life life experience writing responses ancient roman life blog identify lifestyle ancient roman compare teacher calls attention vocabulary modeling simulation asks reflect asks reflect might future including careers computational thinking representing abstractions models simulation logically organizing analyzing exploring ways transferring contexts ms lees seventh grade class looking series diagrams created portray floor plans homes diagrams room labeled node pathway building labeled route discussing options escape routes event fire ms lee look diagrams hear conversation among describing diagrams abstraction actual rooms home building enables represent possible escape routes preparing create algorithm calculate safest fastest routes buildings mr butlers fifth grade music class studying diatonic scale concept pitch create virtual xylophone correctly reproduce scale observation recognize bar xylophone behaves manner pitch varies bar representing abstractions well identifying analyzing implementing possible solutions additionally experiencing disposition persistence working difficult istockphotocomildogesto istockphotocommstay copyright iste international society technology us canada intl isteisteorg wwwisteorg rights reserved leading technology marchapril unique combination think ing together provide basis pow erful form tool oriented makes familiar trial error iteration even guessing contexts previ ously impractical possible auto mated implemented much higher speeds important application computer technolo gy virtually every field changed done today human mind far powerful problemsolving tool ability extend pow human thought computers digital tools become essential part everyday lives need understand computers digital tools help us solve need know communicate others assist us computersupported solutions already learn ele ments set computational thinking variety disci plines need ensure opportunity learn complete set com bined power available nsfistecsta project explored learn computational thinking grade levels disciplines longterm goal recommend ways opportunity learn ensure transferred contexts david barr retired teacher administrator works tech nology consultant serves iste nets leadership team steering com mittee nsfistecsta computational thinking project john harrison taught math ematics computer princess anne virginia beach virginia since sits computer association board chairs communi cations committee levels professional development specialist leslie conery deputy ceo iste holds assortment degrees certifications computer association management classroom teacher elementary material based supported national foundation grant cns online options addition netst certification offer courses integration iste standards st century skillsin innovative virtual classroom environment convenient asynchronous format hours day days week courses teaching online environment weeks supporting digital global citizenship weeks technology literacy utilizing social networking tools leadership capacity weeks focus stem instructional technology strategies math weeks upcoming spring courses survey emerging technologies weeks next starts information fluency weeks next starts stand take free online surveys jamesmadisoneducationcom phone email toll free infojamesmadisoneducationcom courses accredited james madison university james madison university jmu james madison logo registered trade marks james madison university license integrating st century netst certificationtm copyright iste international society technology us canada intl isteisteorg wwwisteorg rights reserved marchapril leading technology 
computational thinking review state field authors shuchi grover roy pea source researcher vol janfeb published american association stable url httpswwwjstororgstable accessed utc jstor notforprofit service helps scholars researchers discover build upon wide range content trusted digital archive information technology tools increase productivity facilitate forms scholarship information jstor please contact supportjstororg jstor archive indicates acceptance terms conditions available httpsaboutjstororgterms american association collaborating jstor digitize preserve extend access researcher content downloaded wed jan utc subject httpsaboutjstororgterms reviewsessays computational thinking review state field shuchi grover roy pea jeannette wings influential article computational thinking years ago argued adding competency every childs analytical ability vital ingredient technology engineering mathematics stem learnin computational thinking article resonate serve rallying cry educator researchers policy makers interpreted wings definition advances made since wings article published article frames current state discourse computational thinking examining mostly recently published academic literature uses wings article springboard identifies gaps articulates priorities future inquiries keywords computational thinking computing computational literacy computers curricula environments stem cognition technology introduction course idea back alan perlis argued need college disciplines years ago jeannette wings succinct influential article learn programming theory computation guzdial computational thinking appeared viewpoint section however context computing march edition communications first gained popular traction around seymour paperts mit pronouncement represents universally applicable papert pioneered idea developing attitude set everyone computer scientists procedural thinking logo programming papert perspective topic wings article forms logical community prompted article growing community would eager learn recent resurgence takes fresh st century wings arguments caught attention broad academic starting point critical examination current state researchers educators policymakers computational thinking field following sections exam concept associated agenda witnessed ine mostly recently published salient academic literature increasing attention tailwinds larger envi wings article springboard article ronment fanned growing interest issue computer report key efforts around computing cs took centerstage following given definitional confusion plagued stark report titled running empty failure teach phrase imperative next computer digital wilson sudol stephenson section looks deeply varied perspectives evolving defi stehlik revealed precipitously low numbers women nitions rationale building among chi computing thirds country dren common criticisms schools article computer standards secondary concerns surveys recent investigating including statistics deepen given projections bureau phrase computational thinking per se labor statistics httpwwwblsgovooh computing nonetheless examine computational competencies fastestgrowing job markets cs educa various environments tools believed foster tion dovetailed policy attention development attempting assess appraised technology engineering mathematics stem finally article lays priorities broadening united states since turn st century discourse basis gaps current viewed core stem disciplines henderson cortina hazzan wing appears computing isstanford university stanford ca usa idea whose time come hstar institute stanford ca usa researcher vol doi aera httperaeranet content downloaded wed jan utc subject httpsaboutjstororgterms researcher computational thinking according wing computational thinking involves designing systems understanding human behavior drawing fundamental computer cts essence thinking like computer scientist confronted wing call action served starting point national academy sciences workshops convening leading researchers sciences computer departments leaders com puting industry explore nature computational think ing cognitive implications national council nrc viii pedagogical aspects computational thinking nrc first workshop early notions focused procedural thinking programming papert though still considered valid revisited broadened encompass several core computer take beyond programming workshop however threw sharp relief lack consensus seems bedeviled space central questions left unanswered workshop included following recognized best pedagogy promoting among programming computers legitimately sepa rated nrc questions reexamined followup workshop focused better defining space gathering synthesizing insights educators addressing learners aim workshop share examples best prac tices pedagogies environments teaching revealed plethora perspectives reflected several tools pedagogies legitimate candidates developing competencies wing revisited topic clarified computational thinking thought processes involved formulating prob lems solutions solutions represented form effectively carried informationpro cessing agent aho simplified defining thought processes involved formulating solutions represented computational steps algorithms recently royal society offered succinct tractable definition captures essence computational thinking process recognising aspects computation world surrounds us applying tools techniques computer understand rea son natural artificial systems processes valuable perspective breaks meaning especially curricula comes cs principles course piloted college board national foundation nsf httpwwwcsprinciplesorg course focuses practices computational thinking based big ideas computing computing creative human abstraction reduces information detail focus understanding information facilitate creation knowledge algorithms tools developing expressing solu tions computational programming creative process produces computa tional artifacts digital devices systems networks intercon nect enable foster computational approaches computing enables innovation fields including social humanities arts medicine engi neering business following workshops organized computer association csta international society technology iste barr stephenson provided similar operational definition aimed comprised explanatory checklist means along enumeration core capa bilities examples might embedded activi ties multiple disciplines worth noting potent idea computational literacy disessa predates wings charter although essence targets digital competency disessa separates material tools pro gramming environments cognitive social aspects computational literacy furthermore disessa computing medium exploring domains math much like kay goldberg explored math art via programming smalltalk notion often neglected popular definitions term computational literacy perhaps susceptible con fusion earlier ones like computer literacy information literacy digital literacy assumed various meanings years fall well short disessa demands computational literacy although phrase notion computational thinking seems preferred computational literacy practice today phrases often interchangeably procedural literacy another avatar first pro posed sheil xerox parc reading little distinguish procedural literacy applied mostly creating video games computational media artifacts broadly practice context media art researchers cs educators part broadly aforementioned recent descriptions value abstraction cts keystone distinguishing types thinking undisputed abstraction defining patterns generalizing specific instances key deal ing complexity wing following elements widely accepted comprising form basis curricula aim support well assess development abstractions pattern generalizations including models simulations systematic processing information symbol systems representations algorithmic notions flow control content downloaded wed jan utc subject httpsaboutjstororgterms januaryfebruary structured decomposition modularizing iterative recursive parallel thinking conditional logic efficiency performance constraints debugging systematic error detection programming fundamental cs key tool supporting cognitive tasks involved demonstration computational competencies well noteworthy efforts like cs unplugged httpcsunplugged introduce computing without computer providing valuable introductory exposing nature cs keeping learners crucial computational experiences involved cts common practice finally although broad acknowledgement com puting pervades aspects global economy place mandatory part curriculum far secure criticisms revolved around multiple interpreta tions lack clarity among educators cs discipline another valid concern whether compel ling rationale including allege interest pursuing cs stem careers compu tational competencies zerosum curricu lum map curriculum policymakers make room already packed curricula lack agreement whether ultimately incorporated educa tion general subject disciplinespecific topic multi disciplinary topic nrc lastly question whether distinct enough forms thinking developing advocates concede although shares elements mathematical engineering even thinking draws rich legacy related frameworks extends thinking unique lee denning freeman observe although computing paradigm contains echoes engineering mathematics distinctively dif ferent central focus information processes wings interpretation embeds well system practice claim approach generally described recognizable crucial omission expertise expected routine math although finally mentioned albeit briefly nrc framework basic literacy math considered essential understand world works lift hood allpervasive computing devices well believe possession computational competencies better positioned take advantage world ubiquitous com puting early experiences alleviate introductory cs courses undergraduates known face generate inter est prime success growing field rife opportunity recent news media industry suggest move make programming commonplace everyone introducing rithms short algorithms fourth stcentury literacy gaining momentum globally israel long boasted exemplary mandatory cs curricu lum countries russia south africa zealand australia already made room cs curricu lum recently united kingdom piloted programs teach computing schoolchildren following bold policy charter royal society summary pertinent broadly agreed definitions focus recently shifted tackling practical questions promote assess development extensive literature last decades tackling issues teaching programming cs bulk cs however set context undergradu ate classrooms although much learn kids programming languages logo basic well early programming cs experiences college space constraints imposed essay well focus recent resurgence force review limited recent involving stcentury tools schoolage environments tools foster idea low floor ceiling guiding prin ciples creation programming environments around since days logo essentially means though easy beginner cross threshold create working programs low floor tool powerful extensive enough satisfy needs advanced programmers ceiling computationally rich environments effective tools must low thresh old ceiling scaffold enable transfer support equity systemic sustainable repenning webb ioannidou several programming tools fit criteria varying degrees popular among graphical programming envi ronments alice game maker kodu greenfoot webbased simulation authoring tools agentsheets agentcubes kits tangible media arduino gogo boards graphical program ming environments relatively easy allow early expe riences focus designing creating avoiding issues programming syntax allowing novices build programs snapping together graphical blocks control actions dynamic actors screen environments like mits popular offering quite literally make programming snap several introductory computational experiences threestage usemodifycreate progression help learner go user modifier creator computational arti facts lee progression first broadly apples hypercard application mids early curricular game typi cally served well means iterative exploration making ideal motivating engaging introducing computer visual tangible programming experiences often followed researcher content downloaded wed jan utc subject httpsaboutjstororgterms exposure highlevel programming languages python java scheme recommendations engaging computing context margolis fisher see cooper cunningham provide compelling rationale tools strive bridge gap computing field emerging computational environments poised provide opportunities engagement formal infor mal settings engaging well etextiles computational craft kits small powerful hardware lilypad arduino allow combine tradi tional arts crafts sewing sketching compu tation electronics mit app inventor visual programming environment uses scratchlike graphical blocks code building android mobile apps neutral com plete tools sets low floor allowing creative app building something teens including eager still engaging complex including proce dural abstraction iterative recursive thinking structured task breakdown conditional logical thinking debugging despite growing popularity promoting st century competencies nrc video gaming platform examining among underuti lized recent holbert wilensky success fully developed tested prototype video game formulat aimed serve platform principles kine matics well systematic computational strategies formulat netlogo computational environment agentbased modeling abstracting pertinent behaviors agents applying rules evaluating results via modeling simulation key ways engaging blikstein demonstrates leveraging netlogo computational models sci ence secondarylevel classrooms agentbased ing however remains relatively underused surprisingly current computational tools vary effectiveness allowing engagement various compo nent elements maloney peppier kafai resnick rusk reported demonstration several elements conditional logic iterative parallel thinking abstraction programs created urban youth settings however lacks means abstract functionality functions procedures prompting version called snap berkeley seeks address perhaps imperative cs fuel development tools built expressly fostering among schoolage embody characteristics effective tools promote development competencies identified elements guided recent commonsense human understanding computing explain approaches pane ratanamahatana myers simon chen lewandowski mccartney sanders lastly despite variety environments current situated promising spaces still untapped fab labs makerspaces diy movements maker faire instructables promote construction tangible computational artifacts informal hacker events kids well ubiquitous powerful smartphones present exciting pos sibilities assessment without attention assessment little hope mak ing successfully curriculum furthermore judge effectiveness curriculum incorporating measures would enable educators assess child learned need validated recent addressing questions assessment werner denner campe kawamotos fairy assessment alice either studentcreated prede signed programming artifacts evaluate understand ing abstraction conditional logic algorithmic thinking solve ideas deconstruction reverse engineering debugging assess childrens understanding computational contexts long enjoyed appeal fields searle kafai min evaluated engineering programming debugged prebuilt faulty etextile projects han koh basawapatna bennett repenning attempted success assess thorny issue transfer answer ques tions like program space invaders program simulation past decades academic talk leveraged promoting assessing math literacy devel opment vocabulary language cs course engaging computationally rich provides additional instrument measuring growth grover computing wilson guzdial maintain although national urgency strengthening stem translated billions dollars funding explicitly computing remains underfunded nsf initiatives cpath bpc recently ce gone long energiz ing projects aimed bringing ctcs secondary additional boost guiding interested middle cs careers comes darpas initiatives csstem carnegie mellon universitys fire fostering innovation exploration although ongoing development help inform computing curricula throughout preparing teach ers computing ensuring equity remain huge challenges nsfs csk initiative aims add cs us schools georgia computes alliance forefront nationwide efforts teacher preparation development ctcs curricula well motivating female cs georgia techs guzdial argues blog httpcomputingedwordpresscom challenges meeting csk deadline include answering questions like following need order successful computer kind pedagogy fit lives inservice computer pedagogical content knowledge terms curriculum besides cs principles ap cs exploring cs curriculum httpwwwexploringcsorg content downloaded wed jan utc subject httpsaboutjstororgterms januaryfebruary intended year college preparatory curriculum initiatives aimed introducing cs schools include cshs httpwwwcshscom computing core httpwwwcomputinginthecore orgboth represent collaborations aca demia national bodies organizations microsoft google cstas curriculum computer provides curricular suggestions help build interest engage motivate cs addition googles exploring computational thinking website wwwgooglecomedu computationalthinking wealth links resources web recently introduced thread edubits inroads quarterly highlights principal within affiliated organizations broadening scope discourse priorities empirical inquiry thus quite evident much recent focused mostly definitional issues tools foster development strides made realm defin ing curricula nurturing computational competencies assessing development large gaps however still exist call empirical inquiries view echoed alfred aho wing argued application designing grade ageappropriate curricula computational thinking nec essary maximize impact significance nrc barring recent fadjo lu black berland lee others taken account contemporary sciences sociocultural situated distrib uted embodied cognition well interaction discourse analyses cognitive aspects novices computational studied extensively sissues development thinking kurland pea clement mawby debugging pea soloway spohrer transfer clements gullo pea kurland appropriate scaffolds successful transfer klahr carver name body literature brought bear stcentury underinvestigated idea computing medium teaching subjectsdovetailing introduction transfer problemsolving domains past includes demonstrations successfully designing logo software teach fractions harel papert kafai ching marshall modeling software metcalf krajcik soloway empirical schoolchildren could leverage extensive types beginner cs graduates face early programming experiences go beyond syntactical issues welldefined hurdles targets difficulty exist path developing ele ments eg recursion addressed largely untapped territory dispositions atti tudes toward stereotypes concerning cs relate development learner identity mercier barron oconnor crucial strive provide experiences aim nurture competencies recent incipient surveys attitudes toward computing represents start gain ing better understanding clearly much remains done help lucid theoretical practical understanding computational competencies example expect know better theyve participating curriculum designed evalu ated perhaps among important questions need answering serious attempt made introduce curricula development schools scale time redress gaps broaden stcentury academic discourse computational thinking acknowledgment gratefully acknowledge grant support life center national foundation ns references aho computation computational thinking computer journal barr stephenson bringing computational thinking involved role computer community inroads berland lee collaborative strategic board games site distributed computational thinking international journal gamebased blikstein connecting classroom tangible inter faces bifocal modeling framework proceedings th international conference sciences chicago il clements gullo effects computer program ming young childrens cognitions journal psychology cooper cunningham teaching computer context inroads denning freeman computings paradigm communications disessa changing minds computers literacy cambridge mit press fadjo lu black june instructional embodi ment video game programming afier program paper presented world conference multimedia hypermedia telecommunications chesapeake va fields searle kafai min debuggems assess etextiles proceedings rd sigcse technical symposium computer york ny press grover april engineering middle computational thinking paper presented annual meeting american association orleans la guzdial paving computational thinking communications han koh basawapatna bennett repenning towards automatic recognition computational thinking adaptive visual language proceedings conference researcher content downloaded wed jan utc subject httpsaboutjstororgterms visual languages human centric computing vlhcc madrid spain ieee computer harel papert software environ ment interactive environments henderson cortina hazzan wing computational thinking proceedings th sigcse technical symposium computer sigcse york ny press holbert wilensky april racing games exploring kinematics computational thinking approach paper presented annual meeting american association orleans la kafai ching marshall designers multimedia software computers pea kurland cognitive effects learn ing computer programming ideas psychology pea soloway spohrer buggy path development programming expertise focus mathematics repenning webb ioannidou scalable game development checklist getting computational thinking public schools proceedings st technical symposium computer sigcse york ny press royal society shut restart forward computing uk schools retrieved httproyalsocietyorg educationpolicycomputinginschoolsreport simon chen lewandowski mccartney sanders march commonsense computing know kay goldberg personal dynamic media ieeeteach episode sorting paper presented second international computer workshop computing canterbury uk klahr carver cognitive objectives logwoerner denner campe kawamoto debugging curriculum instruction transfer cognitive fairy performance assessment measuring computational thinking psychology middle proceedings rd technical symposium kurland pea clement mawby computer sigcse york development programming ability thinking highny journal computing wilson guzdial make progress computin lee martin denner coulter allan erickson werner computational thinking youth practice acminroads maloney peppier kafai resnick rusk programmingbychoiceurbanyouthlearningprogrammingwith proceedings sigcse york ny press margolis fisher unlocking clubhouse women computing cambridge mit press mercier barron oconnor images self others computer users role experience journal computer assisted metcalf krajcik soloway modelit retrospective jacobson kozma eds innovations mathematics mahwah nj lawrence erlbaum national council committee workshops computational thinking report workshop scope nature computational thinking washington dc national academies press national council committee workshops computational thinking report workshop pedagogical aspects computational thinking washington dc national academies press national council framework educa tion practices crosscutting core ideas washington dc national academies press pane ratanamahatana myers studying language structure nonprogrammers solutions program ming internationaljournal humancomputer papert mindstorms computers powerful ideas york ny basic books papert situating constructionism harel papert eds constructionism norwood nj ablex communications wilson sudol stephenson stehlik runnin empty failure teach computer digital ag york ny association computing machinery th computer association wing computational thinking communications ing notebook com putational thinking link magazine spring carnegie mellon university pittsburgh retrieved httplinkcscmueduarticlephpa authors shuchi grover doctoral candidate stanford universi lasuen mall stanford ca shuchigstanfordedu focuses helping becom computationally literatestudying social cultural cognitive cesses help developing computational competenciesand tools environments nurture development roy pea david jacks professor learnin sciences stanford university compute courtesy director hstar institute wallenber hall serra mall bldg stanford ca roypeastanfor edu sciences focuses advancing theorie findings tools practices technologyenhanced co plex domains manuscript received april revisions received june july accepted september januaryfebruary content downloaded wed jan utc subject httpsaboutjstororgterms 
computational thinking developing definition cynthia selby university southampton highfield southampton uk cselbysotonacuk abstract since jeanette wings term computational thinking various discussions arisen seeking robust definition phrase little consensus found intervening years even suggestions definition important perhaps focus computational thinking taught acquisition might observed however order facilitate consistent curriculum appropriate assessment argued definition still sought order contribute discussions surrounding definition computational thinking review literature spans years since frequently occurring terms descriptions meanings identified consideration given motivation inclusion exclusion term individual author possible description given associated term supplied criteria developed objectives computational thinking definition accordance needs identified literature criteria guide collected terms vocabulary definition computational thinking proposed encompasses thought processes abstraction decomposition algorithmic evaluation generalization categories subject descriptors computers computers curriculum general terms standardization theory keywords computational thinking definition abstraction decomposition algorithmic thinking algorithmic generalization evaluation introduction term computational thinking jeanette wing call make thinking like computer scientist fundamental everyone excited educators academics presented opportunity promote computer wider permission make digital hard copies part personal classroom granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee conference month city state country copyright xxxxxxxxxxxxxxxx john woollard university southampton highfield southampton uk jwoollardsotonacuk audience introduced challenge wing precisely define term state exactly computational thinking everyone since attempts authoritative individuals derive definition computational thinking aim investigation shed light discussions attempt definition computational thinking objectives including define narrowly broadly bring order criteria necessarily accommodate viewpoints refine definition facilitate assessment retain validity done previously development curriculums separate definition might promote acquisition computational thinking separate definition artifacts evidence method selection literature relating topic computational thinking examined following literature analysis method internet search engine query criteria jeannette wing computational thinking initially executed entries first pages checked applicabilityoftitle alldocumentsidentifiedashavingapplicable titles indicating focus computational thinking individually inspected resulted documents digital library searched term jeannette wing articles filtered according abstractintroduction text dated post led identification thirteen items addition articles describing proposed current computer curriculum designs israel germany zealand india england usa identified gave documents repetition comments author original articles discarded attempt contribute development definition publications analyzed chronological order discern development time phrase computational thinking descriptions suggested definitions computational thinking identified publication terminology common descriptions definitions collated equivalences allowed similar terms grouped together frequently occurring individual terms presented following sections basic collection terms definition computational thinking formulated proposed justification inclusion exclusion terms presented termbyterm basis justification based consistency usage andconsistencyofinterpretationacrosstheliterature theresulting definition reflects much consensus found literature removing less welldefined terms evidencefromliterature authorspaperscommentaries assert precise definition computational thinking required however discussion presented paper driven perceived need support professionals working field computer developing computing curriculums need definition supported literature guzdial suggested broad definition acceptable acceptance could shift focus away computational thinking computational thinking taught evidence acquisition might observed learners professor computer chenglie hu supports citing confident teaching computer promote computational thinking even though know exactly mechanism works recognize learners practice computation terms computer better computational thinking become argument expressed influence computer curriculums several curriculums acknowledging vagueness computational thinking definition continue include focus techniques computer presenting techniques curriculums include terminology often found descriptions computational thinking terminology explored detail jan cuny suggests computational thinking included curriculum requires assessment without agreement common definition computational thinking difficult impossible appropriate assessment tools actually measure ability think computationally rigorous agreed definition might ensure computational thinking curriculums years joyce malynsmith argued bunch examples placed curriculum discretion individual balance argument still favor searching robust definitionofcomputationalthinking althoughitmaybepossible without robust definition identify examples practice computational thinking ability measure computational thinking hampered lack consensusterms terms appear consistently throughout literature reviewed appears consensus definition computational thinking include idea thought process concept abstraction concept decomposition athoughtprocess introducing term computational thinking wing described humans think incorporates set mental tools computer tools transform difficult solved easily adding voice wings calling explicit teaching computational thinking guzdial refers computational thinking thinking computing participants workshop scope nature computational thinking although tasked defining computational thinking nevertheless agreed incorporates range mental tools computer idea extended represent information processes solutions algorithms aho picks idea transformation describes computational thinking thought processes formulating solutions expressed algorithms thought processes focus frequently focus described finally wing expresses refinements defining computational thinking thought processes involved formulating solutions solutions represented form effectively carried informationprocessing agent cuny snyder wing cited consensus definition computational thinking include concept thought process abstraction although idea abstraction hiding complexity part computational thinking introduced wing original article definition develops subsequent years amends definition include simultaneous consideration multiple layers abstraction consideration defining interfaces layers even peter denning acknowledges abstraction plays important part computing including programming however points act abstracting unique computer next year wing defines abstraction cornerstone computational thinking several participants workshop scope nature computational thinking nrc concur computational thinking focus around process abstraction creating defining relationships recently report workshops sponsored computer association csta international society technology iste incorporate computational thinking curriculum barr stephenson include ability abstract definition computational thinking concept abstraction explored lheureux aspects information technology approach computational thinking consensus definition computational thinking include concept abstraction decomposition breaking functionality identified wing part computational thinking decomposition required dealing large complex systems complex tasks participants first nrc workshop identify need decomposition next workshop focusing pedagogy participants extend idea robert tinker views core computational thinking breaking big danny edelson points creation solutions requires breaking chunks particular functionality sequencing chunks recently refining definition computational thinking guzdial includes tools including abstraction decomposition light consensus definition computational thinking include concept decomposition terms proposed inclusion definition computational thinking inclusion thought process abstraction decomposition supported consensus found reviewed literature terms consistently literature reflect discrepancy perceived meaning terms although consensus demonstrated terms others receive less support varied interpretation additional terms applicability inclusion definition computational thinking discussed possibleterms although less consistently terms several termsandideasdorecuracrosstheliteraturereviewedhere even term idea recurs interpretation always consistent articles several ideas proposed part definition computational thinking broad highlevel lack specific interpretation make inclusion terms definition difficult terms identified fall areas thinking computer imitation terms descriptions thinking general terms associated terms associated computer terms associated concept imitation representation specific terms logical thinking algorithmic thinking analysis generalization systems automation general computer modeling simulation visualization support inclusion exclusion terms definition computational thinking presented section justification based consistency usage consistency interpretation literature thinkingterms although idea computational thinking represents cognitive process attracts consensus suggestions severalspecifictypesofthinkingshouldalsobeincluded specific types thinking logical thinking algorithmic thinking engineering thinking mathematical thinking section explores viability incorporating types thinking definition computational thinking concept logical thinking although specifically defined occurs several times literature spanning years albeit perceived exactly equivalent terms describe similar types thinking grouped category include mathematical thinking engineering thinking heuristic thinking original article wing indicates computational thinking incorporates heuristic reasoning devise solution addition abstraction decomposition guzdial includes heuristic reasoning appropriate tool engaging computational thinking computational thinking equivalent logical reasoning people logical reasoning included iyer computer curriculum order promote highlevel thinking necessarily subject specific lheureux detailing aspect information technology approach computational thinking define logical thinking ability hypotheses computational thinking intersects engineering computer systems interact real world however computational thinkers create virtual worlds limited physical reality although wing states computer relies mathematics foundation gerald sussman affirms mathematical thinking revolves around abstract structures computational thinking revolves around abstract methodology computational thinking could viewed bringing engineering together could viewed metascience concerned studying methods thinking applicable disciplines ability think logically mathematically heuristically engineering perspective certainly capabilities computational thinker exhibit references terms literature well expanded although term logical thinking described suitable include definition computational thinking potentially analogous term algorithmic thinking requires investigation original article wing term algorithmic thinking preferring word heuristic instead however extends definition computational thinking include algorithmic parallel thinking david moursund suggests computational thinking related idea procedural thinking proposed seymour papert mindstorms defines procedure stepbystep set instructions carried device theme continued gerald sussman defines computational thinking devising explicit instructions accomplishing tasks inclusion algorithmic thinking curriculum schools appears prior wings contribution israeli computer curriculum galezer placed emphasis inclusion algorithmic processes appears consensus computational thinking incorporates aspects algorithmic thinking algorithmic term algorithm interpreted stepby step procedure accomplishing tasks computer disciplines evidenced creation algorithms algorithmic wide acceptance appropriate definition algorithmic thinking applicable inclusion definition computational thinking types thinking proposed inclusion definition computational thinking bring refinement term tying definition computational thinking terms logically heuristically openended interpretation specific disciplines mathematics engineering help advance development curriculums aid development computational thinking assessment instruments reasons terms expressing idea logical thinking equivalence dilute definition computational thinking hand algorithmic thinking represented consistently literature interpretation vary potential terms associated thinking algorithmic thinking possible term suitable inclusion definition computational thinking problemsolvingterms idea computational thinking relationship appears frequently cited literature specific terms analysis generalization frequently employed discussions general section explores interpretation terms viability incorporating definition computational thinking form another appears frequently literature presented agreement describing computational thinking problemsolving however literature illuminate detail wing course incorporates computer definition computational thinking broadness problemsolving employed computational thinking opposition specific technical pointed larry snyder requirement computing device introduced barr stephenson state essence computational thinking implemented computer peter henderson concisely describes computational thinking type generalized solvingwithconstraints problemsolvingisemphasizedbymarcia linn includes qualities successful computational thinker ability engage sustained investigative processes generate solutions although appears consensus computational thinking type term sufficiently specific define due broadness term suitable inclusion definition computational thinking term analysis included commentators definition computational thinking interestingly term appears relation solutions analyze analyze solution analyze context fits category defined however analyze context solutions could interpreted comparable term evaluate initial article wing expresses need computational thinker make tradeoffs evaluating time space power storage evaluation algorithmic processes including power limitations foreshadowed galezer application term user interfaces evidenced second objective zealand proposed curriculum part designing programs approach lheureux include ability evaluate processes terms efficiency resource utilization ability recognize evaluate outcomes although term analyze attracts agreement inclusion definition computational thinking descriptions term found literature imply evaluative process therefore interpretative consensus description term evaluate suitable inclusion definition computational thinking specific term appears sparingly literature definitions generalization ability move specific broader applicability example understanding draw square defining internal angles applying algorithm produce approximation circle ability recognize parts solutions previous situations might future situations included kolodner definition computational thinking parts functional pieces solve current combined ways solve term generalization described proposed curriculum recognizing common patterns sharing common features idea moves forward decomposition described generalization step recognizing small pieces reused reapplied similar unique although exact term generalization sparingly literature idea recognizing reusing common parts solution possibility inclusion definition computational thinking possible terms examined section include analysis generalization broad term although consistently throughout literature well defined analysis context broad term often incorporating ideas abstraction decomposition discussed analysis context solution analogous evaluation consistently literature although term generalization infrequently literature descriptions analogous processes therefore set possible terms ones consistently least disparity interpretation suitable inclusion definition computational thinking evaluation generalization computerscienceterms authors cited concede computational thinking deep relationship computer suggest specific computer terminology included definition computer specific terms include systems automation general computer recursionandrecoverythroughredundancy thissectionexplores viability incorporating terms definition computational thinking systems although mentioned frequently still describe computational thinking designing systems based computer mentioned wing inclusion foreshadowed galezer incorporates implementation computing systems curriculum peter dennings great principles computing includes category based building software systems goes describing systems core practices computing professionals engage along programming modeling innovating focus cases systems product oriented process evidence ability think computationally necessarily definition therefore term systems suitable inclusion definition computational thinking another term popularized wing defining computational thinking automation connects term abstraction discussing mechanization abstraction layers relationships even denning acknowledges happens programming later stronger connection made wing defining computing automation abstractions introduces need computational device interpret abstractions need computer execute program process processes required creation automations possible terms defining computational thinking hand program artifact similar system discussed evidence computational thinking taken place previously consensus presented emphasized thought process aspect computational thinking based consensus automation interpreted program artifact useful addition definition computational thinking throughout literature terms closely related general content computer appear descriptions computational thinking wing introduces computer thinking recursively interpreting code code type checking prevention detection recovery redundancy damage containment error correction prefetching caching additional parallel processing testing debugging search strategies algorithmic complexity pattern matching recognized nrc report barr stephenson include abilities think iteratively recursively closer analysis reveals unique field computer example mathematicians think iteratively engineers plan recovery redundancy mastered computational thinkers none uniquely defines helps narrow definition computational thinking therefore terms interpretable computer content helpful defining computational thinking thought process include consensus found literature abstraction include consensus found literature decomposition include consensus found literature logical thinking exclude broad term notwell defined algorithmic thinking include welldefined multiple disciplines exclude broad term evidences develops acquisition evaluation include welldefined multiple disciplines generalization include welldefined concept although term familiar systems exclude evidences automation exclude evidences computer content exclude evidences modeling simulation exclude evidences creation manipulation develops acquisition possible terms examined section include systems automation general computer recursion recovery redundancy systems resulting product evidence computational thinking definition automation product program evidences computational thinking finally terms interpretable computer content bring focus definition computational thinking therefore none suggested terms discussed section appears suitable included definition computational thinking imitationterms additional terms discussions computational thinking modeling simulation visualization terms appear frequently cited literature section explores viability including terms definition computational thinking wing began defining computational thinking modeling appropriate parts facilitate solution later brian blake insists definition computational thinking include modeling visualizations brinda puhlmann schulte identified achievable curriculumstandardtheprocessesinvolvedinmodelingdata hand edward fox janet kolodner point manipulation abstractions models simulations visualizations contribute development computational thinking observing results changing variable values forming hypotheses finding anomalies identifying invariants achieved interacting models simulations visualizations manipulation representations agreed enhance development computational thinking necessarily define although tools effective aids developing computational thinking suitable inclusion definition computational thinking following section based terms consistency consistency interpretation literature summarizes arguments presented suggests definition computational thinking proposeddefinition intent investigation shed light discussions attempt definition computational thinking objectives definition stated define narrowly broadly bring order criteria necessarily accommodate viewpoints refine definition facilitate assessment retain validity done previously development curriculums separate definition might promote acquisition computational thinking separate definition artifacts evidence computational thinking justification inclusion exclusion based consistency usage consistency meaning literature resulting definition reflects much consensus found literature removing less welldefined terms summarizes justification prospective terms inclusion exclusion proposed definition computational thinking computational thinking definition terminology supported preceding arguments computational thinking often product oriented associated limited cognitive thought process reflects ability think abstractions ability think terms decomposition ability think algorithmically ability think terms evaluations ability think generalizations proposed definition attempts incorporate terms consensus literature terms well defined disciplines intent focus thinking aspect original phrase words computational thinking focused approach incorporating thought processes utilize abstraction decomposition algorithmic evaluation generalizations conclusion genuine need robust agreed definition computational thinking definition facilitate development computer curriculums line wings original vision encourage computational thinking definition ensure curriculums become collection interesting resources presented discretions definition ensure appropriate assessment tools developed measure computational thinking description narrows definition excluding proposed terms separates practice results evidence application thinking however invalidate curriculum designs especially often focus evidence term status justification computational thinking leaves open possibilities assessment tools measure ability think computationally course discussions definition computational thinking yet concluded well definition changes understanding computational thinking develops coming years especially true younger learners exposed fulfillment wings original vision computational thinking review literature simply attempts inform discussions references barr stephenson bringing computational thinking involved role computer community inroads bell andreae lambert computer zealand schools proceedings twelfth australasian conference computing volume brisbane australia australian computer society inc brinda puhlmann schulte bridging ict cs standards computer lower secondary proceedings th annual sigcse conference innovation technology computer paris france computer association task force computer standards york computing working computer curriculum schools available httpwwwcomputingatschoolorgukdatauploadscomputi ngcurricpdf accessed denning computing natural commun denning ubiquity symposium computation closing statement ubiquity galezer beeri harel yehudai program computer computer guzdial paving computational thinking commun guzdial definition computational thinking jeannette wing computing blog online available httpcomputingedwordpresscomadefinition ofcomputationalthinkingfromjeanettewing accessed guzdial nice definition computational thinking including risks cybersecurity computing blog online available httpcomputingedwordpresscomanice definitionofcomputationalthinkingincludingrisksand cybersecurity accessed henderson cortina wing computational thinking proceedings th sigcse technical symposium computer covington kentucky usa hu computational thinking might mean might proceedings th annual joint conference innovation technology computer darmstadt germany iyer baru chita khan vishwanathan computer curriculum schools available httpwwwcseiitbacinsripaperscsc aprilpdf accessed lheureux boisvert cohen sanghera implementation computational thinking information technology proceedings th annual conference information technology calgary alberta canada national council report workshop scope nature computational thinking available httpwwwnapeducatalogphprecordid accessed national council report workshop pedagogical aspects computational thinking available httpwwwnapeducatalogphprecordid accessed ubiquity interview peter denning great principles computing ubiquity wing computational thinking commun wing computational thinking online available httpwwwcscmueduafscsusrwingwwwcomputational thinkingpdf accessed wing computational thinking thinking computing philosophical transactions royal society wing notebook computational thinking link pittsburgh pa carneige mellon 
review demystifying computational thinking valerie shute chen sun jodi asbellclarke florida state university usa terc usa articleinfo abstract review contents lists available sciencedirect review journal homepage wwwelseviercomlocateedurev article history received march received revised form july accepted september available online september keywords computational thinking computational literacy programming contents paper examines growing field computational thinking review literature shows diversity definitions interventions assess ments models synthesizing various approaches construct settings created following working definition conceptual foundation required solve effectively efficiently ie algorithmically without assistance computers solutions reusable contexts definition highlights primarily thinking acting exhibited particular become basis performancebased assessments based literature categorized main facets decomposition abstraction algorithm debugging iteration generalization paper shows examples definitions interventions assess ments models variety disciplines call extensive area elsevier ltd rights reserved introduction definitionsofcomputationalthinking goalsandfocus method procedure inclusionandexclusioncriteria resultsfromtheliteraturereview characteristicsofcomputationalthinking componentsofct differencesbetweenctandothertypesofthinkingskills relationshipofctwithcomputerscienceandprogramming interventionstodevelopcomputationalthinking researchonctusingprogrammingtools researchusingrobotics game intervention tools ctskillsundergirdingprogrammingroboticsandgamedesign corresponding author email address vshutefsuedu vj shute httpsdoiorgjedurev elsevier ltd rights reserved vj shute review assessmentofcomputationalthinking scratchbasedassessments gamesimulationbasedassessment validatedctscalesforgenericusage computationalthinkingmodels ourcomputationalthinkingdefinitionandframework comparisonwithothermodels examplesofemergingmodelsofkct discussion acknowledgements references introduction middle ages select people eg priests scribes could read write world evolved increasingly people needed today rapid onset computers th century forcing analogous revolution digital literacy essential succeed complex digital st century world although dont need become software engineers majority us computers daily need understand communicate effectively harness computing power successful communication along lines called computational thinking past decade become hot topic practice thousands entries appear general google search regarding definition instructional interventions assessment entries suggest relates coding programming considering knowing program limiting according national council everyone acquire programmers include managing infor mation effectively efficiently technologies datadriven era burke obyrne kafai kim kwon lee lu fletcher sanford naidu wing workforce individuals possessing increases competitiveness united states world economic market nrc although programs claim teach coding rarely look deeply ways thinking analogous inquiry thinking scientifically set practices entwined ways looking result understandings yet existing curriculum building foundation un derstanding young learners math models needed help highlight within current classroom practices opportunities fit content within existing curricula presented current curricula however approached possessing good motivator pursue computer allan barr brylow hambrusch stemrelated majors sneider stephenson schafer flick linked creativity innovation mishra yadav deepplay repenning important applications stem areas barr stephenson sengupta kinnebrew basu biswas clark exact definition however remains elusive barr harrison conery grover pea paper discuss various definitions emerging disciplines present definition terms educators might think building solid foundation young learners break components often cited literature propose embedding assessment within curricula definitions computational thinking computational thinking stems back constructionist seymour papert papert first coined term seminal article wing explained entails designing systems understanding human behavior drawing fundamental computer wing represents ability analyze solve various arguments provided fresh perspective lationships humans computers gave rise wave oftcited definition comes cuny snyder wing noting thinking process solutions represented form effectively carried informationprocessing agent cited wing relates wellstructured illstructured ie complicated reallife whose solutions neither definite measurable researchers come definitions relative particular areas instance barr concluded involves problemsolving particular dispositions confidence persistence confronting particular berland wilensky defined ability think computerastool suggested computa tional perspectives alternative computational thinking emphasize constrained contexts vj shute review additionally defined computers ideas programs israel pearson tapia wherfel reese explicitly linking programming described definitions vary operationalization certain particularly generalizable eg berland wilensky ioannidou bennett repenning koh basawapatna israel definition evolving researchers begin aggregate knowledge goals focus paper intend explore scope complexity establish clear definition framework aid development pedagogy assessment particularly end provide current examples ideas future review addresses following questions major charac teristics components interventions trainenhance types measures assess main theoretical frameworksmodels main goal derive general framework towards assessing supporting derived extensive literature review serves guide development pedagogy assessment settings method procedure began collecting papers including peerreviewed publications proceedings plus academic report national workshop searched various databases keywords computational thinking quotation marks included specified term occurred either title abstract following online databases web sites employed searchcollection effort eric resources information center eric consists resources index current index journals eric broad popular database containing reports evaluations psycinfo site hosted american psychological association carries citations summaries scholarly journal articles book chapters books dissertations psychology related disciplines jstor database back issues core journals humanities social sciences sciences gap recently published issue journal date recent issue available jstor years google scholar web site employed search acquire specific references google scholar web site providing peerreviewed papers theses books abstracts articles academic publishers professional societies preprint repositories universities scholarly organizations started timeline wing published seminal article signaling beginning corpus projects topic collecting papers screened articles sorting con ceptual papers empirical conceptual papers discussed general features providing theoretical framework suggesting instructional practices integrate empirical tended justify specific interventions measures via qualitative quantitative designs finally integrated findings literature review empirical create competency aiming facilitate assess settings inclusion exclusion criteria approximately documents empirical well theoretical papers initially collected set total documents met criteria inclusion literature review inclusion criteria consisted relevancy documents topics article eg computational thinking skillscharacteristics processes models assessments interventions experimental nonexperimental included created summarizing full set papers collected deleted papers list following reasons poor quality described paper eg excessive statements assumptions presented inadequate support tangential focus specifically empirical papers measured something outcome pilot low quality andor reported small sample size competency refers collection knowledge attributes comprise particular construct answers question want say person end assessment variables competency usually called nodes describe set variables inferences based vj shute review results literature review review consists main parts begin addressing distinct characteristics next examine terventions support followed assessments higher end summary models characteristics computational thinking section define distinguish types thinking eg systems thinking mathematical thinking discuss cts relationship computer components wing argued mean think like computer rather engage cognitive processes goal efficiently creatively include reformulation reframe solvable familiar recursion construct system incrementally based preceding information decomposition break manageable units abstraction core aspects complex systems systematic testing take purposeful actions derive solutions abstraction main element undergirding wing people glean information discard irrelevant complex systems generate patterns find commonalities among representations wing abstraction layers must define layer clarify relationships layers involves abstraction layer abstraction whole interconnection among layers instance defining algorithm kind abstractiondthe abstraction stepbystep procedure taking input producing desired output wing addition abstraction reformulation barr argued consists organization analysis automation efficiency generalization automation making process system operate automatically efficiency means creating optimal solutions generalization involves applying strategies solve barr colleagues included certain dispositions important confidence persistence relation complex tasks ability well teams similarly described bers flannery kazakoff sullivan includes abstraction generalization trial error particularly emphasize importance debugging ie identifying fixing errors solutions expected comprehensive report national council consists elements essential universal domains nrc hypothesis testing management parallelism abstraction debugging complex domain generate hypotheses systematically understand system works impossible possibilities selecting right parameters important management involves gathering various sources processing patterns representing meaningful paral lelism refers simultaneously processing information multiple sources dimensions abstraction focuses modeling workings complex problemsystem finally debugging refers finding fixing errors building particular models recently anderson explicated components decomposition pattern recognition abstraction ie generalization repeated patterns algorithm solutions evaluation solutions ie debugging based foregoing review researchers come similar constituent components common among researchers decomposition abstraction algorithms debugging competency similarly consists decomposition abstraction algorithms debugging well iteration generalization see detailed defini tions subcategorizations justifications section differences types thinking researchers studying differences similarities types thinking eg barr grover pea section compare mathematical engineering systems thinking mathematical thinking involves application math solve math equations functions sneider harel sowder defined mathematical thinking global governs ones ways understanding mathematical thinking consists parts beliefs math processes justification solutions main commonality mathematical thinking processes wing fig shows full set shared computational mathematical thinking modeling analysis interpretation statistics probability engineering involves needed build transform things world order construct better lives bagiati evangelou well applied math making things pawley vj shute review fig similarities differences mathematical thinking adapted sneider overlap engineering includes along understanding complex systems real world wing however unlike engineering intended help humans understand complex phenomena simulations modeling transcend physical constraints wing summarize mathematical thinking engineering stem disciplines differences lie specific applications domain thinking requires solve thinking designer razzouk shute computational thinking thinking focus thinking like engineering focuses product specification requirements imposed human environment ie practical limited physical constraints enabling people solve theoretical well practical systems thinking refers ability understand various relationships among elements given environment shute masduki donmez according competency developed shute people system thinking able define boundaries problemsystem modelsimulate system works conceptually represent system computational tools make decisions based although systems thinking involve understanding modeling systems broader systems thinking focuses identifying understanding workings system whole aims solve efficiently effectively going beyond modeling understanding include algorithmic automation generalization systemsproblems conclusion umbrella term containing thinking engineering ie efficient solution systems thinking ie system understanding modeling mathematical thinking applied various relationship computer programming another area need clarification involves relationships among computer programming czerkawski lyman although originates computer wing differs computer enables people transfer domains programming berland wilensky programming ioannidou able program benefit able think computationally israel instance shute examined relationships among programming prior knowledge problemsolving within college technical participants prior programming experience learned programming via intelligent tutoring system several assessments administered measure learners incoming knowledge ie math word knowledge cognitive ie working memory information processing speed particular aspects problemsolving eg identification sequencing decomposition addition criterion measure learners programming knowledge intervention results factor analysis hierarchical regression showed working memory identification sequencing solutions best predictors programming acquisition thus programming well closely related general field computer broader programming broader com puter nrc wing includes thinking everyday line perspective lu fletcher proposed teaching even programming languages instead language based notions familiar engender acquisition like vj shute review abstraction algorithms like targeting particular relationship computer programming evolving interventions computational thinking researchers attempted leverage programming tools gamessimulations nondigital interventions teach knowledge various contexts target population ranges kindergarten un dergraduates summarizes reviewed arrayed intervention tools programming tools due close relationship computing programming appear improved via computational tools mit regarding equivalence programming cetin compared effects employing experimental language control teach programming preservice experiment lasted weeks participants completed pre posttests relative achievement attitudes toward programming additionally participants per randomly selected attend semistructured interviews results showed experimental performed significantly better control terms programming knowledge attitudinal differences promote algorithmic thinking via grover pea cooper designed sevenweek scratchbased course th th graders similar cetins gain measured pretest posttest improvement programming aim quasiexperiment see approach facetoface instruction vs facetoface plus online supported deep relative computational algorithms loops condi tionals decomposition conditions matched terms receiving comparable instruction duration time ie days per week min per day weeks findings revealed approaches lead significantly higher gains facetoface plus online performed significantly better facetoface moreover successfully transferred programming knowledge textbased programming tasks strength help young people learn think creatively reason systematically collaboratively thus suitable facilitate easy draganddrop programming method provides meaningful environment learners engage specific contexts alice carnegie mellon university functions similarly equipped readymade code blocks compared focuses creating programming projects utilized train example denner werner campe ortiz randomly assigned middle either dyadic individual programming measured ability accomplish alice tasks semesters course results demonstrated working collaboratively achieved significantly higher working alone collaboration especially beneficial minimal articles reviewed sorted intervention tools cetin grover denner werner atmatzidou demetriadis berland wilensky basu bers kim yadav setting higher middle middle middle middle middle kindergarten middle higher higher participants undergrads preservice th th graders th graders th graders sophomores preservice elementary undergrads intervention program language alice solo vs pairs alice solo vs pairs lego mindstorms lego vs virtual ctsim platform tangiblek snap small basic pps module duration weeks weeks semester semester year days days weeks week content computer course programming programming course ecology course poem computer psychology measures multiplechoice open ended questions surveys interviews multiplechoice quizzes assignments textbased coding projects surveys tasks surveys tasks questionnaires think aloud interviews log files tests questionnaires questions explanations constructing algorithms questionnaires fillintheblanks questions multiplechoice surveys questionnaires vj shute review programming experience findings consistent reported earlier experiment conducted werner denner campe kawamoto testing middle basu biswas kinnebrew similarly viewed constructs programmingrelated sequencing loops variables considered iteration decomposition abstraction debugging practices designed ctsim platform integrate ecology th graders basu employed pretestposttest effectiveness scaffolding provided virtual agent embedded ctsim experimental control learned ecology via ctsim experimental received scaffolding failed given task times scaffolding triggered case virtual agent provided conversation prompts answered choosing options turn triggered response agent agent conversations preprogrammed help struggling control functionality disabled ecology tests required choose correct answers provide rationales answers tests required predict outcomes reading program segments build algorithms constructs scenarios pre posttests showed significant gains ecology pretest covariate experimental scaffolding significantly outperformed control ecology gains effect sizes respectively another fruitful area closely related programming lego particularly popular example lego mindstorms httpwwwlegocomenusmindstorms improve year atmatzidou demetriadis twohour sessions focused developing following decomposing abstracting essential information generalizing solution creating algorithms automating procedures programming revealed measured via rubrics related quality problemsolving performance quantitative showed participants regardless improved similarly following intervention qualitative generated interviews thinkaloud protocols confirmed effectiveness solve effectively lego physical berland wilensky compared effects lego versus virtual among th graders pre posttests pseudocode programming measured gains significantly improved significant posttest difference interesting note perceived differently virtual tended perceive whole attempt decompose details physical initially focused constituent parts early learn looked teaching kindergarten bers researchers developed tangiblek curriculum httpasetuftsedudevtechtangiblek included instruction final project measure development terms debugging sequencing loops conditionals however repeated measures tasks reveal linear development kindergarten researchers speculated either kindergarten simply young intervention difficult bers therefore important teach suitable developmental stages game intervention tools agentsheets authoring tool uses game teach well promote interest computer see ioannidou details agentsheets provides low entry bar inexperienced yet restrain advanced abilities creating complex game systems com munity college summer workshops learned animate interactions among objects via programming agentsheets tasks basawapatna koh repenning webb marshall unlike measured based knowledge patterns defined object interactions collision absorption patterns represent intersection games simulations weeks intervention authors tested participants questions representing phenomenon sharing patterns games eg sledding collision participants needed identify justify usage patterns create simulations phenomena generally participants well correctly identifying patterns indicated percent correct responses however authors noted results necessarily mean could transfer knowledge game simulations scientific phenomena teaching necessarily require digital tools paperand pencil programming strategy pps created noncomputer majors kim kim kim enabled participants choose preferred visualize represent programming ideas eg via concept maps tables words symbols effects compared another engaged typical course instruction weeks typical instruction case refers regular programming course logo softronics inc pre posttests revealed paperandpencil programming strategy showed significantly better understanding interest cs via typical course instruction authors therefore argued teaching without computers might effective efficient noncomputer majors vj shute review lecturebased instructional module could change preservice understanding attitudes toward integrating classrooms yadav mayfield zhou hambrusch korb researchers tested min module focused decomposition abstraction algorithms debugging participants completed questionnaires openended questions related connections various disciplines compared notreatment control higher percentage experimental received considered thinking solve without help computers moreover realized restricted within field computer conversely control viewed narrowlydas computers complete specific computing tasks restricted subjects involving computers like computer math undergirding programming game rationale programming game improve areas emphasizes various components instance writing computer programs requires analysis eg determining goal achieve breaking constituent processes eg identifying subgoals associated steps achieve goal writing efficient programs requires abstraction generalization instance step needs repeated times efficient solution involves looping step rather writing code times additionally part programming code reused within similar minor adjustments rather rewriting program correctness efficiency program debugging necessary programming frequently promote similarly provides learners tactile experiences solve via learners need identify general problemgoal decompose eg figuring steps subgoals accomplish goal towards end learners algorithms follow instructions act accordingly act expected debugging comes play debugging requires iterative processes systematic testing modifying finally programming game gameplay entail various goals players solve smaller goals represented within levels game larger goals represented boss levels andor part narrative succeed players need derive solution plans plan fails modified plan developed sys tematically testing various plans players find effective strategy overcome challenges game moreover skillful players able adopt strategies solve thus decomposition systemic testing debugging generalization iteration required gaming important components assessment computational thinking variety definitions conceptualizations surprising accurately assessing remains major weakness area currently widelyaccepted assessment makes difficult measure effectiveness interventions reliable valid grover pea kim settle standard assessment makes difficult compare results various researchers tend apply measures various depending particular operationalization kim questionnaires surveys commonly measure knowledge andor attitudes towards eg atmatzidou demetriadis denner yadav instance cetin surveys measure preservice conceptual understanding programming constructs like arrays loops well attitudes towards computer yadav similarly surveys examine preservice understanding attitudes toward integrating teaching future kim designed questionnaire items specifically measure college sophomores logical thinking well conceptual understanding interest computer viewing core computational literacy jun han kim lee administered questionnaires computational literacy among elementary researchers conducted interviews observations participants understand development eg cetin israel researchers assessed projects related tasks instance denner werner developed performancebased assessment measure letting middle schoolers complete projects threestage task designed alice needed solve particular eg saving fairy magic forest researchers tested gains subject area knowledge incorporating disciplinary instruction eg cetin sengupta scratchbased assessments several researchers systematic assessments brennan resnick claimed scratchbased projects could support longterm making meaningful within particular context argued dynamic measure assess users years old abilities time revealing progression measuring conceptual understanding application assessment included formative analysis interviews projects formative analysis involved evaluating users portfolios see development via projects completed time interviews allowed researchers dig deeper thinking processes users sets projects varying difficulty employed vj shute review performance measures set included tasks difficulty representations users choose task set describe debug align particular scratchbased course middle schoolers grover designed system formative summative assessments support measure multiplechoice items quizzes throughout course resembled pseudo code items consolidate knowledge programming timely feedback serving explain various ideas procedures course assignments completed evaluated specific rubrics summative measure final multiplechoice items plus openended questions along final project completed partner addition researchers developed based ap programming exams whether could transfer learned real textbased pro gramming code another scratchbased assessment called pect progression early computational thinking designed elementary seiter foreman represents guideline measure facets first facet included evidence variables collected directly command categories embedded eg operators conditionals second facet pattern variables eg motion interactivity broader specific evidence pseudo code library last facet decomposition abstraction algorithms proficiency levels ie basic developing proficient per facet measured according rubrics gamesimulationbased assessment researchers proposed assessing via pattern analysis ctpa schools patterns abstract programming related object interactions games simulations basawapatna ioannidou building object interactions games required patterns defined ioannidou repenning subsequently refined patterns aspects measure transfer gaming modeling scientific phenomena stem courses ctpa generate spider weblike graphic reports pat terns comparing products exemplars type report provides visual information nature degree abilities aspects need improvement reports time demonstrate progression thus could provide instructional support given access graphic reports validated scales generic usage aforementioned assessments designed solely purpose particular based specific inter vention recently researchers developed scale measure romangonzalez perezgonzalez jimenez fernandez scale includes items takes min complete focuses computational like directions sequences loops conditionals simple functions reliability scale authors tested validity among spanish th th grades results showed significant correlations standardized tests mental abilities problemsolving problemsolving explained variance scale mental ability explained thus authors concluded similar less aligned reasoning spatial verbal abilities similar efforts conducted reported korkmaz cakir ozden researchers developed scale comprised items measuring factors ie creativity cooperation algorithmic thinking critical thinking first conducted exploratory factor analysis confirmatory factor analysis among turkish college results showed good fit indices evidence items measured targeted constructs reliabilities factors ranged scale measures differently previous researchers operationalized differently based framework described section conclusion review assessments showcases pressing need reliable valid assessment settings researchers determine whether interventions effective rather looking gains attitudinal changes via homegrown measures assessment calls dynamic information reflect learners abilities progression time computational thinking models reviewed components interventions assessments section examines theoretical frameworks definitions assessments agreedupon models frameworks atmatzidou demetriadis section examine models proposed researchers first atmatzidou demetriadis presented simple descriptive based operationalization previous consists facets abstraction generalization algorithms modularity decom position provides examples behaviors demonstrate evidence facet see atmatzidou demetriadis details briefly abstraction means distilling core patterns complicated systems generalization involves applying problemsolving strategies contexts algorithms refer ordered stepsin structions implement solutions modularity means automation problemsolving solutions decomposition entails breakdown complex systemsthings manageable pieces second consists abilities incorporated courses like math social language arts see barr stephenson defines core facets ie collection vj shute review analysis representation decomposition abstraction algorithms automation parallelism simulation various disciplines facets representations subjects eg representing charts tables math representing linguistic patterns language arts however specific demonstrations facets within particular disciplines clearly stated paper moreover provided examples teaching practices vague actually employ example abstraction class described modeling physical entity weakness stems clear definitions per facet making operationalization difficult failure distinguish abilities eg abstraction concept ability thus room improvement serving guideline brennan resnick presented framework within context facilitate catego rized areasdconcepts practices perspectives shows summary framework review paper integrating settings lye koh based brennan resnick framework later zhong wang chen li revised see details adding instruction iteration practices rephrased perspectives emphasize creativity collaboration however elaborate modifications makes hard interpret revised fourth recent aims merge regular classroom instruction weintrop researchers analyzed lesson plans math courses coding teaching practices related facets categorized specific facets broader practices refined categorization consulting lesson plan designers inservice experts curriculum finally came taxonomy containing categories practices see taxonomy based specific classroom presented concrete examples classroom showing lesson plans designed following tax onomy tailored stem courses shows promise regard integrating secondary however needed validate lacking consistent might cause designing interventions support assessing knowledge various settings leads next part paper namely proposed com petency guide assessment support computational thinking definition framework drawing aforementioned definitions models define conceptual foundation required solve effectively efficiently ie algorithmically without assistance computers solutions reusable contexts stated earlier components arise often literature abstraction decomposition algorithms debugging attempts understand cognitive processes underlying facets associated behaviors help us competency assessment additionally identify iteration generalization important devel opment emphasizes importance approaching systematic decomposition involves breaking complex smaller parts systematic processes tackle smaller iterative systematic debugging ensures part smaller solved efficiently loose ends abstraction act finding patterns within solutions thus position generalize solutions sets similar finally algorithm allows development reusable toolsprocedures classes based prior categorized main facets decomposition abstraction algorithms debugging iteration generalization facets described framing underpins evidenced variety subject areas including mathematics even english language arts summary framework proposed brennan resnick practices perspectives sequences instructions computer execute behaviors loops repeat instruction specified times parallelism concurrence multiple instructions events triggers certain actions happen create interactive environments conditionals constraints execution instructions allowing outcomes operators mathematical string operations storage retrieval update incremental iterative iterative processes implement solutions step step testing debugging trial error processes remove malfunctions warranted reuse remix building reusable instructions building products others abstraction modularity modeling complex systems basic elements expressing perception computation expression creation connecting perception computation interacting working others questioning raising questions technology solve real life vj shute review taxonomy stem courses adapted weintrop category practices modeling simulation computational systems thinking comparison models practice collection creation manipulation analysis visualization conceptual understanding testing solutions assessment construction solution preparation programming tools selection solution evaluation solution development abstraction debugging system investigation understanding relationships multilayered thinking communication system management definition gather multiple computational tools generate large complex systems reorganize meaningful computational tools analyze draw valid conclusions communicate present multiple ways understand deeply modeling solve hypothesis testing evaluate effectiveness models select essential elements models implement models extend existing models decompose reframe suitable computational tools possess basic programming knowledge evaluate pros cons plausible computational tools assess pros cons possible solutions solutions applied wide range distill information identify fix errors understand system functions whole understand operation interrelationship elements system think multiple perspectives levels convey information effectively efficiently define scope systems manage complexity focuses underlying conceptual foundation required approach via perspective kind perspective highlighted supported current subjects contrast models focus specific subject area brennan resnick limit related coding facets hierarchical foundation comprised programming like loops conditionals next layer relates computing practices built conceptual knowledge whereas highest layer represents perspectives computing eg expression creation communication weintrop derived teaching practices occur stem courses facets represent collection possible classroom select ones facilitate acquisition thus restricted stem course settings feel foundational basis starts much earlier analogous scientific inquiry mathematic reasoning examples emerging models competencybased knowledge strives inform assessment methods measure foun dational understandings learners several starting attempts measure settings present several examples ending illustration coauthors assessmentrelated conceptual foundation several important facets namely decomposition abstraction algorithm noted earlier several studying learners coding tool called dr httpwww drscratchorg currently beta basis analyze code quantifying usage loops sequences logistical facets coding outlined brennan resnick researchers sri grover designed implemented middle curriculum called foundations advancing computational thinking fact fact strives get comprehensive picture examining cognitive interpersonal intrapersonal variables fact uses pedagogical strategies support transfer blockbased textbased programming along formative summative assessments including quizzes tests well open ended programming assignments related acquisition computational thinking findings show stu dents ages fact curriculum experience improved algorithmic understanding computing transfer textbased programming context building grover see stemforallvideohallcompresentations suggests framing variables expressions loops algorithms vela prepare young learners underway edge terc involves studying development within logic puzzle game zoombinis edge gamebased behavior predict implicit knowledge help support explicit stem terc nonprofit studying math innovations since gaming environments edge founded stem digital games summary facets definitions vj shute review facet decomposition abstraction algorithms debugging iteration generalization definition dissect complex problemsystem manageable parts divided parts random pieces functional elements collectively comprise whole systemproblem extract essence complex system abstraction subcategories datacollectionandanalysiscollectthemostrelevantandimportantinformationfrommultiplesourcesandunderstandthe relationships among multilayered datasets pattern recognition identify patternsrules underlying datainformation structure modeling build models simulations represent system operates andor system function future logical ordered instructions rendering solution instructions carried human computer subcategories algorithm create series ordered steps solve parallelism carry certain steps time efficiency fewest steps solve removing redundant unnecessary steps automation automate execution procedure required solve similar detect identify errors fix errors solution repeat processes refine solutions ideal result achieved transfer wide range situationsdomains solve effectively efficiently classroom rowe asbellclarke baker implicit knowledge refers knowledge yet formalized expressed learner evident actions behaviors zoombinis players engage cycles strategy development evidenced patterns game game players challenged sort zoombinis according underlying logic rules eg puzzle named allergic cliffs reject zoombinis certain features combination features upper levelsdsee fig players typically move trialanderror testing arbitrary zoombinis systematic testing pattern problemsolving strategies researchers identify evidence instance players consistently zoombinis common features eg glasses help identify pattern solve fig screen capture allergic cliffs zoombinis vj shute review puzzle change trialanderror systematic testing provides evidence decomposition players accumulate evidence see common patterns start testing towards partial solution eventually demonstrating ability abstract patterns underlying rule puzzle successful players exhibit repeated strategies algorithms implemented collection puzzles example players adopt strategy trying variable time implementing singular pieces information final solution pattern observed multiple puzzles problemsolving situations validate facets function playing zoombinis edge empirical games designed set online assessment items focus several fundamental facets decomposition abstraction algorithm researchers currently completing validation elementary middle learners assessments conceptually structurally elementary middle stu dents differed terms difficulty eg based variables consider pattern size array abstraction example items shown paper elementary version assessment assessment decomposition uses series progressively harder puzzles similar game called mastermind board game developed meirowitz see httpsboardgamegeekcomboardgame mastermind learners must feedback game figure values per graphical feature color andor shape andor pattern required solve puzzle see fig left side initial right side receiving feedback current learner needs drag object time box find correct color difficult levelsdalso shape pattern tries possible incorrect choices placed solutions box feedback per object represented green check per correct colorshapepattern red incorrect attribute abstraction patternmatching puzzles require learners identify underlying rule learners drag objects pool right gray cells left complete pattern thus applying inferred rule colored shape appear solution see fig algorithm players must align sequence arrows advance guide character along path maze fits specified criteria fig sequencing task requires learner insert directional arrows along iterations warranted guide leprechaun pot gold fewest steps possible avoiding certain obstacles finally assessment zoombinis includes set general pattern recognition items ravens progressive matrices rpm raven baseline learners ability infer apply patterns increasingly complex situations raven pointed rpm focuses components general cognitive abilityeeductive reproductive ability eductive ability involves making sense chaos generating highlevel schema handle complexity reproductive ability ability recall reproduce information explicated rule application general behavior following basic rules order solve outward expression solvers perception features via eductive reproductive abilities example shown fig item learners click drag correct option among possible options bottom complete pattern topdwhere solution applies horizontally vertically diagonally assessments strive examine fundamental cognitive underpinnings abstract noncontextual manner edge assessments combination mining game behaviors zoombinis observations classroom get full picture grades discussion review analyzed existing definitions focus literature could help describe conceptual foundation guide assessment settings discussed similar distinct ways thinking eg mathematical thinking systems thinking described relationships fig simple item assessment decomposition vj shute review fig example item assessment abstraction fig simple sequencingalgorithmic item assessment computer reviewed interventions assessments measure learners ranging kindergarten college finally presented examples striving measure development experiences learners goal review paper synthesize literature order provide general framework including definition facets elaboration per facet guides assessment vj shute review fig example assessment item ravens pattern identification review literature shed light gaps instance generally agreedupon definition missing literature along specification components wing inconsistent term usage occurs papers conflating computer computer programming czerkawski lyman israel immaturity field results ambiguity compounded looking generally unfamiliar difficulty finding connections current curricula designing developing reliable valid assessment key successful embedded multiple disciplines grover pea lacking standard definition operationalize consequently leads measurements vary greatly makes results less convincing certainly difficult compare another issue needs resolved concerns difficulty judging whether inclass interventions actually achieve desired results settle researchers pointed difficulty assessing class rooms called realtime assessment provide progression per support struction bers wolz stone pearson pulimood switzer framework proposed guideline assessment tasks elicit evidence specific examples present measured zoombinis fact intended highlight possibilities transfer needed bers identify application domains czerkawski lyman efforts made researchers ioannidou tried examine transfer acquired games math courses similarly repenning aimed investigate transferred games creation simulations scientific phenomena grover found could apply computational learned specific textbased programming languages quite promising case longterm retention along application contexts domains underresearched final area deserving attention involves differences development females often un derrepresented stem related subjects particularly reach college researchers consider utilizing motivate learners especially females major fields eg grover pea kazimoglu kiernan bacon mackinnon repenning however results examining differences inconsistent atmatzidou demetriadis reported improved significantly intervention ultimately reached tend spend significantly time online resulting vj shute review better performance grover however differences reported werner yadav computational thinking needs demystified eg barr stephenson towards end developed definition shown examples considers logical thinking simply knowing pro gramming language particularly focuses conceptual development required engage decomposition abstraction algorithmic debugging iteration generalization examines performancebased competencies related facets strengthened emphasized within existing eg stem curricula presented paper intended broadly applicable specific enough inform measurement learningdoverall facet diagnostic purposes current progress validate claim anticipate next years bring empirical help refine wideranging contexts acknowledgements receive specific grant funding agencies public commercial notforprofit sectors coauthor xxx gratefully acknowledges funding us national foundation intellectual support edge terc team closely related grant nsfdrldrk references allan barr brylow hambrusch march computational thinking courses proceedings st technical symposium computer anderson call computational thinking undergraduate psychology psychology teaching httpdxdoiorg atmatzidou demetriadis advancing computational thinking differences autonomous systems httpdxdoiorgjrobot bagiati evangelou practicing engineering building blocks identifying engineering thinking european early childhood journal httpdxdoiorgx barr harrison conery computational thinking digital everyone leading technology barr stephenson bringing computational thinking involved role computer community inroads httpdxdoiorg basawapatna koh repenning webb marshall march recognizing computational thinking patterns proceedings nd technical symposium computer basu biswas kinnebrew learner modeling adaptive scaffolding computational thinkingbased environment user modeling useradapted interaction berland wilensky comparing virtual physical environments supporting complex systems computational thinking journal technology httpdxdoiorgsx bers flannery kazakoff sullivan computational thinking tinkering exploration early childhood curriculum computers httpdxdoiorgjcompedu brennan resnick april frameworks studying assessing development computational thinking proceedings annual meeting american association vancouver canada burke obyrne kafai computational participation understanding coding extension literacy instruction journal adolescent adult literacy httpdxdoiorgjaal cetin preservice introduction computing exploring utilization journal computing httpdxdoiorg advance online publication cuny snyder wing demystifying computational thinking noncomputer scientists unpublished manuscript referenced httpwww cscmueducompthinkresourcesthelinkwingpdf czerkawski lyman iii exploring issues computational thinking higher techtrends httpdxdoiorg denner werner campe ortiz pair programming conditions advantageous middle journal technology httpdxdoiorg grover april engineering middle computational thinking paper presented annual meeting american association orleans la grover pea computational thinking ke review state field researcher httpdxdoiorg grover pea cooper designing deeper blended computer course middle computer httpdxdoiorg harel sowder advanced mathematicalthinking nature development mathematical thinking httpdxdoiorgsmtl ioannidou bennett repenning koh basawapatna april computational thinking patterns paper presented annual meeting american association orleans la israel pearson tapia wherfel reese supporting learners schoolwide computational thinking crosscase qualitative analysis computers httpdxdoiorgjcompedu jun han kim lee assessing computational literacy elementary national korea assessment evaluation accountability httpdxdoiorgs kazimoglu kiernan bacon mackinnon serious game developing computational thinking introductory computer programming procediasocial behavioral sciences kim kim kim paperandpencil programming strategy toward computational thinking nonmajors solution journal computing httpdxdoiorgecb kim kwon lee computational modeling simulation automation concept programming course inter national journal computer theory engineering httpdxdoiorgijctev korkmaz cakir ozden validity reliability computational thinking scales cts computers human behavior lu fletcher march thinking computational thinking sigcse bulletin vj shute review lye koh review teaching computational thinking programming next computers human behavior httpdxdoiorgjchb mishra yadav art algorithms rethinking technology creativity st century techtrends national council committee workshops computational thinking report workshop scope nature computational thinking washington dc national academies press papert mindstorms computers powerful ideas york basic books papert situating constructionism papert harel eds constructionism cambridge mit press pawley universalized narratives patterns faculty members define engineering journal engineering raven manual ravens progressive matrices vocabulary scales supplement british standardisation standard progressive matrices mill hill vocabulary scales together comparative earlier uk us canada germany ireland san antonio tx harcourt assessment raven ravens progressive matrices change stability culture time cognitive psychology razzouk shute thinking important review repenning webb koh nickerson miller brand repenning scalable game strategy bring systemic computer schools game simulation creation transactions computing toce httpdxdoiorg romangonzalez perezgonzalez jimenezfernandez cognitive abilities underlie computational thinking criterion validity computational thinking computers human behavior rowe asbellclarke baker serious games analytics measure implicit loh sheng ifenthaler eds serious games analytics methodologies performance measurement assessment improvement switzerland springer international publishing sanford naidu computational thinking grade contemporary issues cier dxdoiorgciervi seiter foreman august modeling progressions computational thinking primary grade proceedings ninth annual international conference international computing sengupta kinnebrew basu biswas clark integrating computational thinking agentbased computation theoretical framework information technologies httpdxdoiorgsx settle franke hansen spaltro jurisson rennertmay july infusing computational thinking middleand highschool curriculum proceedings th annual conference innovation technology computer shute likely acquire programming journal computing shute masduki donmez conceptual framework modeling assessing supporting competencies within game environments technology instruction cognition sneider stephenson schafer flick computational thinking classrooms teacher weintrop beheshti horn orton jona trouille defining computational thinking mathematics classrooms journal technology httpdxdoiorgs werner denner campe kawamoto february fairy performance assessment measuring computational thinking middle proceedings rd technical symposium computer wing computational thinking communications wing computational thinking thinking computing philosophical transactions royal society mathematical physical engineering sciences httpdxdoiorgrsta wing computational thinking unpublished manuscript pittsburgh pa computer department carnegie mellon university retrieved httpswwwcscmueducompthinkresourcesthelinkwingpdf wolz stone pearson pulimood switzer computational thinking expository writing middle transactions computing toce yadav mayfield zhou hambrusch korb computational thinking elementary secondary teacher trans actions computing toce httpdxdoiorg zhong wang chen li exploration threedimensional integrated assessment computational thinking journal computing httpdxdoiorg 
developing computational thinking classroom framework june working authors prof paul curzon queen mary university london electronic engineering computer teaching london computing project httpwwwteachinglondoncomputingorg funded mayor london department london schools excellence fund mark dorling bcs chartered institute computing network excellence project httpwwwcomputingatschoolorguk funded department industry partners awarding bodies digital schoolhouse london project httpwwwdigitalschoolhouseorguk funded mayor london department london schools excellence fund thomas ng west berkshire council improvement adviser ict assessment dr cynthia selby bay house sixth form gosport hampshire southampton university southampton dr john woollard southampton university southampton bcs chartered institute barefoot computing project httpwwwbarefootcasorguk funded department copyright computing licensed creative commons attributionnon commercial license see httpcreativecommonsorglicensesbync details introduction computational thinking sits heart statutory programme computing quality computing equips pupils computational thinking creativity understand change world department document aims support teach computational thinking describes framework helps explain computational thinking describes pedagogic approaches teaching gives ways assess pupil progression previous ict curriculum often demonstrated example software usage pupil produced example poster partly due needs business world office precious curriculum time however several weaknesses firstly countrys economy depends technological innovation effective technology secondly pace technology organisational change fast ict learnt date pupil leaves thirdly technology invades aspects life typically taught office practice small part technology today contrast computing curriculum enriched computer element computer academic discipline body knowledge equip pupils become independent learners evaluators potentially designers technologies studying computer pupils gain knowledge unique thinking computational thinking allows pupils understand digital world deeper physics equips pupils better understand physical world biology biological world simon peytonjones gives account computer computational thinking core life transferable talk filmed tedxexeter peytonjones prepare pupils understand consequences technological change adapt technologies technologies even jobs havent yet invented subject need taught pupils need techniques ask able answer question computational thinking supports computational thinking set mental convert complex messy partially defined real world form mindless computer tackle without assistance human bcs today however interpretation led popular media implying computing curriculum focuses coding crow nettleford gives misleading message especially discipline contrast framework presented aims support understanding computational thinking full breadth depth subject computing offers easily effectively integrate classroom practice framework interconnected stages development computational thinking framework stage definition stage stage classroom techniques stage assessment overview subsequent sections stage definition support sharing curriculum materials classroom practices agreed definition suitable classroom needed interpretation forwarded professor jeannette wing originally popularised idea computational thinking defines thought processes involved formulating solutions solutions represented form effectively carried informationprocessing agent cuny snyder wing cited wing solutions carried processing agent whether human computer combination wing chose definition based wings original definition gained consensus amongst academics emphasis pupils performing thought process production artefacts evidence therefore fits direction change current curriculum development stage next stage define core involved computational thinking based review academic references selby woollard suggest following key algorithmic thinking evaluation decomposition abstraction generalisation outline examples giving linked classroom techniques next section algorithmic thinking getting solution clear definition steps nothing happens magic rather coming single answer like pupils set instructions rules followed precisely whether person computer leads answers similar example learn algorithms multiplication computer follow rules taught precisely get answer multiplication algorithm dont multiplication every time faced evaluation process ensuring algorithmic solution good fit purpose various properties algorithms need evaluated including whether correct fast enough economic resources easy people promote appropriate experience tradeoffs need made rarely single ideal solution situations specific often extreme focus attention detail computational thinking based evaluation example developing medical device deliver drugs patients hospital need sure always delivers amount drug set quickly enough start pressed however need sure nurses able set dose quickly easily without making mistakes wont frustrating irritating patients nurses likely tradeoff made speed entering numbers helping avoid mistakes made judgement quick easy made systematically rigorously decomposition thinking algorithms artefacts processes systems terms parts separate parts understood solved developed evaluated separately makes complex easier solve large systems easier example developing game people create levels independently provided key aspects agreed advance decomposition original task part developed integrated later process simple arcade might decomposed several parts lifelike motion character scrolling background setting rules characters interact abstraction another make systems easier think simply involves hiding detail removing unnecessary complexity choosing right detail hide becomes easier without losing anything important make easier create complex algorithms well whole systems key part choosing good representation system representations make things easy example play cards word shuffle every player understands shuffle means putting cards random order word abstraction type abstraction works programming implementing shuffle computer game means giving randomise cards refer shuffling throughout program understand meant without think actually done program needed program include description somewhere shuffling done example illustrating difference representation make consider art project pupils studying monet could take digital picture haystack painting gallery created representation computer pixels easily manipulate digital representation ways would hard representation real world example colours could changed algorithm series related versions painting could created generalisation quickly based previous solved take algorithm solves specific adapt solves whole class similar whenever solve kind apply general solution example pupil uses floor turtle draw series shapes square triangle pupil writes computer program draw shapes want draw octagon sided shape square triangle spot relationship sides shape angles involved write algorithm expresses relationship uses draw regular polygon summary techniques fits wellestablished system life cycle computing projects business academic scientific communities practice together rich interdependent solve emphasis practical techniques thought processes production artefacts evidence stage classroom techniques descriptions highlevel although important dont explain computational thinking embedded classroom integrated pedagogy therefore next step identify learner behaviours associated concept examples techniques algorithmic thinking writing instructions followed given order sequences achieve desired effect writing instructions arithmetic logical operations achieve desired effect writing instructions store move manipulate achieve desired effect variables assignment writing instructions choose constituent instructions selection achieve desired effect writing instructions repeat constituent instructions loops iteration achieve desired effect grouping naming collection instructions welldefined task make instruction subroutines procedures functions methods writing instructions involve subroutines copies achieve desired effect recursion writing sets instructions followed time agents computers people achieve desired effect parallel thinking processing concurrency writing set rules achieve desired effect declarative languages standard notation represent creating algorithms hypothesis creating algorithms give good though always best solutions heuristics creating algorithmic descriptions real world processes better understand computational modelling designing algorithmic solutions take account abilities limitations desires people evaluation assessing algorithm fit purpose assessing whether algorithm right thing functional correctness designing running plans interpreting results testing assessment whether performance algorithm good enough comparing performance algorithms thing making tradeoffs conflicting demands assessment whether system easy people usability assessment whether system gives appropriately positive experience user experience assessment set criteria stepping algorithmscode step step dry run tracing rigorous argument justify algorithm works proof rigorous argument check usability performance algorithm analytical evaluation methods involving observing system assess usability performance empirical evaluation judging algorithmic solution good enough even perfect assessing whether solution meets specification criteria assessing whether product meets general performance criteria heuristics decomposition breaking artefacts whether objects processes solutions systems abstractions constituent parts make easier breaking simpler otherwise identical versions solved recursive divide conquer strategies computational thinking associated techniques examples algorithmic thinking evaluation decomposition generalisation abstraction found stages context determines relevance challenge therefore tried attribute computational learner behaviours particular key stages phases would imply agedependent capability dependent important emphasise computational thinking content subject computing subject content set national curriculum programme computational thinking enable learners access parts subject content stage assessment final stage needed assess increasing competence pupils computational thinking done adapted version existing subject framework computing subject support classroom computing published assessment framework called computing progression pathways dorling walker sets major knowledge areas computing gives specific indicators increasing levels mastery subject areas assessment framework produced small team authors reviewers academics based classroom experiences interpretation breadth depth content national curriculum computing programme breadth affords opportunity view subject computing whole rather separate subject strands computer digital literacy information technology proposed royal society assessment framework identifies dependencies interdependencies principles well subject strands abstraction reducing complexity removing unnecessary detail choosing represent artefacts whether objects processes systems allow manipulated useful ways hiding full complexity artefact whether objects processes solutions systems hiding functional complexity hiding complexity example structures identifying relationships abstractions filtering information developing solutions generalisation identifying patterns commonalities processes solutions adapting solutions parts solutions apply whole class similar transferring ideas solutions area another separate pathways given areas algorithms programming development representation hardware processing communication networks information technology example pathway around subject area algorithms lowest involves understanding algorithm ability express simple linear algorithms care precision moves levels able express complicated algorithms selection loops highest able algorithms make recursion well understanding solved computationally assessment framework presented outcomes organised separate subject strands computer digital literacy information technology dorling walker version developed incorporate provision computational thinking selby dorling woollard includes description acknowledge progression reward performance mastering content computing programme ideas computational thinking dorling walker example algorithmic thinking demonstrated algorithms programming development pathways constructing appropriate search filters representation demonstrating understanding fetchexecute cycle hardware processing see figure example expect see computing progression pathways computational thinking figure mapping outcomes computing progression pathways stage computational thinking framework plan lessons planning teaching scheme subject refer planningteachingevaluating cycle computational thinking included planning stage steps within planning phase lesson planningteachingevaluating cycle see figure step determine start unit stage well possible topics column header names progression pathways assessment framework scheme covering repeat steps planning lesson unit step decide outcomes lesson computing progression pathways assessment framework stage enable pupils move closer completing achieving step predefined mapping computing progression pathways assessment framework identify possible associated computational thinking stage step computational thinking identify possible techniques incorporate highlight part chosen classroom stage figure mapping stages framework important note important step process last step step pupils evidence computing progression pathways assessment framework outcome mapped computational thinking necessarily mean pupils performed computational thinking completion evidence computational thinking occurred case illustrate application framework case based around lesson authors dorling classroom subsection highlight parts draw computational thinking classroom could drawn explicitly example discussion end pupils reflect computational thinking topic networking communications binary protocol transfer information first lead discussion aiming draw networks important discuss applications pupils regular basis search engine network file shares applications completely changed things lead pupils ask actually happens wire make information go back forth recap remind pupils previously studied understood layers involved computer architecture applications operating system hardware abstraction functionality move hardware operating system applications move increasing layers system abstraction hides messy details introduce pupils layers network architecture application transport network point similarity computer architecture layers abstraction functionality similar move similar layers abstraction network transport layer applications hides messy details generalisation solution applying technique similar transferred technique analysis layers computer architecture network architecture remind pupils understanding denary decimal numbers stored binary numbers denary numbers abstraction binary code hide detail numbers actually stored suggest could knowledge invent transportation layer protocol abstraction denary numbers conceal complexity binary representation give pupils simple circuit ie battery wires lamp ask transfer decimal room friend lamp learners perform conversion binary transfer room encourage think tasks involved sender receiver though related things recipient receive assemble string binary convert binary back denary decomposition identification highlevel steps necessary accomplish whole task algorithmic thinking development ordering highlevel steps necessary accomplish whole task working detailed steps obviously without agreed protocol complete mayhem pupils together agree protocol light light confusion continues pupils realise time clock element needed start point known light either seconds second pause evaluation functional correctness pupils reflect even mayhem initial solutions realise need improve algorithmic thinking trial feedback development loop pupils heuristic development algorithm alternative pupils yet fully grasped binary look historical communication methods heard morse code smoke signals view identifying similarities current challenge generalising solution another identifying case representation letter transformed another morse code recognising pattern solutions standard protocol agreed amongst whole class achieved discussion interoperability every pair chosen communicating given series numbers first identifying person eg tableindividual next message person rather actual ip address stage abstraction understanding ip address name machine pupils struggle difficult long string binary likely come idea chunk binary analogous packet abstraction inventing concept chunk packet chunks sent received reassembled algorithmic thinking working detailed instructions make chunking mastered discuss ip addressing analogous uk post code system generalising solution area another recognising pattern solutions network packet sending sending letter post future opportunities built foundations example visual packet tracing tools consider location web servers around world digital literacy questions posed breaking law internet considering country crime committed discussed pupils opportunities techniques associated computational thinking indicated order demonstrate understanding programme content depending upon understanding expressed observed pupil behaviours possible award progress subject content computing pathways following levels pink algorithms understands algorithm able express simple linear nonbranching algorithms symbolically demonstrates care precision avoid errors information technology talks makes changes improve yellow algorithms designs simple algorithms loops selection ie statements uses logical reasoning predict outcomes detects corrects errors ie debugging algorithms information technology talks makes improvements solutions based feedback received orange algorithms recognises share characteristics algorithm solve representation understands difference information communications networks understands difference internet internet service example world wide web information technology makes appropriate improvements solutions based feedback received comment success solution blue algorithms designs solutions decomposing creates subsolution parts purple representation understands bit patterns represent numbers images knows computers transfer binary communications networks understands transmission digital computers networks including internet ie ip addresses packet switching algorithms identify similarities differences situations solve information technology uses criteria evaluate quality solutions identify improvements making refinements solution future solutions summary engage pupils lessons get best important understand topics materials supporting previous ict curriculum focused taught perhaps pupils produced perhaps spreadsheet thinking pupils producing artefact given secondary considerations often assessment objective qualification examination instead realworld reason criticism approach identified lack focus understanding deeper solved systems made royal society fourstep framework set gives practical understand computational thinking introduce ideas classroom context support planning increase opportunities pupils computational thinking assess progress achieved considering challenge setting learners outset pupils employ variety computational thinking abilities described understanding solve hand expressed evidence actual subject could pupils produce artefact pupils understand express write verbalise behaviour observed generalising matches outcome statements computing progression pathways assessment framework figure maps stages development described notion focusing figure mapping stages framework references bcs chartered institute call evidence uk digital taskforce available httppolicybcsorgsitespolicybcsorgfilesbcsresponsetoukdstcallforevidencefinalpdf accessed department national curriculum england framework document available wwweducationgovuknationalcurriculum accessed dorling walker computing progression pathways available httpcommunitycomputingatschoolorgukresources accessed dorling walker computing progression pathways grouped cs dl available communitycomputingatschoolorgukresources accessed dorling walker computing progression pathways computational thinking available httpcommunitycomputingatschoolorgukresources accessed nettleford primary learn write computer code available httpwwwbbccouk newsukenglandlondon accessed peytonjones teaching creative computer available httptedxexetercomsimonpeytonjonesteachingcreativecomputerscience accessed royal society shut restart forwards computing uk schools available royalsocietyorgmediaeducationcomputinginschoolscomputinginschoolspdf accessed selby dorling woollard evidence assessing computational thinking httpseprintssotonacuk accessed selby woollard computational thinking developing definition available httpeprintssotonacuk accessed wing computational thinking commun available httpdlacmorgcitationcfm id accessed wing notebook computational thinking link pittsburgh pa carneige mellon available httpwwwcscmuedulinkresearchnotebookcomputationalthinkingwhatandwhy accessed 
kids code know exploratory repository efthimia aivaloglou felienne hermans eaivalogloutudelftnl ffjhermanstudelftnl abstract blockbased programming languages like alice blockly becoming increasingly common introductory languages programming substantial showing visual programming environ ments suitable teaching programming people paper explore characteristics programs end scraped public repository retrieved projects present analysis projects dimensions initially look types blocks size projects investigate complexity abstractions programming finally detect code smells large scripts dead code duplicated code blocks results show programs small however programs consisting sprites exist programming abstrac tion like procedures commonly programs suffer code smells including large scripts unmatched broadcast signals keywords blockbased languages programming practices code smells static analysis introduction programming language developed teach programming enabling create games interactive animations public repository programs contains million projects blockbased language users manipulate blocks program blockbased languages existed since eighties recently found adoption tools programming addition alice blockly httpsdevelopersgooglecomblockly permission make digital hard copies part personal classroom granted without fee provided copies made distributed profit commercial advantage copies bear notice full cita tion first page copyrights components owned others must honored abstracting credit permitted copy otherwise publish post servers redistribute lists requires prior specific permission andor fee request permissions permissionsacmorg icer september melbourne vic australia acmisbn doi httpdxdoiorg app inventor blockbased aimed novice programmers several shown blockbased languages powerful tools teaching programming previous works involving static analysis programs evaluated application various programming con cepts projects recent works focused bad programming practices within programs automated quality assessment tools proposed identifying code smells bad programming prac tices recent controlled experiment found long scripts code duplication decrease novice program mers ability understand modify programs goal paper obtain understanding people program analyzing program ming artifacts ie saved shared projects aim quantitatively evaluate pro gramming abstractions moreover knowing bad programming habits code smells harm ful want explore whether common address goal answer following ques tions rq size complexity characteristics programs rq coding abstractions programming features commonly programming environment rq common code smells programs based project repos itory scraping list recent projects ob tained public projects performed source code analysis best knowledge first largescale exploratory programs contributions paper follows apublicdatasetofnonemptyscratchprojects section evaluation set terms size com plexity programming smells section discussion implications findings ed ucational programming language designers section httpsscratchmiteduexploreprojectsall software engineering delft university technology mekelweg cd delft netherlands raloecwtamiontshaaecrknsnotonowedxloecdlsugoseisvfoetrhragotoytvahelitrsyncmforennetrtripibguhrtitpotnosepwsuaobsnlilasyuhthoorredprorduccoeatuhtihsoaretidclbey oarntoemal ployee contractor affiliate national government government blockbased programming language aimed developed mit create games interactive animations available standalone web application main programming environment refer reader extensive overview sprites code organized sprites dimen sional pictures associated code allows users bring sprites life var ious ways example moving plane say think words sentences via text balloons make sounds grow shrink switch costumes scripts sprites multiple code blocks called scripts possible single sprite multiple scripts initiated event case scripts executed simultaneously events eventdriven motions sounds changes looks sprites initiated events called hat blocks canonical event green flag clicked activated clicking green flag top user interface addition green flag events possible including key presses mouse clicks input computers microphone webcam signals events within usergenerated users broadcast message example sprites touch sprites react receive hat block custom blocks users define blocks users name called custom blocks creation custom blocks equiv alent defining procedures languages term procedures common related refer custom blocks procedures remainder paper procedure parameters textual numeric boolean user defines procedure hat block called define appears users fill implementation procedure dataset main focus understand peo ple program analyzing characteristics projects answer questions conducted empirical quantitative evaluation project collected project repository following paragraphs describe dataset pro cess tools analyzing methods followed detecting code smells dataset order collect set projects dataset built web scraping program scraping program called kragle starts reading projects page thus obtains project identifiers projects httpwikiscratchmiteduwikihat block recently shared subsequently kragle retrieves json code listed projects ran kragle march nd hours time obtained little projects failed parse analyze projects due technical difficulties json files kragle well scraped projects analysis files available obtained projects parsed json files according specification format resulted list blocks per project sprites stage project cross referenced blocks wiki determine shapes category blocks example green flag clicked hat block events category analysis scraped project including list blocks parameters imported relational database sql queries made available filter ing aggregating extracting statistical required address questions randomly sampled manually inspected edge cases results example empty overly complex projects cases provided part dataset answer rq measured size projects based blocks scripts sprites cal culated descriptive statistics presented section measuring complexity scripts mccabe cyclomatic complexity metric quantita tive measure independent paths programs source code commonly calculated per script counting decision points script plus decision points supports else blocks rq code blocks categories perform statistical analysis applied program ming abstractions similarly consider certain blocks indicate pro gramming abstraction concept certain project section present results related utilization procedures variables loops conditional state ments user interactivity synchronization rq focused types code smells dupli cated code dead code large script large sprite duplicated code smell analysis first step define consider code clone context pro gramming script composed set blocks type connected repeated within sprites project identi fication clones take account values parameters blocks blocks differ values parameters con sidered equal investigated case clones parameter values refer ex act clones next step analysis determine minimum size scripts considered clones instead incidentally similar examined detected clones script sizes present results figure based distribution opted httpsgithubcomtudelftscratchlabscratchdataset httpwikiscratchmiteduwikiscratch file format clones sprites clones within sprites figure cloned scripts block sizes within sprites cloned scripts sprites code figure sprites analyzed projects sprites scripts figure size sprites scripts blocks adopt authors minimum size blocks per script context consider long method large class smells large script large sprite smells respectively smells blocks size metric figure presents blocks scripts sprites dataset statistics split dataset retrieve top largest scripts sprites commonly done source code analysis analysis enduser programming artifacts like spreadsheets strategy set thresh olds calculation large script large sprite blocks blocks respectively results obtained thresholds presented section results following sections ques tions describe results obtained analysis projects dataset program size complexity dataset contains relatively small projects without code random man ual sampling found cases projects con tains sprites costumes code projects entirely empty apart cat added default since projects empty terms code excluded analysis leaving final analyzed nonempty projects blocks scripts sprites figure scripts analyzed projects blocks figure blocks analyzed projects figure mccabe cyclomatic complexity analyzed scripts scripts projects projects projects blocks script cyclomatic complexity mean min median max size complexity procedures programming sprites code per project scripts per project blocks per project blocks stage per project blocks sprites per project blocks procedures per project mccabe cyclomatic complexity cc per script mccabe cc per procedure script procedures per project procedures arguments per procedure numerical arguments per procedure arguments text arguments per procedure arguments boolean arguments per procedure arguments calls per procedure scripts calls per procedure variables per project scripts utilizing variable lists per project conditional statements per project loop statements per project user input blocks per project broadcastreceive statements per project summary statistics dataset nonempty projects summarize statistics analyzed metrics mean value fivenumber sum mary describe dataset terms sprites code per project including stage sprite scripts blocks per project figures plot distribution size metrics find majority projects small projects sprites scripts blocks fourth projects blocks end projects sprites consist blocks analysis highlighted surprisingly large projects sprites even projects blocks whose identifiers made available inspection blocks metric analyzed un derstand code organization depth majority code blocksis written within sprites additional total blocks found stage class interestingly remain ing blocks within defined procedures found pro jects pro jects contain procedures lot almost half total blocks within procedures analyzed utilization frequency dif ferent block shapes categories defined documentation figures present results terms blocks total blocks dataset projects commonly blocks control categories others category cludes blocks related procedure calls arguments understand complexity projects dataset mccabe cyclomatic complexity results metric per script plotted figure majority scripts contain decision points cyclomatic complexity con figure blocks category analyzed projects figure blocks shape analyzed projects stack reporter hat cap boolean procedures retrieved analyzed nonempty statistics projects procedures recursive procedures variables lists pro jects conditional statements user input blocks loop statements repeat condition broadcast receive cloned scripts sprites cloned scripts within sprites cloned procedures cloned blocks sprites exact clones sprites exact clones within sprites dead code large scripts large sprites figure procedures projects include least procedure arguments elements characteristics projects dataset taining exactly decision point complexity higher scripts analysis highlighted scripts cyclomatic complexity cyclomatic complexity greater mean value defined procedures procedures least decision point programming abstractions first method abstraction investigate procedures dataset found procedures projects summarized projects contain procedures average procedures projects figure shows distribution procedures projects regarding procedure arguments found arguments shown figure majority procedure arguments nu meric least argument type boolean total procedure arguments found procedures procedures projects investigated procedure calls summarized figure procedures called exactly twice exactly script examining origin procedure calls ob served calls originate procedures even originate proce dure making recursive calls recursive proce figure arguments procedures dataset dures found projects whose identifiers made available shown almost onethird projects variables small lists num ber variables limited projects variables distribution variable list utilization shown fig ure exceptional cases exist analysis highlighted projects variables maximum examining initialization variables set variable value blocks found variables missing failing ini tialize variable result runtime error programming languages correctly setting initial state program important regardingprogramcontrolfeaturesconditionalsif con rq majority projects small sim ple projects sprites scripts blocks majority scripts contain decision points code written sprites exist surprisingly large complex projects procedure calls figure calls procedure dataset procedures log scale procedures logarithmic scale projects variables lists cloned scripts sprites exact clones sprites within sprites figure variables lists figure cloned scripts dataset projects copies cloned scripts sprites exact clones sprites within sprites block key pressed sprite clicked sensing key pressed sensing ask wait sensing mouse sensing attrib sensing mouse sensing mouse sensor value sensing video projects occurrences figure copies identified clones rq small projects procedures lot complex code procedures called twice single script half cases another proce dure recursive procedure calls exist total pro jects third pro jects vari ables sometimes without initializing projects contain conditional statements contain loops conditional loops rarely half pro jects interactive pro jects broadcast receive blocks frequency user input blocks projects dataset dition condition else blocks projects loops blocks repeat tim esforeverandrepeat conditionaremorecom mon projects common forever block accounting loops least common repeat con dition block accounting loops total projects investigating user interactivity functionality found projects dataset contain user input blocksan average blocks per project lists frequency user input controls include green flag pressed block start program hence cannot considered input program commonly user input block key pressed found total projects frequently parameter key attribute space key fol lowed arrows letters numbers detailed section users define events blocks broadcast broadcast wait receive blocks projects broadcast wait rarely projects code smells duplicated code smell first smell exam ine explained section minimum blocks identified clones total dataset found scripts cloned sprites total nonempty projects copies scripts found making clone copied average times figure plots distri bution clones pro jects jority pro jects contain cloned scripts figure plots num ber copies identified clones interest identified clones copied times even cases projects copied times inspected identified clones duplicated within sprite total clones pro jects pro jects contain cloned procedure definitions measured total clones exact clones found total projects total clones log scale projects projects log scale total clones exact clones sprite rare found projects apart whole scripts examined cases scripts differ first hat block exam ine programmers assign functionality handle types events cloned functionality blocks found rare without considering first block additional clones found projects second smell examine dead code smell identify types dead code procedures invoked unmatched broadcastreceive messages code invoked empty event scripts ie scripts contain event block alone investigat ing first type find significant defined procedures called projects shown figure occurs projects second type examined broadcastreceive messages found ways synchronized receive blocks found wait message never broad casted broadcast blocks broadcast mes sage received lack syncronization occurs total projects third fourth cases incomplete scripts either never invoked due lack starting trigger block events control cat egory comprised trigger block without functionality total scripts like found total projects majority scripts scripts missing hat block examining size dead scripts composed single block however dead scripts considerably large dead scripts projects blocks projects exhibiting dead code smell considering types dead code combined total projects finally examine large script large sprite smells thresholds identification large scripts large sprites blocks blocks respec tively explained section projects exhibiting large script smell ie containing least script blocks total projects projects large sprite smell discussion implications believe large scale programs like cur rent help language designers tailor language section highlight directions could support language implications considered made dataset public popularity block types analysis shows categories blocks rarely like pen blocks oc cur within total programs hence future changes language pen blocks might less important users support maintain dead code analysis find quarter projects contain dead scripts sense dead scripts harmless executed ever cause visual clutter might distracting novice programmers might hard see scripts dead contrast visual languages indicate scripts dead lego mindstorms example give user feedback dead blocks making gray looking unconnected blocks hypoth esize programmers need separate workspace store unconnected blocks temporarily en vision would like backpack feature meant move scripts sprites order help novice programmers keep code clean programming inter face could actively encourage users move unconnected blocks workspace exit environment exact clones sprites occurrences projects dataset exactly identical clones sprites relatively common sense users blame support procedure calls sprites within cases share functionality making copy aware underlying rationale team lead decision however seems large part users would functionality call procedures sprites sharing scripts procedures investigating clones projects ob serve scripts multiple projects sometimes often projects seems indicate common patterns projects means might beneficial programmers could share projects share functionality others like library example library could functions platforming games including movement sprites collision detection implementation lives might empower users get started faster insights computing findings confirm mainly intended purpose firstexposure programming environ ment creating simple programs interactive anima tions majority programs small half interactive contain conditional statements analysis indicates computational like conditionals variables applied conditional statements found projects variables hold loops even though projects contain loops contains conditional loops attribute increased forever loop rq code clones found projects almost half clones copied times sprites projects contain code never invoked thus exhibit dead code smell cases scripts large large script smell found projects large sprite language skeptical whether indicates understanding loop projects contain procedures lot complex code indication experienced programmers essential programming concept therefore suffi ciently applied attributed limitations imposed environment like local scope procedures difficulty internalizing certain computational thinking certain occurrence cloned scripts proj ects could result limited procedures code smells frequently found projects include dead code large scripts know ing prior long scripts code duplica tion decreases ability understand modify pro grams programmers tend exhibit certain bad programming habits believe educating novice programmers code quality issue researched must noted scope includes programming artifacts alone findings limited lack process characteristics related programmers however project available dataset facili tate computing reason publishing threats validity threat validity fact scrape random sample recent projects could case programming habits users changing time however coun terbalanced large dataset comprises around million shared projects furthermore blocks projects measure length program exactly correspond length program lines multiple blocks line however believe blocks good proxy size plan future experiment compare lines code blocks related evaluation blockbased languages general particular tools programming received significant attention past years carried understanding programming program ming practices novice programmers blockbased envi ronments programming quality programs example internalization program ming presented like loops conditional loops message pass ing initialization variables concurency examined found last later equal set subjects authors identified bad programming habits namely bottomup development extremely finegrained programming connected later httpsscratchmitedustatistics reduced ifblocks finite loops increased infinite loops finding verified projects created working evaluated based list criteria related program ming code organization usability largescale analyses projects per formed dataset made available lifelong kindergarten mit media lab contains projects created web based programming environment introduced dataset exploring patterns programmers terms block first pro jects dasgupta investigated pro ject remixing relates adoption computational thinking programming examined relation participation commenting remix ing etc account programmers related second question programming abstractions maloney analyzed projects blocks relate programming including loops conditional statements variables user interaction synchro nization random numbers compared findings investigation reveals increased first con cepts especially variables automated quality analysis tools hairball dr related smell detection hairball extension lintlike static analysis tool detect initialization prob lems unmatched broadcast receive blocks moreno robles extended hairball detect bad programming habits changing default object names duplicating scripts apply evaluating projects repository results script duplication substantially ourswe find projects script clones appear half frequently dr tool includes bad naming code duplication dead code identification functionality evaluates projects terms abstraction parallelism logical thinking synchronization flow control user interactivity representation conclusions paper presented largescale projects scraped repository ana lyze projects terms size complexity application programming abstractions utilization programming including procedures variables conditional state ments loops broadcastreceive functionality find procedures conditional loops commonly investigate presence code smells cluding code duplication dead code long method large class smells findings indicate programs suffer code smells especially dead code code duplication addition findings presented paper provide contributions dataset well project identifiers information edge cases found dataset terms size procedures variables cyclomatic complexity clones dead code references alves ypma visser deriving metric thresholds benchmark th ieee international conference software maintenance icsm pages ieee computer society boe hill len dreschler conrad franklin hairball lintinspired static analysis projects proceeding th technical symposium computer sigcse pages york ny usa brennan balch chung creative computing harvard graduate conway pausch gossweiler burnette alice rapid prototyping system building virtual environments conference companion human factors computing systems chi pages york ny usa cooper dann pausch teaching objectsfirst introductory computer proceedings th sigcse technical symposium computer sigcse pages york ny usa dasgupta hale monroyhern andez hill remixing pathway computational thinking proceedings th conference computersupported cooperative social computing cscw pages york ny usa fields giang kafai programming wild trends youth computational participation online community proceedings th workshop primary secondary computing wipsce pages york ny usa fowler refactoring improving existing code addisonwesley longman publishing co inc boston usa glinert towards second generation interactive graphical programming environments proceedings ieee workshop visual languages pages hermans aivaloglou code smells hamper novice programming proceedings international conference program comprehension appear hermans pinzger van deursen detecting refactoring code smells spreadsheet formulas empirical software engineering maloney peppler kafai resnick rusk programming choice urban youth programming proceedings th sigcse technical symposium computer sigcse pages york ny usa mccabe complexity measure ieee trans software eng meerbaumsalant armoni benari habits programming proceedings th annual joint conference innovation technology computer iticse pages york ny usa meerbaumsalant armoni benari computer proceedings sixth international workshop computing icer pages york ny usa moreno robles automatic detection bad programming habits preliminary ieee frontiers conference fie pages oct morenoleo robles rom angonza lez dr automatic analysis projects assess foster computational thinking red revista de educacio distancia jan moskal cooper lurie evaluating effectiveness instructional approach proceedings sigcse technical symposium computer price barnes comparing textual block interfaces novice programming environment proceedings eleventh annual international conference international computing icer pages york ny usa resnick maloney monroyherna andez rusk eastmond brennan millner rosenbaum silver silverman kafai programming commun nov seiter foreman modeling progressions computational thinking primary grade proceedings ninth annual international conference international computing icer pages york ny usa wilson hainey connolly evaluation computer games developed primary gauge understanding programming european conference games based page academic conferences international limited wolber abelson spertus looney app inventor create android apps oreilly media sebastopol calif edition edition yang domeniconi revelle sweeney gelman beckley johri uncovering trajectories informal large online communities creators proceedings second conference scale ls pages york ny usa 
introducing computational thinking courses aman yadav dept purdue university west lafayette indiana usa amanyadavpurdueedu ninger zhou dept purdue university west lafayette indiana usa zhounpurdueedu chris mayfield dept computer purdue university west lafayette indiana usa cmayfielcspurdueedu susanne hambrusch dept computer purdue university west lafayette indiana usa sehpurdueedu john korb dept computer purdue university west lafayette indiana usa jtkpurdueedu abstract computational thinking becomes fundamental st century exposed computing principles paper describes implementation evaluation computational thinking module required course elementary secondary majors summarize results openended multiplechoice questionnaires given module assess attitudes toward understanding computational thinking results suggest given information computational thinking attitudes toward computer becomes favorable likely integrate computing principles future teaching categories subject descriptors computer information curriculum general terms experimentation measurement keywords computational thinking nonmajors computational thinking wing suggested computational thinking fundamental analytical thinking everyone computer scientists described computational thinking designing systems understanding human behavior drawing fundamental computer wing pointed permission make digital hard copies part personal classroom granted without fee provided copies made distributed profit commercial advantage copies bear notice full citation first page copy otherwise republish post servers redistribute lists requires prior specific permission andor fee sigcse march dallas texas usa copyright untapped potential computational thinking stating reading writing arithmetic add computational thinking every childs analytical ability report computational thinking national council nrc advanced similar idea cognitive average person expected possess similarly bundy suggested computational thinking disciplines via processes ability think computationally essential every discipline pervasiveness computational thinking dictates importance exposing notions early years helping become conscious apply essential nrc report highlighted learn thinking strategies computational thinking discipline curricula strategies appropriate guidance enable learn strategies independently teacher discipline computational thinking significant impact prepare future educators present subject areas ideas computational thinking greater exposure computing general paper describe implementation module sections core course required elementary secondary majors present pre postassessment understanding attitude computational thinking measured influence module particular presurvey described computing process compared postsurvey presurvey agreed computing relates fields percentage increased postsurvey overall module helped understand teach computing classrooms without computers incorporated disciplines computational thinking potential significantly advance problemsolving however literature implementing computational thinking setting still relatively sparse workshops integrating computational thinking little systematically comprehensively examined influence computational thinking preservice ie exploratory investigations demonstrated exposure computational thinking enhances approach example lewandowski illustrated idea commonsense programming without programming experience asked propose solutions avoid selling theater tickets seat twice multiple box offices results showed solutions correctly identified race condition indicated indeed equipped natural undeveloped understanding computationally several researchers made effort introduce inservice computer workshop sessions promote awareness integrating cs subject areas teacher participants reported extended understanding scope cs considered cs programming importantly comparison pre postsurvey indicated realization importance developing computational thinking aspects life emerged result workshop important step successfully integrating computational thinking curriculum prepare future teach section briefly describes efforts showcase variety preservice section present summary pre postsurvey demonstrates positive change attitude among conclude paper overall discussion section overview module developed oneweek computational thinking module course motivation required elementary secondary majors course introduces future basic classroom management styles motivation assessment main content course includes theories motivation role formal informal assessment fostering motivation ways adapt instruction individual differences social cultural contextual factors since computational thinking naturally includes understanding human behavior fits well topics already covered class probabilistic reasoning algorithms heuristics hypothesis testing replaced originally presented unit critical thinking lectures computational thinking purpose module expose ideas computing show ideas future teaching careers well faculty computer jointly developed lecture material special emphasis placed highlighting core computational thinking presenting material could relate easily apply classroom module presented around middle semester exposed material earlier lectures module introduced primarily studied theories people learn lectures provided overview computational thinking engaged showcased principles worked pairs pair given clicker provide responses see appendix outline lectures clicker questions original slides available website first lecture introduced definition computational thinking basic identification decomposition abstraction logical thinking algorithms debugging introduced examples clicker questions example debugging discussed asking troubleshoot scenario lamp working get home working morning clickers respond sequence questions locate order make lamp second lecture focused role computational thinking daytoday life emphasized importance application discussed problemsolving abstraction critical thinking introduced classroom setting lecture highlighted computational thinking useful tool dealing illdefined might clearcut solution information needed solve missing lecture presented information teach algorithms kinesthetic gave example recursion several members project acted towers hanoi finally provided examples computational thinking core content areas humanities attitude survey results assessed attitudes toward computing understanding computational thinking pre postsurvey surrounding module sections course emailed link survey female male completed presurvey week module postsurvey week module motivation participate extra credit given completed surveys pre postsurveys anonymous linked together via answers security questions surveys consisted sixteen multiplechoice questions likert scale strongly agree strongly disagree openended questions see appendix complete postsurvey external evaluator responsible collecting validating analyzed responses patterns significant differences preand postsurveys interesting results came participants openended responses present section half responded preparing teach elementary remainder secondary approximately elementary participants female vs secondary female vs enrolled responded survey httpcseducspurdueeducompthink presurvey postsurvey computers andor technology solve make tasks easier process computer technology mentioned computers figure participants view computing participants view computing survey participants asked describe view computing purpose basic trends participants responses differed greatly pre postsurvey shown figure percentages add due blank responses presurvey majority participants responses contained themes viewed computing making tasks easier computers andor technology example stated computing computers form technology solve purpose help solve might difficult solve without form technology participants responded viewing computing purpose process computer technology mentioned following comment highlights computing process without computers technology computing preset method established purpose assist us everyday might faced finally reported computing computers example able apply computer daily life run typing applications software areas postsurvey majority participants responses reflected basic trend viewed computing abilityknowledgeprocess solve make tasks easier computer technology mentioned example highlighted view computing stating computing logically think something purpose explore find answer another reported believe computing necessarily involve working computers working solve type purpose calculate equations formulate correct result hand viewed computing making tasks easa presurvey postsurvey process computers andor technology solve make tasks easier computers like computer sure figure participants view ier computers andor technology view highlighted following comments computing technology computer software aid purpose make difficult tasks easier simpler participant reported computing computers deemphasizing technology encouraging algorithmic thinking lectures helped understand computational thinking doesnt always require computers solve participants view pre postsurvey participants asked define computational thinking point view figure summarizes basic trends participants responses pre postsurveys although answers varied found basic trends among third participants responses presurvey reflected trends viewed computational thinking process problemsolving increased postsurvey addition responses specific terminology examples eg presurvey response process postsurvey response process algorithms etc presurvey participants responded didnt know view computational thinking postsurvey none participants responded didnt know additionally presurvey almost third participants responses reflected trends regarding computational thinking computers technology solve make tasks easier none participants responses post survey reflected idea computers technology absolutely must involved definition computational thinking short identified relationship computational thinking receiving module presurvey postsurvey promote critical thinking classroom utilizing computers technology classroom dont know figure integrating classroom integrating classroom survey participants asked computational thinking integrated classroom figure summarizes responses presurvey almost half participants responses reflected view order integrate computational thinking classroom computers technology needed contrast participants responses reflected trend postsurvey week module realized benefits understanding principles able apply systematically technique change attitude reflected question whether promotes critical thinking responses switched agreeing participants agreeing seems every concept computational thinking module reflected dont know category summary saw almost threefold increase majors hold opinion computational thinking could enhance classroom relationship fields asked relationship computational thinking disciplines indicated computational thinking relates fields presurvey rose postsurvey addition survey participants either agreed strongly agreed following statements computational thinking integrated classroom fieldscomputational thinking integrated classroom disciplines background knowledge understanding computer valuable future plan embed computational thinking modules content area courses teaching methods courses including handson implement kinesthetic like computer unplugged discussion results surveys suggest module effective overall increasing awareness computational thinking specifically postsurvey responses sophisticated showcased understanding computational thinking computers technology better grasp computational thinking integrated future teaching promoting critical thinking ie merely computers findings important implications incorporating computational thinking well subject areas given computational thinking becoming fundamental st century important introduce disciplines outside computer specifically computational thinking must appear early primary grades continue secondary grades beyond incorporate computational thinking modules core courses expose future idea results current suggest approach potential change future understanding computational thinking integrated classrooms summary shown given information computing attitude toward computing becomes favorable see applications computing principles careers readily plan repeat module motivation developing online version module introduction technology another course required majors hope approach modules attract computing courses emphasize computer principles well traditional programming courses acknowledgements supported nsf cpath program grant cns gift state farm especially thank courtney brown help administration surveys appreciate csedu team anonymous reviewers thoughtful feedback paper references allan barr brylow hambrusch computational thinking courses sigcse bell witten fellows computer unplugged httpcsunpluggedorg december blum cortina cshs outreach program cs sigcse bundy computational thinking pervasive journal scientific practical computing committee workshops computational thinking report workshop scope nature computational thinking national academies press garcia lewis dougherty jadud might computational thinker sigcse henderson cortina wing computational thinking sigcse lewandowski bouvier mccartney sanders simon commonsense computing episode concurrency concert tickets icer proceedings third international workshop computing qualls sherrell computational thinking integrated curriculum journal comp sci colleges wing computational thinking communications appendix outline module lecture computational thinking st century object lesson driving directions get mall clicker questions think algorithm efficiency main road closed debugging computers solve abstraction automation computational thinking approach uses abstraction create algorithmic solutions automated computation fundamental everyone middle st century ie like reading writing arithmetic daily examples looking names phone book buying movie tickets multiple lines clicker question concept abstraction reformulating seemingly difficult know solve people standing line queue cafeteria plates stack concept logical thinking inductive reasoning observation pattern hypothesis theory deductive reasoning theory hypothesis observation confirm concept algorithms peanut butter jelly sandwich explain write olympiad homework swap puzzle csfnorg concept debugging clicker questions discuss reasoning behind answer lecture computational thinking review previous lecture clicker questions decomposition abstraction logical thinking algorithms debugging automation definitions important enhances techniques moves beyond technology literacy higherlevel cognitive process strategies heuristic experiencebased strategy facilitates algorithm specific sequence steps guarantees solution teach algorithms demonstrate specific procedures apply examples help explain thinking debug role play towers hanoi technology motivate facebook friend network visualization googles public explorer amazonnetflixetc recommendations tools seen applying content area social economics social sciences medicine humanities big picture fundamental everybody state computing secondary highlight cs principles proposed ap course clicker questions lecture intro extensive directions step eg type mall gps google maps steps eg downtown take bus several steps eg head east sr rd street detailed turnbyturn route eg union none eg man figure driving directions knew already simply recalled route sketched highlevel map paper thought several ways picked texted friend looking modeled entire city undirected graph solved singlepair shortest path applied source destination quickest serve pizzas hungry pizzas usual case tables pizzas people stay put pizzas passed around servers bringing pizza around scenario come home desk lamp apartment stopped working worked morning first step solve check lamp turned check light bulb working check lamp plugged check outlet working check power room scenario checked ae still working next buy lamp call motherfriendlandlordetc roommates lamp repeat steps ae forget day lecture review main ideas computational thinking abstraction automation algorithm analysis debugging logical thinking computational thinking relies computer programs true false computational thinking mainly involves computer little impact subject areas true false postsurvey indicate whether strongly agree agree disagree strongly disagree knowledge computing allow secure better job career goals require learn computing doubt solve computer applications expect software future career achieve good grades better computing courses challenge computer appeals expect computer applications future projects involving teamwork learn understand computing comfortable computing expect computing daily life hope future career require computing think computer interesting voluntarily take computing courses given opportunity computational thinking integrated classroom fields computational thinking integrated classroom disciplines background knowledge understanding computer valuable openended questions view computing purpose view computational thinking integrate computational thinking classroom computational thinking relate disciplines fields please provide specific examples 
vviewpoints august vol communications doi mark guzdial paving computational thinking drawing methods diverse disciplinesincluding computer sociology psychologyto improve computing eaching everyone campus program noble goal put forth alan perlis perlis awarded first turing award everyone learn program part liberal argued programming exploration process topic concerned everyone automated execution process machine going change everything saw programming step toward understanding theory computation would lead recasting understanding wide variety topics calculus economics terms computation today know perlis prescientthe automated execution process changing professionals disciplines think jeanette wing pointed metaphors structures computing influencing areas engineering computing professionals educators responsibility make computation available thinkers disciplines part responsibility met formal professional another field able application little metaphors ways thinking computing must explicitly taught teach computational thinking everyone campus require approaches assume want become computing professionals developing approaches require us answer difficult questions like noncomputing understand computing find challenging kinds tools make computational thinking easily accessible organize structure classes make computing accessible broad range brief examples show column illustration christopher silas neal cacmvindb communications august vol viewpoints questions addressed researchers field computing researchers computing draw computer neither field alone sufficient computer scientists understand computing practical rational theoretical perspective questions inherently human questions humans often impractical irrational difficult make predictions proofs computing researchers experimentation demonstrate address important questions humans come understand computing make better computing pave make computational thinking st century literacy share campus understanding computing programming theme early programming languages would like natural languages obvious question people specify processes natural language lance miller asked participants specify file manipulation tasks another person task might make list employees job title photographer rated superior given paper files miller studied language participants descriptions millers surprises rarely participants explicitly specified kind control flow almost explicit looping task descriptions tested conditions none ever specified else found surprising gave second set participants example task description without looping else specification second set participants easily executed task description asked condition met exhausted replied almost unanimously miller reports course check next person go millers results predict challenges program challenges wellknown introductory classes today process descriptions novices tend specify every condition computers require specificity millers results suggest kinds programming languages might easier novices programming languages like apl matlab programming tools like squeaks etoys implicit looping participants millers twenty years later john pane colleagues carnegie mellon university revisited millers questions contexts experiment pane showed subjects situations processes occur pacman game asked would specify subjects responded explanations like pacman gets dots goes next like miller pane found participants rarely explicit looping always onesided conditionals pane went characterize style programming participants found half participants task statements form production rules example saw constraints imperative statements little evidence objectoriented thinking participants talk accessing behaviors built entity rarely perspective entity instead perspective player programmer found evidence participants describing categories entities defining classes inheritance polymorphism panes results suggest objectoriented thinking natural sense characteristic novices task descriptions since obfigure traditional conditional structure value value value else sum sum value end figure conditional structure value value value value sum sum value end value wwwacmorgdl digital library theultimateonline informationtechnology resource author profile pages improved search capabilities publications plus conference proceedings years archives advanced searching capabilities million pages downloadable text plus million bibliographic citations available guide computing literature join andor subscribe digital library contact phone us canada global fax hours pm est email acmhelpacmorg join urlwwwacmorgjoinacm mail member services general post office po box york ny usa dlonethirdpageclayout pm page cacmvindb viewpoints august vol communications jects foundation modern software today results point expect find challenges explaining objects millers panes results encourage us think might languages novices play natural ways thinking specifying computation like eventbased programming mits last years multinational researchers explored commonsense computing know teach given complex task people without programming knowledge specify algorithm task paper lewandowski explore concurrencyin complex task multiple box offices selling tickets theater well nonprogramming avoid selling seat twice results showed solutions total drawn institutions correct solutions correct solutions distributed algorithms classes need worry put business noncomputing naturally come elegant solutions computer scientists devised however results suggest naturally think concurrency correctly implementing concurrent programs might stem challenges specifying algorithms current programming languages rather complexity algorithms redesigning programming languages panes millers results make suggestions programming languages goal make computational ideas accessible novices testing forms programming languages area active exploration thomas rg green elliot soloway others paper green colleagues explored alternatives traditional conditional structure typical structure might look like structure shown figure tested structure would written shown figure structure makes explicit condition execution clause condition green colleagues found novices able correct mistakes second form times faster programs first form miller pane found participants simply never else clause instead seemed obvious course tested condition wasnt true millers panes subjects something greens writing task description reading fixing task description greens results complement millers panes novices naturally write else clausethey think obvious fails however conditionals programs always obvious easier novices trying read programs conditions clauses execution explicit paving computational thinking make computational thinking accessible entire campus need understand teach computing better computing researchers explore humans come understand computing improve understanding computing close cousin humancomputer interaction since hci researchers explore humans interact computing improve interaction computing researchers found home international computing icer workshop whose fourth annual meeting held september sydney australia see wwwnewcastleedu auconferenceicer journals like computer journal resources computing computing draws variety disciplines make computing better social scientists like jane margolis lecia barker carsten schulte help us understand experience classes often differs might expect change classes make successful computing researchers draw methods sociology psychology order measure computing understand factors influence making computing better broaden access computing ideas capabilities teach every programming theory computation makes sense discipline see ubiquitous understanding computing advance entire academy perlis predicted years ago references lewandowski commonsense computing episode concurrency concert tickets proceedings thethird international workshop computing miller la natural language programming styles strategies contrasts ibm systems journal pane jf ratanamahatana myers ba studying language structure nonprogrammers solutions programming international journal humancomputer perlis computer university greenberger ed computers world future mit press cambridge sime arblaster green trg structuring programmers task journal occupational psychology wing computational thinking commun mar mark guzdial guzdialccgatechedu professor college computing georgia institute technology atlanta ga communications column feature commentary issues presenting results opinions inform challenges computing best addressed computing pave make computational thinking st century literacy share campus cacmvindb 
computers contents lists available sciencedirect computers journal homepage wwwelseviercomlocatecompedu computational thinking tinkering exploration early childhood curriculum marina umaschi bers louise flannery elizabeth kazakoff amanda sullivan tufts university medford usa articleinfo abstract article history received january received revised form october accepted october keywords elementary interactive environments pedagogical issues teachinglearning strategies programming early childhood introduction engaging constructionbased young play learn range tangiblek program paired developmentally appropriate computer program ming tools constructionist curriculum designed engage kindergarten computational thinking programming problemsolving paper documents kindergarten classrooms exposure computer programming explores outcomes results point strengths curriculum areas redesign curric ulum technologies would appropriate overall demonstrates kindergartners interested able learn aspects programming computational thinking tangiblek curriculum elsevier ltd rights reserved decades early childhood preschool grade curricula focused primarily literacy math especially reforms child left behind zigler bishopjosef however recent attention technology engineering math stem young gelman brenneman sesame workshop white house furthermore technology standards best practices integrating technology early childhood educa tion developed barron international society technology iste naeyc fred rogers center early childrens media us department note technology policy statement naeyc fred rogers center early childrens media provides guide early childhood professionals interactive digital technologies balanced developmentally appropriate ways addresses important issues related digital technology ages threeeight years including needs technology serve needs educators able understand evaluate integrate developmentally appropriate technologies classrooms however little computer programming specifically early childhood subject paper explores devices smartphones tablet computers electronic toys find audiences increasingly young challenging question arise define developmentally appropriate content ages majority programming focuses later schooling teaching subjects foundational early childhood years engaging rewarding experience young learners bers previous shown young foursix years old build program simple projects bers ponte juelich viera schenker cejka rogers portsmore kazakoff sullivan bers perlman wyeth well learn powerful ideas engineering technology computer programming building computational thinking bers robotic manipulatives allow finemotor handeye coordination engaging collabora tion teamwork additionally provide fun playful integrate academic content creation corresponding author devtech eliot pearson department child development college ave medford usa tel email address elizabethkazakofftuftsedu kazakoff see front matter elsevier ltd rights reserved httpdxdoiorgjcompedu mu bers computers meaningful projects young experiment engineering well storytelling creating narrative contexts projects bers engaging types projects young play learn play creative context resnick computers offer ways representing interacting information entirely category objects think papert form programmable interactive robots computers become powerful tools offers opportunity engage content domain computer practice problemsolving finemotor eyehand coordination tangiblek program designbased initiative fifth year paired mentally appropriate programming tools curriculum engage kindergartners computational thinking programming well problemsolving reasoning goal paper present young childrens outcomes computer programming taught tangiblek curriculum order highlight potential integrating computer programming early childhood classroom theoretical framework constructionism positive technological development theoretical approach designing intervention curriculum integrating tangiblek program early childhood classrooms incorporates elements paperts constructionist framework states learn deeply build meaningful projects community learners reflect carefully process paperts constructionism rooted piagets constructivism conveys idea child actively builds knowledge experience related learnbydoing approach piagets theory developed explain knowledge constructed individuals mind papert expands focus ways internal constructions supported constructions world including computers constructionist teaching approach provides freedom explore interests technologies bers investigating domainspecific content exercising metacognitive problemsolving reasoning eg clements gullo clements meredith papert discussed welldesigned constructionist embedded powerful ideas central within domain epistemological personally useful interconnected disciplines roots intuitive knowledge child internalized long period time bers papert idea considered powerful degree useful building extending knowledge papert curriculum described paper composed powerful ideas domains computer engineering eg engineering process debugging robotic motion sensing programming instructions control flow sequence control flow specific instructions classroom designed impact outcomes cognitive growth impact influenced childrens social emotional moral development framework guide implementation curriculum focuses dimensions child bers positive technological development ptd utilized ptd takes consideration environment pedagogical practices well cultural values rituals mediate teaching bers rogoff goodman turkanis bartlett experience proposed presented cur riculum structured ptd framework encourage behaviors turn foster development beneficial core cognitive social traits specifically engaging content generation creative problemsolving collaboration communication choices conduct communitybuilding lead sense competence confidence ability connect care others contribution entities outside self moral character bers instance iteratively planning revising project supportive environment gain confidence abilities learn solve alternatively discussions share limited resources fairly amongst class opportunities positive moral development computer programming embedded exploration computer programming tangiblek curriculum fosters computational thinking term defined ways encompasses broad somewhat debated range analytic problemsolving dis positions habits approaches computer barr stephenson international society technology computer association lee tangiblek curriculum specifically fosters computational thinking representation systematicity generating implementing solutions exploring multiple possible solutions problemsolving multiple levels approaching overall challenge debugging troubleshooting specific difficulties given solutions implementation productive attitudes toward failure misconceptions uncovered along route successful project strategies approaching openended often difficult general applicability beyond computational thinking tangiblek program tangiblek program whose informed theoretical frameworks constructionism ptd iteratively implemented assessed set programming tools curricula pedagogical approaches close collaboration hundreds dozens course years goals tangiblek program provide evidencebased description young childrens trajectories computational thinking capacity standing computer programming given developmentally appropriate materials early childhood curriculum teach developmentally appropriate computer programming kindergarten second grade investigate features programming interface mediating role interface plays program mu bers computers paper addresses first goals describe young childrens trajectories computational thinking capacity understand computer programming understanding allow revision tangiblek curriculum tangiblek project makes commercially available construction kits cherp creative hybrid envi ronment programming language give behaviors robotic constructions bers bers horn horn kazakoff bers kazakoff sullivan bers cherp hybrid tangible graphical computer language designed provide young engaging introduction computer programming developmentally appropriate software allows create programs control robots tangible wooden blocks andor graphical onscreen icons cherp avoids technical syntaxrelated challenges textbased programming languages furthermore hybrid interface allows choose interface best suits changing preferences physical abilities perceived social appeal challenge hand evolve horn tangible graphical interfaces represent tangiblek curriculum introduces increasingly complex powerful ideas computer context structured developmentally appropriate powerful ideas computer addressed curriculum include engineering process debugging troubleshooting robotic motion sensing aspects programming choosing correct pro gramming instructions controlling flow actions sequencing action instructions accordingly controlling flow actions special control flow instructions section contains detailed definitions powerful idea addition concrete programming introduced observation reflection decomposition complex processes interwoven throughout curriculum curriculum takes approximately classroom includes structured min culminating interdisciplinary project focus building programming robotic vehicle accomplish particular goal lesson addresses powerful ideas within context narrative theme lesson embedded content follows lesson engineering process build sturdy nonrobotic vehicles transport toy people floor map apply stages engineering process plan improve vehicles lesson share learn ideas robots explore robotic parts designing building robots learn appropriately connect robotic parts eg snaptogether wires motors make moves lesson choosing sequencing programming instructions program robots dance hokeypokey choosing instructions putting correct order sequence lesson looping programs control flow instructions repeat instructions program robots move forward forever next program move forward particular times reach fixed location lesson sensors light sensors program robots turn light dark vice versa draw comparisons robotic sensors human senses lesson branching programs control flow instructions introduced pair conditional control flow instructions sensor make programs incorporate environmental conditions robots behavior addition structured described tangiblek curriculum includes songs games freeplay programming materials order foster playful environment example lesson sing dance hokeypokey play simon says cherp programming commands recall apply programming instructions throughout curriculum ample opportunity freely build materials create cherp programs beyond set forth structured lessons completing lessons described classroom embarks culminating interdisciplinary project invite apply familiar powerful ideas particular theme context teacher decides theme drawn subjects studied year child chooses challenge within theme past classrooms selected topics animal behaviors vehicles help community created projects representing snakes slither recycling trucks collect refuse sewing needles travel back forth fabric among others projects allow demonstrate powerful ideas learned well apply continue context introduced overview tangiblek program including technological curricular theoretical components present kindergarten classrooms tangiblek program implemented following sections report distribution achievement attained selected computer programming tied mu bers computers powerful ideas listed achievement form basis discuss curriculum structure content consider implications understanding childrens early trajectories computational adaptation curriculum within designbased tradition iterative testing analysis refinement intervention see eg cobb confrey disessa lehrer schauble tangiblek program spent years exploring accomplishing domains programming described paper examines successfully learned core powerful ideas programming tangiblek curriculum took place fourth year overall project following piloting refinement software curriculum range settings classrooms afterschoolsummer programs lab extensive testing exploration refinement preceding iterations laid foundation understanding young learn think core programming instance several curricular simplified enable better focus target movement games songs added curriculum engage multiple modes understanding provide reinforcement basic knowledge addition programming icons revised familiar imagery participants involved volunteered participate following email notification opportunity principals limited schools greater boston area classroom participated curriculum family option allow decline collection according community needs consent materials available english portuguese spanish attended greater boston area kindergarten classrooms public urban private suburban total enrolled classes included analysis included analysis unless missed collectible attrition due typical classroom absences well difficulty collecting limited researchers bustling classroom environment classroom kindergarten independent religiousbased private suburb boston included analysis population white asian black hispanic httpnces edgovgloballocator kindergarten class male female ranged ages years start median years kindergarten classroom class taught male teacher years teaching experience scale none expert rated computer experience pro gramming experience experience classrooms located urban nclb located outside boston makeup year white hispanic african american asian american multi race comprised englishlanguage learners classified low income massachusetts department female teacher years teaching experience taught classroom rated computer experience experience programming experience classroom enrolled included analysis male female start curriculum classroom ranged years old median years female teacher years teaching experience taught classroom rated computer experience experience programming experience analysis includes enrolled classroom participants female male childrens ages start curriculum classroom ranged years median years old overall range included analysis years average start curriculum years old classrooms whole female male participants thought generally representative general kindergartners population sample includes public private male female fairly even proportion male female described diverse range ethnic socioeconomic backgrounds particularly participating public procedure classrooms head teacher assistants nearly collaborators total received prepare teaching assisting curriculum participating collection assistants needed reasons first low studenttoadult ratio lesson ensured adequate observation documentation secondly assistants limited availability full set sessions therefore attention given col laborators ensure received careful detailed introductory covered technical curricular pedagogical aspects program including cherp programming language lego kits well content structure teaching approach framed ptd presented earlier included explanation examples score childrens according scale understanding levels described implemented tangiblek curriculum classrooms technical support trained sistants curriculum whole class working together third teacher worked half class time finishing entire curriculum starting curricular took min ses sions teacher introduced key days wholegroup setting along short song game reinforce mu bers computers mentioned earlier lesson class sang danced hokeypokey programming robots dance additionally game simon says often lessons reinforce cherp programming instructions corresponding robotic actions wholegroup built andor programmed robotic vehicles worked independently projects sat received support needed assistant classroom teacher interacting peers variety coders evaluating childrens systematically accounted potential intercoder differences varying adult worked lesson sessions ended discussion share progress questions successful strategies teacher help reinforce core programming engineering process assess outcomes assistants evaluated andor program made child assessed childs understanding selected core seen successful application program needed talked gain information understandings examining instance childs program correct selection sequencing action instructions proper repeat instruction assistants scored childs achievement core goals lesson following point likert scale designed document thoroughness childs understanding application activityspecific well general score higher defined target achievement complete achievement goal task understanding mostly complete achievement goal task understanding partially complete achievement goal task understanding incomplete achievement goal task understanding complete goal task understanding attemptother lesson scored multiple likert scale example lesson programmed robots dance hokeypokey choosing correct instructions referred correspondence putting instructions correct order sequencing sequencing correspondence described detail sections illustration general scale received point correspondence scale programming instruction correctly matched line song examples childrens programs scored correspondence lesson begin forward backward forward shake spin end correct begin forward forward forward shake spin end second forward backward begin forward backward shake end missing forward spin begin shake spin end missing forward backward forward begin shake end missing forward backward forward spin despite assistance prompting child attempt hokeypokey task programs received score sequencing lesson variables examined examine childrens growing computational thinking ability throughout implementation tangiblek curriculum key vari ables observed assessed debugging correspondence sequencing control flow debugging faced difficult task adults often unable determine suitable solution first attempt situations debugging helpful debugging troubleshooting form problemsolving fields engineering computer encompasses steps debug child must first recognize something working meeting stated goal example child programming dance hokeypokey lesson watches program running realizes shake step debugging process either decide keep original goal switch appropriate alternative child might continue pursue original plan making dance parts hokeypokey common might come alternative dance third stage debugging generating hypothesis cause child example hypothesize program missing instruction would make shake finally last aspect debugging attempting solve child might put shake block positions program program fully matches song debugging limited arena engineering computer previous found acquire transfer debugging outside programming context appropriate support including explicit struction klahr carver salomon perkins steps debugging process critical component engineering process refers cyclical iterative process engineers artifact order meet need massachusetts department defined curriculum frameworks steps include identifying looking ideas solutions choosing devel oping prototype testing improving sharing solutions others see fig steps testing improving require debugging particularly important establishing environment failure rather immediate success expected seen necessary engineering process expected get right first time mu bers computers tangiblek curriculum debugging engineering process first introduced lesson applied throughout rest curriculum assessed ability apply core aspects debugging described lesson final project correspondences actions instructions program sequence instructions computer case acts order specified programmer stair reynolds instruction specific meaning order instructions leads robots overall actions making correspondences actions instructions encompasses understanding programming instruction represents specific action carried another understand process correspondence frame notion symbols core concept kindergarten math literacy programming instruction symbol action carry order program robots behavior must understand general people symbolic language communicate computers must select specific instructions accurately represent intended outcome robots behavior correspondence first introduced lesson curriculum choose sequence programming instructions make dance hokeypokey accomplishing task requires identify corresponding programming instruction line hokeypokey versedance example child understands correspondence actions structions would find programming instruction block shake symbol recreate line shakes measure correspondence assessed correct instructions chose sequencing instructions sequencing component planning involves putting objects actions correct order zelazo carter reznick frye create successful program must procedural thinking plan programs terms sequence happens next another action pea kurland literacy mathematics sequencing essential putting phonemes letters words elements formula appropriate order neuman dickinson prior tangiblek project showed participated program earned significantly higher story sequencing kazakoff bers kazakoff sullivan bers curriculum first introduced idea sequencing instructions lesson hokeypokey challenge described sequencing core component lessons properly arrange action instructions increasingly complex control flow instructions correct order achieve particular outcomes robots behavior control flow instructions control flow refers concept programmers control order follows instructions program various programmatic methods curriculum introduced control flow instructions parameters control flow instructions allow carry instructions nonsequentially eg loop certain conditions example cherp program include repeat control flow instruction following begin forward repeat shake endrepeat sing end make shake times sing attachment light touch sensor sensor parameters qualify control flow instructions based environmental stimuli instance child program carry action set actions environment dark light another set actions lightdark currently curriculum frameworks explicitly addressing control flow connect mathematics reinforcing sense estimation natural comparing human animal sensory functions sensors able compare contrast repeating looping programs patterns cyclical events natural world calendar time assessed correct control flow structures lessons final project results section presents compares childrens achievement programming debugging taught tangiblek curriculum since focus computational thinking robotic context assessments presented evaluate programming instead knowledge childrens introductory lesson assessed programming total reassessed final project additionally debugging assessed lessons final project measure uses likert scale shown ranges attempt task complete goal task understanding completely achieved goal task understanding analysis conducted aggregating classrooms pairedsample ttests compare concept lesson next findings grouped powerful idea relate note teacher classroom chose formally teach activitys items come classrooms discussion choice provided later paper debugging average various debugging measures fell range partial mostly complete understanding application see little variation debugging consecutive see fig exception average score keeping original goal higher marked words childrens ability keep working original goal choose acceptable alternative higher require sensors sensor parameters components debugging remained steady midtoupper range achievement scale lessons debugging debugging step debugging step debugging step mean sd debugging step mean mu bers computers project mean sd mean sd sd note classroom denotes significant differences mean debugging step last completed classes project debugging step project repeated measures anova analyses see run debugging variables analyses run case debugging assessed addition separate repeated measures anova run debugging variable since classroom participate lesson project lesson unstructured average debugging score vary significantly lessons considered however removing challenge lesson class participate repeated measures anova debugging variable show change time meaning perhaps variation debugging score structure lessons variation averaged worked projects powerful ideas programming culminating project completed specific programming challenges assessed ability select instructions put order would result goal behavior special control flow instructions tell loop set actions repeatedly follow branch instructions another based sensor choosing correct programming instructions overall mean score abilities choose correct instructions started dropped average returned starting levels project see detailed means mean fell statistically significantly lower levels percent reaching target achievement dropped seventysix percent achieved target range choosing programming instructions action instructions introduced first control flow instructions achieved target added sensors sensor parameters second challenging type control flow instruction however reached target achievement projects similar rate lesson first require choosing programming instructions see fig control flow sequencing sequencing ability introduced along making correspondences intended robotic actions pro gramming instructions made robots dance hokeypokey threequarters achieved target range first programming sequencing core component properly arrange fig mean achievement debugging average debugging project debugging components appear follow similar trend keeping original goal attempting solve statistically significant changes paired items debugging step mu bers computers repeated measures anovas debugging steps repeated measures anova conducted see significant difference means debugging time possible df without lesson project df debugging step sphericity assumed debugging step greenhousegeisser debugging step greenhousegeisser sphericity assumed debugging step denotes significance correction correction correction notes classroom project openended could choose less difficult blocks greenhousegeisser sphericity assumed actions increasingly complex control flow instructions correct order respectively achieved target fewer able reach target achievement sequencing comparison mean sequencing next revealed statistically significant drop differentiating programs actions requiring twopart control instructions well see seen correspondence average sequencing score childrens projects statistically significantly higher average score see fig control flow special instructions introduced control flow instruction creating looping branching programs average achieved partially complete understanding see detailed means less reached target mostly complete understanding measures degree understanding reached looping numeric parameters sensor parameters first half conditional statement second half conditional statement differences average found looping conditional instructions comparing types parameters see fig statistically significant difference parts conditional statement versus average comfortable making programming equivalent statement dark turn light less comfortable appending turn light first statement comparison projects differences childrens achievement introductory culminating projects examined ways first childrens last completed classes compared childrens final project continued comparison consecutive secondly first introduced particular concept compared corresponding final project example sequencing first concept compared sequencing final project comparison done address childrens might change time exposure note due selfselected nature final projects employed every concept complete relatively lower comparisons statistically significant increases final introductory completed classrooms culminating projects seen overarching programming choosing correct instructions see sequencing instructions accomplish goal see well elements debugging see sticking original goal choosing acceptable alternative taking steps attempt solve fact dropped course returned starting levels final projects described sections selecting programming instructions selecting instructions mean comparison subsequent project sd df tp comparison made alternative toproject comparison last completed classrooms prior project note classroom denotes significance denotes significance sequencing control flow sequencing instructions comparison subsequent mu bers computers fig mean achievement choosing sequencing instructions average choosing sequencing programming instructions according goal dip choosing instructions marked sequencing marked represents significantly lower compared project drop score choosing instructions statistically significant anticipated childrens might increase exposure comparisons made childrens score concept introduced score concept final project however statistically significant differences seen comparisons see summary class reached target achievement programming tasks course curriculums culminating project first introduced engineering process programming childrens levels achievement particularly average reaching target achievement ac tivities introduced sophisticated programming instructions fewer average attained understanding achieved properly selecting sequencing instructions programming involved action instructions final projects achievement comparatively lower involved conceptually functionally complicated control flow instructions andor sensors programs special control flow instructions visually appear linear carry action per programming block program containing actions instructions logical flow program loop forked path rather line introduces conceptual complexity programming control flow instructions exist action instructions alone similarly appears based relative instruction simpler instruction versus target achievement complexity programming concept appears reflected portion reached target levels understanding discussion results provide critical information accessibility selected fields computer kindergarten adding clarity developmentally appropriate expectations order revise improve curricular features early childhood programming technologies results shed light challenges conducting designbased classroom setting interesting feature results trend decreasing achievement lessons possibly related amount time spent topic curriculum introduced progressively challenging concept later lessons asked build recently learned lesson carefully designed teach particular topic provide space exploration fully ingrained mastered yet material introduced could help explain lower later lessons another interesting result relates several childrens average achievement increased final introductory lesson culminating project statistical significance averaged higher choosing sequencing project mean sd df comparison made alternative toproject comparison last completed classrooms prior project note classroom denotes significance denotes significance mu bers computers special instructions control flow control flow instructions comparison analogous concept concept mean sd df looping instruction numeric parameters sensor parameters conditional conditional numeric parameters looping instruction conditional looping instruction note classroom conditional statements denotes statistically significant difference instructions final project introductory except first simplest programming assistant adults remained stable throughout aspects curriculum final projects circumstances project compared lessons improved might attributed fact enthusiasm personallyselected projects would soon part showandtell celebration well time experiment pace lessons alternatively assuming chose projects wellmatched expertise would reasonable expect higher demonstrated levels achievement projects likely focused already felt comfortable however statistically significant differences seen comparisons control flow instruction sensorrelated measures introduced concept culminating project possible even time exploring needed significant gains occur surprisingly always perform better simpler complex ones example lack statistically significant differences childrens understanding looping versus conditional programs numeric versus sensor parameters unexpected theoretically based anecdotal observations researchers present associated looping numeric parameters principle straight forward involved programming conditional statements sensor parameters thus least somewhat higher levels achievement looping numeric parameters expected compared conditional statements sensor parameters comparisons described low less half overall sample size impacted results statistically significant findings varied instance researchers could collect tended belowaverage achievement levels curriculum increased difficulty assistants tended provide increased support questions leaving less time equally observe assess fact observed perceived difficult refrained attempting resulting achievement lower measures curriculum discussion beyond scope paper fully evaluate tangiblek curriculum results indicate curriculum generally engaging developmentally appropriate kindergarten results point kindergarten able effectively implement curriculum kindergartners interested able learn apply aspects programming computational thinking however fact fewer achieved target understanding complex topics introductory might indicate curriculum devote time build fully explore complex material order fully understand order iteration curriculum currently fig mean achievement control flow comparison average types control flow instructions parameters significant dif ference conditional instructions marked culmination project project comparison introductory mu bers computers fig illustration engineering process developed divide prior curriculum based action sensing expand lessons amount time spent exploring topic particularly complex ones structured freeplaybased formats provide op portunities investigation reinforce additional supporting added kindergarteners vary widely levels cognitive development abilities adaptations tangiblek cur riculum address range even current format already results demonstrate complexity assessing sophisticated processes classroom setting necessary tradeoff built gathering adequately detailed picture childrens balanced keeping collection feasible given adult working several context full classroom cases particularly later setting individualchild sessions provided better context demonstrate abilities however goal examine tangiblek program typical kindergarten classroom endeavor successful although ultimately could collected every every measure information gathered reality implementing curriculum classroom settings supports necessary meet needs limitations future directions tangiblek curriculum taught regular hours schools greater boston area benefits drawbacks conducting setting rather experimental setting testing curriculum taught kindergarten public private schools demonstrated given professional development edu cation dedicated teacher successfully teach content classroom however takes place setting present faced several environmental limitations participating taught cur riculum impossible control teacher classroom variations influenced results example another allowed class difficult others gave stepbystep instructions given leeway teach curriculum whatever believed best suited needs classrooms however causes methodological issues analysis con ducted focus teaching styles classroom culture serve enhance hinder curriculum choosing instructions sequencing repeats numeric parameters sensors sensor parameters ifsa mean sd scoring df note classroom separate measure instructions projects mu bers computers another drawback encountered fluctuating daily participants fairly regularly absent temporarily classroom otherwise unable participate class times busy classroom divided adult attention prevented assessments collected particularly assessment required long sustained periods obser vation teacher differences impacted low participants example teacher chose teach lesson order time review previous final project drastically lowering lesson done expanding scope gathering participants possible ensuring consistent completion present inspires additional agendas focus kindergartners investigations look younger prekk older stnd grade able learn apply powerful ideas would important determine whether particularly challenging kindergartners pose less challenge longer exposure introduced older expand overall sample size well experience range sample attempt assess feasibility implementing curriculum classroom teacher typical support staff minimal involvement assistants except conducting collection present participating trained assistants classroom help troubleshoot technology issues assess childrens progress provide oneonone help needed curriculum become widespread necessary know supports need modifications curriculum classroom management alternatives additional adult support etc successfully implement curriculum finally beyond scope current followup could look longitudinal transfer effects tangiblek curriculum retain computational thinking impact areas academic extracurricular lives able apply en gineering process subject areas completing curriculum look longterm benefits incorporating programming early childhood important note challenges arose part present posed hardware curricular highlights importance making developmentally appropriate hardware software specifically designed young results show correctly connecting robotic parts proved challenging understanding function part underlying computational concept result surprising since cherp programming interface curricular introducing robots parts purposes specifically developed kin dergartners part project kit hardware designed older part commercially available lego product furthermore spent significant amount time fixing robots came apart frequently challenging assemble pieces needed adult help spent repair time working computer programs instead able spend time providing support central rather helping rebuild robots perhaps would attained higher levels achievement standing complex powerful ideas involved computational thinking findings informed tangiblek project early childhood prekindergarten nd grade systematically implement curriculum revised according several points outlined document experiences outcomes course year kiwi developmentally appropriate hardware replace lego hardware current despite limitations described paper poststudy collected speaks success tangiblek program would participate tangiblek given chance along general success enthusiasm feedback highlights overall positive nature experience conclusion early childhood classroom typically place expect find programming robots yet availability developmentally appropriate technologies increasingly possible result advancement technological fluency nations youth paper explored tangiblek program viable option classroom integrate mentally appropriate technology early childhood classroom cherp spend time building planning actions physical wooden block computer screen construct programs iteratively improving programs according initial goals subsequent discoveries tangible programs robots exist offscreen drawn investigate collaboratively negotiate sharing materials well finemotor artifacts serve points discussion reminders content even computer turned analysis presented paper explored rich process creation physical digital worlds actively engage problemsolving learn powerful ideas computer including core computational thinking essential understanding impact technologies development could tools parents educators policymakers researchers responsibility ensure receive technological needed healthy development successful future tangiblek program introduced paper shows given ageappropriate technologies curriculum pedagogies young actively engage computer programming applied field take first steps developing computational thinking acknowledgments tangiblek project supported national foundation nsf drl opinions findings conclusions recommendations expressed material authors necessarily reflect views national foundation authors would like thank participating schools commitment participation project references mu bers computers barron caytonhodges bofferding copple darlinghammond levine take giant step blueprint teaching digital york joan ganz cooney center sesame workshop barr stephenson bringing computational thinking involved role computer community inroads httpdxdoiorg bers blocks robots computers technology early childhood york college press bers beyond computer literacy supporting youths positive development technology directions youth development bers designing digital experiences positive youth development playpen playground oxford university press bers horn tangible programming early childhood revisiting developmental assumptions technologies berson berson eds hightech tots childhood digital world greenwich information publishing bers ponte juelich viera schenker designers integrating early childhood information technology childhood cejka rogers portsmore kindergarten motivate math engineering literacy elementary international journal engineering clements gullo effects computer programming young childrens cognition journal psychology httpdxdoiorg clements meredith logo effects efficacy retrieved httpelmediamitedulogofoundationpubspapersresearchlogohtml cobb confrey disessa lehrer schauble experiments researcher gelman brenneman pathways young early childhood quarterly special issue early math horn davis hubbard keifert leong olson june sustainability next generation ecofeedback technology proc th international conference interaction short paper ann arbor mi international society technology nets profiles washington dc iste retrieved wwwisteorgstandardsnetsforstudents netsforstudentsprofilesaspxpk international society technology computer association operational definition computational thinking thinking operationaldefinitionflyerpdf international society technology computer association kazakoff bers programming context kindergarten classroom impact sequencing journal multimedia hypermedia kazakoff sullivan bers effect classroombased intensive programming workshop sequencing ability early childhood early childhood journal klahr carver cognitive objectives logo debugging curriculum instruction transfer cognitive psychology lee martin denner coulter allan erickson computational thinking youth practice inroads massachusetts department massachusetts technologyengineering curriculum framework retrieved massachusetts department httpwwwdoemasseduframeworksscitechpdf naeyc fred rogers center early childrens media technology interactive media tools early childhood programs serving birth joint position statement washington dc naeyc latrobe pa fred rogers center early saint vincent college retrieved wwwnaeyc orgfilesnaeycfilepositionspstechnologywebpdf neuman dickinson eds handbook early literacy york guilford press papert mindstorms computers powerful ideas york basic books papert whats big idea toward pedagogy idea power ibm systems journal httpdxdoiorgsj pea kurland cognitive effects computer programming ideas psychology httpdxdoiorg perlman computer technology provide creative environment preschool logo memo cambridge mit artificial intelligence laboratory publications piaget construction reality child york basic books resnick playful creative societies update retrieved httpwebmediamiteduwmrespaperseducationupdatepdf rogoff goodman turkanis bartlett together adults community york ny oxford university press salomon perkins transfer cognitive programming journal computing sesame workshop sesame workshop pnc foundation join white house effort stem retrieved httpwwwsesameworkshoporg newsandeventspressreleasesstemeducation stair reynolds principles information systems th ed boston course technology itp us department office technology transforming american powered technology washington dc us department office technology retrieved httpwwwedgovtechnologynetp white house educate innovate retrieved httpwwwwhitehousegovissueseducationeducateinnovate wyeth young learn program sensor action logic blocks international journal sciences zelazo carter reznick frye early development executive function problemsolving framework review general psychology zigler bishopjosef cognitive child vs whole child lessons form years head start singer golinkoff hirshpasek eds play play motivates enhances childrens cognitive socialemotional growth york ny oxford university press 
ijacsa international journal advanced computer applications vol wwwijacsathesaiorg thinging computational thinking sabah alfedaghi ali abdullah alkhaldi computer engineering department kuwait university kuwait abstractthis paper examines conceptual models application computational thinking computational thinking fundamental everybody computer scientists promoted fundamental numeracy literacy according authorities field best characterize computational thinking computer scientists think manner reason computer scientists think rest us core computational thinking include notions algorithmic thinking abstraction decomposition generalization raises several issues challenges still need addressed including fundamental characteristics computational thinking relationship modeling patterns eg objectoriented lead programmingcoding thinking pattern refers recurring templates designers thinking paper propose representation thinking adopting thinking pattern called thinging utilizes diagrammatic technique called thinging machine tm claim thinging valuable process fundamental everybody computational thinking viability proclamation illustrated examples case keywordscomputational thinking conceptual modeling abstract machine thinging abstraction introduction cognitive faculty thinking involves processes reason solve computational thinking fundamental everybody computer scientists reading writing arithmetic add computational thinking every childs analytic ability computational thinking distanced digital literacycompetence focuses problemsolving processes methods creating computable solutions promoted fundamental numeracy literacy goes beyond introductory knowledge computing treat computer essential part today presents distinct form thought separate academic disciplines diagrammatic techniques analysis strategic planning perspective computational thinking computer modeling techniques essential aspects modernday understanding things people expect live world information stored accessed manipulated via computer software wing defined computational thinking something involves designing systems understanding human behavior drawing fundamental computer includes thought process thus independent technology specific type problemsolving entails distinct abilities eg able solutions executed computer human however bocconi raised several issues challenges must addressed effective integration information technology compulsory including core characteristics computational thinking relationship programmingcoding compulsory coding programming regarded key st century coding literacy today helps practice st century problemsolving modeling analytical thinking authors european eskills manifesto declared like coding literacy whether want engineer designer teacher nurse web entrepreneur youll need digital paper seek contribute current debate computational thinking particular focus following conceptualization computer conceptualization first stage modelbuilding process arrive representation addressing conceptual mainly formed upon components thinking provide framework thinking structures notions patterns according categories provide basis represent internal thinking external form modeling sense patterned thinking eg objectoriented modeling pattern refers recurring templates persons thinking process paper promotes conceptual modeling based heideggerian notion thinging framework computational thinking heideggerian thinging generalized abstract thinging machine tm core described paper propose basic computational thinking notion thing notion tm flow operations things create process release transfer receive triggering ijacsa international journal advanced computer applications vol wwwijacsathesaiorg programmingcoding diagram coded code diagram approximate conceptual form programmer behind tm expressed diagram mapped programmingcoding flowcharts important mention property tm even though explored paper achieve selfcontained paper section ii reviews tm adopted paper previously several published papers mentioned previously section iii presents examples applying tm computational thinking section iv applies tm actual case ii thinging machine tm drawing deleuze guattari declared admittedly prospectall objects understood machines tmbased conceptual modeling utilizes abstract thinging machine hereafter machine stages thinging shown diagrammatically fig philosophy thinging refers defining boundary around portion reality separating everything else labeling portion reality name however according understanding thinging thing manifests unfolds conceptual space architect realizes thing house turn things verb presents total thingness includes living space shelter natural elements family symbol etc issue explained later paper tm modifies heideggers notion thinging applying life cycle thing ontological phase producing thing things words bridge mere object rather establishes conceptual realm unified whole involving riverbanks streams landscapes representing view thinging akin abstraction differs expansive instead reductive detail tm capture thinging dynamic machine things created processed received released transferredthe operations fig heidegger offered example thinging thing jug clay shaped jug jug manifests itselfin heideggers wordsinto stands forth thingness conquests entraps void holds takes task embracing shielding penetrating wine thus connecting setting vine nature etc conceptualization thing jug comes reaction physical formation clay according heidegger apprehending itso seemsas thing italics added tm expands thinging conceptualizing jug existence machine assemblage creates eg certain shape void releases transfers eg air receives processes things thing things machine machines verb heidegger distinguished objects things handmade jug thing industrially made coke remains object industrially made coke minimal thinging maximal abstracting see later discussion note apply industrial devices cut roots thermostat example industrial product manifests environment represented later paper heidegger things unique thingy qualities related reality therefore typically found industrially generated objects according heidegger thing selfsustained selfsupporting independentsomething stands condition selfsupporting transpires means producing thing according heidegger understand thingness thing needs reflect thinging expresses thing things ie gathering tying together constituents whole according thomas heideggers view however seen tentative examining nature entities make sense artefact manufactured instrumentally without social objectives considering materialspatial agency qualities space artefact produced opposite circumstances tm handles things thing handled machines stages machine briefly described follows arrive thing flows machine eg packets arrive buffer router accept thing enters machine simplification purposes assume arriving things accepted hence combine arrive accept receive stage release thing marked ready transferred outside machine eg airport passengers wait board passport clearance process change thing changes form identity eg changes binary hexadecimal create thing born machine eg logic deduction system deduces conclusion transfer thing inputted outputted inout machine tm utilizes notion triggering triggering activation flow denoted tm diagrams dashed arrow represents dependency among flows parts flows flow triggered created activated another flow eg flow electricity triggers flow heat activated another point flow triggering initiate events starting machine eg remote signal turn multiple machines interact triggering events related machines machines stages fig thinging machine create receive release transfer process output input accept arrive ijacsa international journal advanced computer applications vol wwwijacsathesaiorg iii example according riley hunt book computational thinking modern solver abstraction anything allows us concentrate important characteristics deemphasizing less important perhaps distracting details abstraction core concept computational thinking addition notions algorithmic thinking decomposition generalization riley hunt stated programmers really kind solver computer programmers arguably important modern solvers best characterize computational thinking computer scientists think well manner computer scientists think rest us digital camera uses handful focus points computer scientists learn focus important issues abstraction notion abstraction goes back plato proposed distinguish abstract ideas ideal entities capture essence things abstraction ideas exist world note basic aspects abstraction reality reductive details abstraction important thinking nevertheless claim thinging valuable process fundamental everybody computational thinking thinging takes holistic view contrast abstraction expansive detail shown fig thinging abstractionlike process deemphasizes reduction hence facilitates seeing bigger picture note thinging abstraction performed several levels expansion reduction details fig illustrates nature thinging inverse realization reality note reductive nature objectoriented modeling eg uml following example shown fig riley hunt abstractly described thermostat involves class diagram rectangle consisting parts diagrammed compartments middle compartment lists attributes thermostat operations class diagram listed bottom compartment operations abstract references behavior object following presents alternative conceptualization thermostat static tm thermostat thermostat represented fig line previous discussion thermostat thingness includes switch fan temperature switch includes signals cool heat flow change state coolingheating machine similarly signals set temperature change state fan behavior thermostat behavior tm represented events event thing created processed released transferred received machine consists least submachines region time event side note conceptualize tms fourfoldthat consisting space time event things fig thinging expansive reverse realization reality fig thing jug things total thingness fig description class temperature adapted fig tm representation thermostat thing reality abstraction thinging object reality abstraction thinging thermostat heatswitchsettingcooloffheat fansetting onauto temperaturesetting integer setminfunctionf cooloffheat setfan onauto settemperature integer create create create switch thermostat state create coolingheating machine cool heat receive receive process process create process transfer release transfer release transfer create transfer release transfer temperat ure fan receive process receive transfer transfer transfer receive state create auto fan release transfer release transfer create transfer release transfer process receive ijacsa international journal advanced computer applications vol wwwijacsathesaiorg consider event switch turns see fig includes event circle fig region programmers things currently dealt event time machine region subgraph static representation diagram fig simplicitys sake represent event region accordingly identify basic events static description fig shown fig event switch cool event switch event switch heat event temperature set event fan event fan auto events written statements programming language control thermostat possible events chronology shown fig represents permitted sequence events example switching directly cool heat vice versa without first turning coolheat machine permitted sequences shown fig ae follows coolheat machine select cool heat fan fan set temperature select heat select state fan set temperature coolheat machine cool heat fan auto switch fan auto coolheat machine cool heat set coolheat machine coolheat machine cool heat set temperature coolheat machine switch fan auto fig event switch turns fig events thermostat fig chronology events fig permitted sequence control operations mapping class notations selecting events decision tm representation shows riley hunt declared events fig event switch cooloffheat event fan offauto event temperature set fig events thermostat create switch thermostat create state machine receive process transfer release transfer region subdiagram create process takes course transfer receive process consume release transfer time event create create create switch thermostat state create coolingheating machine cool heat receive receive process process create process transfer release transfer release transfer create transfer release transfer temperat ure fan receive process receive transfer transfer transfer receive state create auto fan release transfer release transfer create transfer release transfer process receive create switch thermostat state create machine cool heat receive process create transfer release transfer create transfer release transfer fan temperature receive process receive transfer state create auto fan release transfer ijacsa international journal advanced computer applications vol wwwijacsathesaiorg fig switch representation events left events right designs thermostat fig contrasts switch representation designs class notation given riley hunt viewed mere names items methods processes mapped tm shown fig thus produce class description tm representation important point objectoriented thinking style class description produced describing methods whereas tm tm machines developed right beginning analysis designing thermostat terms events result object orientation captures events see possibilities fig tm class entries consider events events designs events uses wire thermostat coolheat machine whereas events uses implementation merits events cheaper events reliable example events heating cooling feature still link coolheat machine cut point objectorientation discussed riley hunt seem aware available alternative designs important observation context thinking according gross drawing intimately bound thinking iv case thermostats tm modeling small artificial example problemsolving describing conceptually case involves large real help desk government ministry actual environment workplace second author maintenance process starts user contacts department help department calls process help desk process problematic system involves implicit contacts interactions alignment business case department solved help desk adhoc technique involves thinking semiautomated system built piece piece several years current documentation even though manager help desk drew flowcharts show full description processes behind help desk works tasks shown fig projecting system heideggers jug approach viewed failure give thought jug holds holds help desk operations causing types managerial supervision technical legal possible solution holistic approach involves related elements help desk system system exists reality needs better understanding thinging misthinged heideggerian language broken tool marks annihilation equipmental thing help desk helping cannot gathered around fig sample current documentation create cool process cool heat release transfer transfer receive create create create process process process release transfer transfer release transfer transfer release transfer transfer receive receive receive cool heat cool heat create create heat create thermostat state create machine cool heat receive process create transfer release transfer create transfer release transfer receive process receive transfer state create auto fan release transfer tempreture setting integer setminfunctionf cooloffheat settempreture integer setfan onauto fansetting onauto heatswitchsettingcooloffhea ijacsa international journal advanced computer applications vol wwwijacsathesaiorg accordingly consider question help desk operate conceptualize tm creates processes releases transfers receives things helping system includes things machines machines things unfolding integrated wholeness part ministrys machinery focus next thinging help desk static accordingly help desk system shown fig figure user sends request secretary workshop circle request checked decide whether repair spare parts request repair repair request flows workshop administrator processed following selecting specific technician request accomplish list technicians processed generate name technician creating task ticket additionally administrator creates task form includes request description technicians name task flows technician later examines task decide following given possible call user solve phone technician places phone call user guide user step step solve phone technician required go users workplace solve himherself technician moves workshop users location user brings computer technician repair processing computer technician following outcomes computer repaired technician takes back workshop fixed workshop admin transfers fixed computer back user computer repaired transferred back user previous outcomes lead user gets computer processes see whether repaired computer works fine result user creates report close request sends report workshop admin computer repair satisfactory user creates followup request repair sends secretary request spare parts spare parts request flows inventory department processed extract quantity current spare parts inventory transfer program checks quantity spare parts zero pending requests would incremented moreover request would released added queue pending requests greater zero request processed extract requested quantity spare parts note renovated existing system best application example possible define minimum value inventory instead permitting reach zero thus thinging system tailored existing requirements numbers requested items current quantity transferred program calculates available quantity delivered requester simple formula calculates called remaining quantity follows remaining quantity current quantity requested quantity accordingly possibilities arise remaining quantity greater equal zero words full requested quantity provided user case request released transferred storage received processed stored spare parts sent requester remaining quantity less zero result quantity called pending created calculated following pending requested quantity current quantity accordingly request specifies quantity currently possession inventory department created forwarded storage steps repeated request specifies pending quantities created considered request parallel according certain schedule list pending requests processed request loop specified dynamic tm taken processed create pending request turn processed thus leading creation ordered quantity ordered quantity added total ordered items later total ordered items along current quantity flows committee examination evaluation need spare parts processed hence decision created processed making orders flow workshop admin workshop admin orders processed create orders suppliers transfer orders purchase department order processed put hold waiting assign budget request budget created purchase department transferred budget department budget ijacsa international journal advanced computer applications vol wwwijacsathesaiorg department processes budget request approves sends approval purchase department purchase department approval processed thus leading placing order supplier fig tm representation department help desk system workshop admin receive transfer process report close request computer receive process transfer transfer release receive release transfer repaired repaired technician computer acceptable else user process technician user place storage budget department order budget approval workshop inventory department orders requester process remaining quantity current quantity requested quantity remaining pending requested quantity current available current remaining process current quantity current quantity greater checking current quantity requested quantity current quantity list pending requests requests pending add checking available quantity release create stored spare parts release create receive release transfer transfe receive transfer requested quantity available quantity release transfer create total ordered items transfer transfer pending request create process create process ordered quantity process request budget purchase department transfer release create receive transfe receive committee transfer receive transfer current quantity receive transfer process create process decision supplier release process transfer process workshop admin receive transfer process release transfer transfer receive transfer release create transfer receive process transfer release create transfe receive process release transfe transfer process technician receive transfer transfer phone call process himherself task technician name release transfer receive transfer transfer computer receive transfer transfer transfer receive create release transfer create process requires going user else technicians list release release secretary transfer receive process release transfer process receive transfer transfer release create create transfe transfer request release create create release release process create release transfer transfer transfer receive transfer receive process process transfer receive receive supplier request parts request repair release ijacsa international journal advanced computer applications vol wwwijacsathesaiorg fig events tm representation department help desk system partial behavior mentioned previously thermostat example behavior tm represented events accordingly identify following events static description fig shown fig save space identify upper part fig requesting parts event secretary receives request purchasing spare parts event inventory department receives processes request event current quantity retrieved processed event current quantity add request pending requests list update pending requests event current quantity greater extract requested quantity event find remaining quantity current quantity requested quantity process event given remaining retrieve requested items storage event send requested items requester event remaining calculate pending requested quantitycurrent create request pending items add request list pending requests event remaining calculate available current retrieve requested items storage request secretary storage requested quantity receive process transfer release request parts transfer pending request create process process list pending requests requests pending transfer inventory department orders release create transfer budget department budget approval workshop request budget purchase department transfer receivetransfer process process transfer release create transfe receive process release transfe create transfer workshop admin transfer release process transfer receive transfer release release create order receive process transfer current quantity transfer release current quantity release transfer transfe receive process current quantity current quantity greater process process remaining quantity current quantity requested quantity remaining pending requested quantity current available current remaining checking available quantity create transfer receive release transfer create release create transfer process create process decision receive committee transfe total ordered items checking current quantity add ordered quantity create process create requester stored spare parts requested quantity available quantity receive transfer release process receive receive receive transfer ijacsa international journal advanced computer applications vol wwwijacsathesaiorg event retrieve pending requests extract requested quantities event requested pending quantities current quantities sent ordering committee event committee creates orders sends workshop event orders received workshop orders supplier created event purchase department receives orders supplier event request budget created event request budget flows budget department event budget approved event orders supplier sent event ordered items received supplier event items sent storage fig shows chronology events control control superimposed onto events tm system case suppose want declare following warning messages related management system time order supplier workshop exceeds create warning message time deliver items received supplier requester exceeds create warning message fig shows declaration rules chronology events fig workshop receives order time order arrival created time processed repeatedly time exceeds tthe time period since receiving orderthen warning created similar process followed second rule fig chronology events case fig examples control case budget department budget approval workshop request budget purchase department receive receive transfer transfer process process release transfer transfer release create transfe receiv process release transfe create transfer release create workshop admin transfer receive process transfer release process supplier order supplier transfer receive storage transfer receive release transfer requester transfer receive create process create process time greater send warning cancel time cancel time greater time send warning ijacsa international journal advanced computer applications vol wwwijacsathesaiorg fig simplification tm representation department help desk system removing stages transfer release receive conclusion proposed modeling technique tm foundation computational thinking according tm approach persons thought machine forms train thought excludes modes procedural objectoriented modes thinking paper emphasizes thinking style unifying method could diverse applications tm underlying tool expressing unified totality systems things machines analogous carpeting techniques ground fabric beneath binds pieces sews patterns fabric substantiate claim contrast tm side side diagrams approaches eg thermostat although provided comprehensive evidence claim inaccuracy partial value needs efforts beyond single researcher however thermostat example case seem point merits deserve development fig case raise issue tm diagrams complexity tm specified various levels granularity example fig simplified version lower part fig stages transfer release receive deleted assumption direction flow arrow sufficient represent references langacker foundations cognitive grammar theoretical prerequisites vol palo alto ca stanford university press riley hunt computational thinking modern solver second edition boca raton fl taylor francis llc bocconi chioccariello dettori ferrari engelhardt developing computational thinking compulsory luxembourg publications office european union doi wing computational thinking thinking computing phil trans soc mathematical physical engineering sciences vol mccormack eskills manifesto european schoolnet digitaleurope brussels anderson notion schemata enterprise general discussion conference schooling acquisition knowledge anderson spiro montague eds hillsdale erlbaum heidegger thing poetry language thought hofstadter trans york harper row alfedaghi thinging software engineers international journal computer information security vol alfedaghi thinging vs objectifying software engineering international journal computer information security vol alfedaghi aljenfawi small company thinging machine th int conf info mgmt eng icime university salford manchester england september alfedaghi alhuwais enterprise asset management flow machine international journal modeling optimization vol alfedaghi software engineering interpretation information processing regulations ieee nd annual international computer software applications conference ieee compsac turku finland july august alfedaghi flowbased enterprise process modeling international journal database theory application vol deleuze guattari antioedipus capitalism schizophrenia minneapolis mn university minnesota press carreira philosophy luxury httpsphilosophyisnotaluxurycomtothinganewverb last accessed latour critique run steam matters fact matters concern critical inquiry vol winter thomas ratcliffe thomasson object instance diagrams help first year understand program behaviour diagrams international conference theory application diagrams yl gross thinking diagrams architectural artif intell rev vol ivarsson quality management support services case helpdesk service master thesis department technology management economics chalmers university technology gothenburg sweden report close request computer process repaired repaired technician computer acceptable else user process technician user place workshop admin technician phone call process himherself task technician name computer create create process requires going user else secretary create create process request process create process process request repair technicians list 
full length article cognitive abilities underlie computational thinking criterion validity computational thinking marcos romangonz alez juancarlos perezgonz alez carmen jim enezfern andez universidad nacional de educacion distancia uned faculty juan del rosal cp madrid spain article info article history received april received revised form july accepted august available online september keywords computational thinking computational thinking code literacy computer cognitive abilities cognitive assessment psychology primary secondary abstract computational thinking located focus innovation set problemsolving must acquired generations thrive digital world full objects driven software however still consensus definition measure response attempt address issues psychometric approach hand computational thinking ctt administered sample spanish th th grade descriptive statistics reliability reported paper second hand criterion validity ctt studied respect standardized psychological tests primary mental abilities pma battery rp problemsolving thus intended provide instrument measurement additionally give evidence nature associations key related psychological constructs results show statistically significant correlations least moderately intense spatial ability reasoning ability problemsolving ability results consistent recent theoretical proposals linking components cattelhorncarroll chc intelligence corroborate conceptualization problemsolving ability elsevier ltd rights reserved introduction live immersed digital ecosystem full objects driven software manovich context able handle language computers emerging inescapable literacy allows us participate fully effectively digital reality surrounds us program programmed rushkoff appenabled appdependent gardner davis term codeliteracy recently coined refer process teaching readwrite computer programming languages prensky rushkoff thus considered person codeliterate able read write language computers machines think computationally rom angonzalez codeliteracy refers ultimately readwrite practice computational thinking refers underlying problemsolving cognitive process allows words computer programming fundamental enables come alive lye koh although transferred various types directly involve programming tasks wing given current reality overrun digital surprising renewed interest countries introduce set problemsolving acquired generations even becoming viewed core stem technology engineering mathematics disciplines henderson cortina wing weintrop although learn think computationally long recognized important positive cognitive development liao bright mayer papert computation become pervasive underpinning communication culture business society howland good increasingly seen essential create rather consume technology resnick thus governments around world incorporating computer programming national curricula recent decision introduce computer teaching primary onwards uk brown others european countries european schoolnet reflects growing recognition importance corresponding author email addresses mromaneduunedes romangonz alez jcperezedu unedes jc perezgonz alez mjimenezeduunedes jimenezfern andez contents lists available sciencedirect computers human behavior journal homepage wwwelseviercomlocatecomphumbeh httpdxdoiorgjchb elsevier ltd rights reserved computers human behavior however still little consensus formal definition gouws bradshaw wentworth kalelioglu glbahar kukul disagreements integrated curricula lye koh similarly worrying vacuum measure assess fact must addressed without attention assessment little hope making successfully curriculum furthermore order judge effectiveness curriculum incorporating measures would enable educators assess learned need validated grover pea response attempt address issues psychometric approach hand computational thinking ctt designed developed reported well descriptive statistics reliability derived administration sample exceeding thousand spanish hand criterion validity cronbach meehl ctt studied respect already standardized psychological tests core cognitive abilities thus paper aimed providing instrument measuring additionally giving evidence correlations wellestablished psychological constructs cognitive abilities computational thinking definitions distinguish generic definitions operational definitions curricular definitions generic definitions decade ago jeanette wings foundational paper defined involves designing systems understanding human behavior drawing fundamental computer wing thus cts essence thinking like computer scientist confronted first generic definition revisited specified successive attempts last years still reaching agreement grover pea kalelioglu wing clarified thought processes involved formulating solutions solutions represented form effectively carried informationprocessing agent wing online year later definition simplified aho conceptualizes thought processes involved formulating solutions represented computational steps algorithms aho operational definitions computer association csta international society technology iste developed operational definition computational thinking provides framework common vocabulary computer educators problemsolving process includes limited following characteristics formulating enables us computer tools help solve logically organizing analyzing representing abstractions models simulations automating solutions algorithmic thinking series ordered steps identifying analyzing implementing possible solutions goal achieving efficient effective combination steps resources generalizing transferring process wide variety csta iste online educationalcurricular definitions definitions strict sense frameworks developing classroom settings mentioned next uk organization computing cas states involves logic algorithms decomposition patterns abstraction evaluation approaches working tinkering creating debugging persevering collaborating classroom cas barefoot moreover united states brennan resnick describe framework involves key dimensions computational sequences loops events parallelism conditionals operators computational practices experimenting iterating testing debugging reusing remixing abstracting modularizing computational perspectives expressing connecting questioning shows crosstab intersecting framework dimensions brennan resnick sampling domain computational thinking ctt detailed subsection computational thinking chc intelligence involves thinking solve algorithmically eg brennan resnick grover pea intelligence ie general mental ability general cognitive ability involves primarily ability reason plan solve gottfredson even authors alternative approaches conceptualization intelligence recognize intelligence computational capacity ability process certain kinds information process fashioning products gardner within cognitive approach recently suggested ambrosio xavier georges computational thinking related following abilitiesfactors cattellhorncarroll chc intelligence mcgrew schneider mcgrew fluid reasoning gf defined deliberate controlled mental operations solve novel cannot performed automatically mental operations often include drawing inferences concept formation classification generating testing hypothesis identifying relations comprehending implications extrapolating transforming information inductive deductive reasoning generally considered hallmark indicators gf mcgrew visual processing gv defined ability generate store retrieve transform visual images sensations gv abilities typically measured tasks figural geometric stimuli require perception transformation visual shapes forms images andor tasks require maintaining spatial orientation regard objects change move space mcgrew shortterm memory gsm defined ability apprehend maintain awareness limited elements information immediate situation events occurred last minute limitedcapacity system loses information quickly decay memory traces unless individual activates cognitive resources maintain information immediate awareness mcgrew therefore expected computational thinking correlate already validated tests aimed measuring cognitive abilities cited romangonz alez computers human behavior computational thinking assessment count validated measurement instruments something necessary valuable area however moment still large gap tests relating undergone comprehensive psychometric validation process mhling ruf hubwieser buffum say developing assessments urgent area need relatively young computer community advances toward ranks mature disciplines physics established standardized assessments time buffum anyway find recent years remarkable attempts measure assess th th grade ones papers interest university california comes instrument fairy assessment alice werner denner campe kawamoto tries measure understanding abstraction conditional logic algorithmic thinking middle utilize solve however instrument designed ad hoc context programming environment alice graczynska undergone psychometric validation process clemson university south carolina provides complementary perspective daily leonard jorg babu gundersen leonard authors propose kinesthetic approach embodied assessment th th grade alternate programming motion sequences choreographies alice environment representation sequences physicalkinesthetic environment assessment tool combines settings psychometric properties reported another interesting line middle provided university colorado videogame programming environment agentsheets within first koh basawapatna bennett repenning authors identify several computational thinking patterns ctp young programmers abstract creation videogames context computational thinking patterns graph automated tool analyzes games programmed represents graphically far game involved ctp compared within second basawapatna koh repenning webb marshall authors try assess whether able transfer ctp acquired videogame programming context scientific simulations programming assessment ctpquiz instrument whose reliability validity reported similarly universidad rey juan carlos madrid spain dr presented morenoleon robles dr free open source web application designed analyze simply automatically projects programmed resnick well provides feedback improve programming middle morenoleon robles romangonz alez order assign overall score project dr infers programmer competence along following dimensions abstraction decomposition parallelism logical thinking synchronization flow control user interactivity representation therefore dr strictly cognitive tool formative assessment projects dr currently validation process although convergent validity respect traditional metrics software quality complexity already reported morenoleon robles romangonz alez furthermore consider bebras international contest competition born lithuania aims promote interest excellence primary secondary around world field computer perspective cartelli dagiene futschek dagiene futschek dagiene stupuriene year contest proposes set bebras tasks whose overall approach resolution real significant transfer projection bebras tasks independent particular software hardware administered individuals without prior programming experience crosstab intersecting framework brennan resnick sampling domain ctt framework ctt dimension description components sampling domain computational employ program sequences computational concept addressed loops events parallelism conditionals operators computational practices problemsolving practices occurs process programming experimenting iterating required task testing debugging reusing remixing abstracting modularizing computational perspectives understandings relationships others digital world around expressing connecting questioning yes partly httpwwwaliceorgindexphp httpwwwagentsheetscom httpdrscratchorg httpsscratchmitedu httpwwwbebrasorg romangonz alez computers human behavior features bebras tasks pointed likely embryo future pisa programme international assessment field computer hubwieser mhling jaskova kovacova anyway bebras international contest moment event promoting measuring instrument among considerations composed stable determined set taskitems set varies year year slight modifications along countries however growing expansion aroused interest psychometry researchers begun investigate possible virtues measurement instrument thus descriptive performance bebras tasks recently published referred corresponding editions bebras international contest held germany hubwieser mhling italy bellettini taiwan lee lin lin turkey kalelioglu glbahar madran tasks studied significantly higher performances male comparison female reported strictly speaking knowledge tests aimed middlehigh fully subjected psychometric requirements instruments currently undergoing validation process measuring basic programming abilities mhling designed bavarian th th grade aimed measuring ability execute given program based socalled flow control structures considered core sequencing step another selection either thing another repetition thing control structures lead following covered sequence operations conditional statement ifelse without alternative loop fixed iterations repeat times loop exit condition conditional loop repeat nesting structures create complex programs commutative assessment weintrop wilensky designed highschool th th grade aimed measuring understanding computational depending whether occur scripts written visual blockbased textual programming languages key transition reach higher levels codeliteracy length items addresses following conditionals definedfixed loops undefinedunfixed loops simple functions functions parametersvariables computational thinking overall computational thinking ctt developed following practical guide validating computer knowledge assessments application middle buffum aligned international standards psychological testing aera apa ncme addition ctt consistent computational thinking tests validation aimed middlehigh measuring basic programming abilities mhling commutative assessment weintrop wilensky described subsection ctt initially designed length multiple choice items version october content validation process twenty experts judgement first version refined final version december items length romangonz alez built following principles aim ctt aims measure development subject operational definition measured construct involves ability formulate solve relying fundamental computing logicsyntax programming languages basic sequences loops iteration conditionals functions variables target population ctt mainly designed intended spanish years old th th grade although lower grades th th grade upper grades th th grade instrument type multiple choice answer options correct length estimated completion time items min item ctt designed characterized according following dimensions sampling domain computational concept addressed item addresses following computational ordered increasing difficulty basic directions sequences items loopserepeat times items loopserepeat items ifesimple conditional items ifelseecomplex conditional items conditional items simple functions items computational aligned framework brennan resnick see csta computer standards th th grade csta environmentinterface item ctt items presented following environmentsinterfaces maze items canvas items interfaces common popular sites programming codeorg kalelioglu answer alternatives style item response alternatives presented styles visual arrows items visual blocks items styles common popular sites programming codeorg kalelioglu existence nonexistence nesting depending whether item solution involves script items without items nesting computational concept embedded another higher hierarchy mhling required task depending following cognitive tasks required item sequencing must sequence stating orderly manner set commands items completion must complete incomplete given set commands items debugging must debug incorrect given set commands items dimension partially aligned aforementioned computational practices framework brennan resnick see ctt administered collectively online performed via nonmobile mobile electronic devices preliminary results ctt psychometric properties administration sample spanish th th grade already reported romangonz alez erez available httpgoogliyekmb spanish version forms versions ctt available free charge purposes first author httpsstudiocodeorgshour httpsstudiocodeorgscourse romangonz alez computers human behavior gonz alez jimenezfern andez examples definitive ctt items translated english shown figs specifications detailed method participants ctt administered total sample spanish schools enrolled th th grade distribution subjects grade shown total sample belong public schools belong private schools considering device ctt administered personal computer tablet none subjects prior programming formal experience ctt administered sampling procedure probabilistic intentional depending reasons led sample subjects divided subsamples subsample composed individuals belonging classrooms subsequently enrolled accelerated intro cs course codeorg subsample composed individuals belonging classrooms subsequently enrolled cs fundamentals course codeorg subsample composed individuals belonging classrooms subsequently started learn programming subsample composed individuals belonging classrooms although subsequently start learn programming interested measuring addition ctt standardized tests administered concurrently part subjects specifically paper administrations primary mental abilities pma battery rp problemsolving considered additional administrations performed subjects belonging subsample following subsection standardized tests pma rp described instruments order address criterion validation ctt another standardized instruments administered primary mental abilities pma battery rp problemsolving described next primary mental abilities pma battery pma battery aimed appreciating basic cognitive abilities subtests allow estimate main components intelligence wellknown measure cognitive abilities eg hertzog bleckley quiroga developed thurstone maximum administration time min years old onwards spanish technical manual tea ediciones reports excellent reliability validity coefficients subtests pma provides precise measurement following cognitive abilities verbal factor pmav ability understand express ideas words pmav items involve selecting accurate synonym word given spatial factor pmas ability imagine devise objects dimensions pmas items involve selecting equal figures given rotated reasoning factor pmar ability solve logical understand plan pmar items involve selecting option continues logical series given numerical factor pman ability handle numbers quantitative pman items involve checking mentally sum twodigit numbers rp problemsolving rp problemsolving aimed assess speed flexibility performing logical operations maximum administration time min years old onwards spanish technical manual seisdedos reports excellent reliability values rp rxx splithalf method well criterion validity regarding changes cognitive flexibility rxy datspatial rxy fig ctt item loopserepeat times maze visual arrows nonesting completion cambios de flexibilidad cognitiva changes cognitive flexibility seisdedos dat differential aptitude tests bennett romangonz alez computers human behavior fig ctt item loopserepeat times canvas visual blocks nonesting debugging fig ctt item loopserepeat ifesimple conditional maze visual blocks yesnesting sequencing fig ctt item loopserepeat times simple functions canvas visual blocks yesnesting sequencing romangonz alez computers human behavior rp appreciates highlevel cognitive ability series logical relations given understood subject order determine whether relations met several simple structures rp closely related nonverbal aspects intelligence seems important predictor professional previously proxy general mental ability eg barros kausel cuadra daz caceres conejeros rp items involve structures subject must decide whether conditions satisfied fig rp requires enough concentration errors penalized considered cognitive abilities underlying rp performance seisdedos reasoning due fact logical relations satisfy structures must previously understood subject spatial ability subject must process small circles squares contained structure order decide condition satisfied working memory allows subject retain given logical relation without need constantly consulting procedure participating subjects enrolled elective subject computer held twice week typically ctt administered first weekly classes another standardized instrument administered done second weekly class ctt collective administration computer teacher followed instructions sent email week containing url access online direct answers ctt items stored google drive database linked instrument subsequently downloaded excelxls file collective administration standardized instrument pma rp previously signed online platform publishing house holder tests commercial rights come administration day subjects logged platform performed corresponding instrument pma battery rp never afterwards administrator profile could download subjects results excelxls file finally xls files generated collection exported single sav file constitutes matrix analysis spss software version analysis arise results exposed results discussion descriptive statistics shows main descriptive statistics ctt score calculated sum correct answers along items entire sample fig left histogram showing distribution ctt score along sample depicted seen aforementioned distribution fits remarkably normal curve although given large size sample small existing maladjustments penalized kolmogorovsmirnov rejects null hypothesis normality zks fig right show success rate per item expressed per unit item difficulty index confirms empirically progressive difficulty ctt already anticipated experts content validation process roman gonzalez average success rate along items medium difficulty ranging item difficulty item low difficulty summarizing stated ctt score almost normally distributed ie symmetrically distributed skewness showing proper variability possible construct suitable scales percentiles target population ctt appropriate degree difficulty medium target population increasing difficulty along items recommended abilities tests eg carpenter shell elithorn telford differences grade sample segmented regarding grade descriptive statistics shown obtained specifically results split according spanish system end primary th th grade start secondary th th grade end secondary th th grade box plots ctt score split aforementioned grades shown fig outlier belongs case th grade obtained ctt score equal ie standard deviations mean reference anova shows statistically significant differences ctt score regarding grade posthoc tukey additionally shows statistically significant differences possible pairs means hence stated performance ctt increases grade result consistent assumption problemsolving ability therefore linked cognitive development maturity subjects ackerman rolfhus mayer caruso salovey differences possible differential performance ctt regarding find statistically significant difference ctt score favor male resulting effect size measured cohens cohen equal considered lowmoderate effect aforementioned difference analyzed along grades higher means ctt score always found distribution total sample grade total grade th yo count total th yo count total th yo count total th yo count total th yo count total th yo count total total count total httpwwweteaedicionescom romangonz alez computers human behavior male although differences statistically significant th th grade onwards intense th th grade hence seems progressive gap ctt performance advance along grades fig differences consistent found previous bebras tasks investigations report higher yields male described subsection fig item example rp problemsolving descriptive statistics ctt score entire sample mean std error mean median mode std deviation variance skewness kurtosis minimum maximum percentiles fig histogram ctt score left item difficulty index item ctt right romangonz alez computers human behavior reliability reliability internal consistency ctt measured cronbachs alfa considered good reliability nunnally bernstein reliability studied regarding grade administrations device find reliability increases grade coherent greater accuracy consistency often shown answers coming upper grades anastasi reliability increases ctt administered mobile devices tablets perhaps devices allow subject rotate screen side another reducing spatial cognitive load items avoiding subjects commit unexpected errors interpretation supported results obtained comparing average yield ctt subjects performed computer subjects tablet instance th th grade xcomputer vs xtablet future achieve larger sample subjects perform ctt tablet aforementioned significant differences devices continue necessary construct scales ctt depending administration device criterion validity relative primary mental abilities pma battery correlations ctt various tests pma battery shown seen ctt positive statistically significant correlation moderately intense pmar reasoning factor pmas spatial factor slightly intense pmav verbal factor statistically significant correlation ctt pman numerical factor corresponding scatter plots shown fig point perform multiple linear regression ctt score considered dependent variable based pmav pmas pmar pman considered predictors summarizes de regression calculated enter method regression based pma battery correlates ctt means adjusted ctt variance explained linear combination primary mental abilities measured pma battery normality regression residuals verified regression able explain statistically significant differences ctt however shown following contains coefficients regression pmas spatial factor pmar reasoning factor specifically statistically significant explain differences dependent variable ctt standardized coefficients highest lowest value bpmas bpmar bpmav bpman perspective results point important issues firstly still ctt variance explained primary mental abilities measured pma battery suggests certain independence psychological construct distinct traditional aptitudes secondly cognitive abilities higher explanatory power reasoning ability spatial ability abundant evidence literature reports certain male superiority regarding former kuhn holling recently report differences reasoning ability favoring males german th th grade regarding latter metaanalysis demonstrate higher male spatial ability especially tasks involve mentally rotation figures linn petersen voyer voyer bryden could explain higher yield ctt seen subsection relative rp problemsolving correlation ctt rp problemsolving shown seen find positive statistically significant moderatelystrongly intense correlation instruments corresponding scatter plot shown fig coefficient determination ie shared variance recall rp appreciates highlevel cognitive ability previously proxy general mental ability results descriptive statistics ctt score split grades grades th th th th th th mean std error mean median mode std deviation variance skewness kurtosis minimum maximum percentiles fig box plots ctt score split grades romangonz alez computers human behavior indicate ctt correlate intensely rp primary mental abilities measured pma battery hence seems computational thinking could fundamentally linked general mental ability particularly fluid intelligence lesser extent cognitive aptitudes logical reasoning spatial ability results preceding subsections triangulated find clear consistency magnitude correlations ctt pma ctt rp expected composition computational thinking chc intelligence exposed subsection point view powerful evidence criterion concurrent validity ctt well empirical confirmation computational thinking constructs composition proposed ambrosio implications limitations ctt strengths like administered pretest conditions measure initial development without prior programming experience th th grade collectively administered could massive screenings early detection abilities special needs programming tasks utilized collecting quantitative prepost evaluations efficacy curricula programs aimed fostering would desirable practice versus qualitative approach mostly literature far lye koh could along academic professional guidance processes towards stem disciplines however ctt obvious limitations weaknesses ctt provides static decontextualized assessment therefore recommend complement assessment tools designed formative perspective dr morenoleon terms framework brennan resnick ctt overly focused computational covers computational practices partly ignores computational perspectives ctt demands projection computational thinking logical visuospatial mazes designing geometric patterns implies clear bias ctt computational thinking projected features modeling scientific simulations weintrop algorithmic composition computational music edwards digital interactive storytelling burke howland good latter authors report significantly higher values computational complexity scripts written th th grade comparison male peers within narrative tasks differences ctt score mean std deviation effect size cohens entire sample grades th th th th th th fig box plots ctt score split along grades reliability internal consistency ctt cronbachs alpha cronbachs alpha entire sample computer tablet grades th th computer tablet th th computer tablet th th computer tablet correlations pearsons ctt pma battery pmav pmas pmar pman ctt pmav pmas pmar romangonz alez computers human behavior result consistent slight female superiority tasks involving verbal ability reported classical literature hyde linn seems therefore direction differences vary depending type ability projected finally ctt entirely designed multiple choice items might measuring lower cognitive complexity levels recognize understand gouws fig scatter plots ctt pma battery summary regression ctt onto pma subtests square adjusted square std error estimate predictors constant pmav pmas pmar pman standardized coefficientsa regression ctt onto pma subtests standardized coefficients constant pmav pmas pmar pman dependent variable ctt romangonz alez computers human behavior instrument intended measure higher levels complexity apply assimilate include items require recognize evoke correct algorithm well open complex whose resolution demands creatively transfer towards domains conclusions paper provided evidences reliability criterion validity instrument assessment additionally expanded understanding nature theorydriven exploration associations established psychological constructs cognitive sphere found expected positive small moderate significant correlations primary mental abilities thurstone intelligence well correlation problemsolving ability proxy general mental ability findings consistent recent theoretical proposals ambrosio linking core elements chc intelligence mcgrew especially respect gf fluid intelligence gv visual processing furthermore results support statement fundamentally linked general mental ability though lesser extent specific cognitive aptitudes inductive reasoning spatial verbal abilities corroborates conceptualization problemsolving ability eg brennan resnick lye koh wing consistent framework recently described kalelioglu defined complex highorder thinking involved problemsolving processes overall noted paper contributes establishment nomological net cronbach meehl computational thinking emergent scientific construct future might expand nomological net exploring related cognitive computational variables working memory executive functions specific programming among others finally plan following lines concerning ctt convergent validity ctt alternative assessment tools dr morenoleon robles bebras tasks dagiene stupuriene measuring basic programming abilities mhling commutative assessment weintrop wilensky ctt adaptation translation languages already underway adaptationstranslations english portuguese replications psychometric populations enhanced ctt versions including items require subject evocation algorithms andor items demand project transfer scientific narrative musical acknowledgements thank professor dr kate howland university sussex collaborating adaptation translation ctt items spanish language english language references ackerman rolfhus locus adult intelligence knowledge abilities nonability traits psychology aging dxdoiorg aera apa ncme standards psychological testing washington dc aera aho computation computational thinking computer journal correlation ctt rp problemsolving rp ctt pearson correlation sig tailed fig scatter plot ctt rp correlations ctt pma ctt rp contingency gf gv gsm components chc pman pmav pmas pmar rp ctt selected components chc intelligence gf measured following instruments yes yes gv yes yes gsm yes romangonz alez computers human behavior httpdxdoiorgcomjnlbxs ambrosio xavier georges digital ink cognitive assessment computational thinking frontiers conference fie ieee httpdxdoiorgfie anastasi psychological testing rd ed oxford england macmillan barefoot computational thinking web page retrieved barefootcasorgukbarefootprimarycomputingresourcesconcepts computationalthinking barros kausel cuadra daz general mental ability personality traits predict job performance chilean organizations international journal selection assessment dxdoiorgijsa basawapatna koh repenning webb marshall recognizing computational thinking patterns proceedings nd technical symposium computer dxdoiorg bellettini lonati malchiodi monga morpurgo torelli challenging bebras tasks irt analysis based performance italian proceedings conference innovation technology computer httpdxdoiorg bennett differential aptitude tests technical manual york psychological corporation brennan resnick frameworks studying assessing development computational thinking proceedings annual meeting american association vancouver canada retrieved httpscratchedgseharvardeductfilesaerapdf brown kolling crick peyton jones humphreys sentance bringing computer back schools lessons uk proceeding th technical symposium computer httpdxdoiorg buffum lobene frankosky boyer wiebe lester practical guide developing validating computer knowledge assessments application middle proceedings th technical symposium computer httpdxdoiorg burke markings pencil introducing programmingaswriting middle classroom journal media literacy retrieved fromhttpericedgovidej caceres conejeros efecto de un modelo de metodologa centrada en el aprendizaje sobre el pensamiento crtico el pensamiento creativo la capacidad de resolucion de problemas en estudiantes con talento academico revista espanola de pedagoga retrieved httpwwwjstororgstable carpenter shell intelligence measures theoretical account processing raven progressive matrices psychological review httpdxdoiorgx cartelli dagiene futschek bebras contest digital competence assessment analysis frameworks cartelli ed current trends future practices digital literacy competence hershey pa igi global cohen power primer psychological bulletin dxdoiorg cronbach meehl construct validity psychological tests psychological bulletin httpdxdoiorgh csta ke computer standards retrieved httpcstaacmorg curriculumsubcurrfilescstakcsspdf csta iste operational definition computational thinking ke retrieved httpcstaacmorgcurriculumsubcurrfiles compthinkingflyerpdf dagiene futschek bebras international contest informatics computer literacy criteria good tasks mittermeir syso eds informatics educationsupporting computational thinking berlin springer dagiene stupuriene informatics based attractive tasks contest proceedings keycit ekey competencies informatics ict retrieved httpwwwbebras orgsitesdefaultfilesdocumentspublicationsdagienecpdf daily leonard jorg babu gundersen dancing alice exploring embodied pedagogical strategies computational thinking proceedings th technical symposium computer httpdxdoiorg ediciones pma aptitudes mentales primarias manual tecnico pma primary mental abilities technical manual madrid tea ediciones edwards algorithmic composition computational thinking music communications httpdxdoiorg elithorn telford computer analysis intellectual international journal manmachine httpdxdoiorg european schoolnet computing future computer programming coding priorities curricula initiatives europe technical report retrieved fromhttpwwweunorgpublicationsdetail publicationid gardner failing grasp core mi theory response visser intelligence httpdxdoiorgjintell gardner davis app generation todays youth navigate identity intimacy imagination digital world yale university press gottfredson matters complexity everyday life intelligence httpdxdoiorgs gouws bradshaw wentworth computational thinking evaluation game lightbot proceedings th conference innovation technology computer httpdxdoiorg graczynska alice tool programming schools natural httpdxdoiorgns grover pea computational thinking ke review state field researcher httpdxdoiorg henderson cortina wing computational thinking sigcse bulletin httpdxdoiorg hertzog bleckley differences structure intelligence influences information processing speed intelligence dxdoiorgs howland good communicate computationally flip bimodal programming language game creation computers httpdxdoiorgjcompedu hubwieser mhling playing pisa bebras proceedings th workshop primary secondary computing httpdxdoiorg hubwieser mhling investigating psychometric structure bebras contest towards measuring computational thinking international conference teaching computing engineering latice httpdxdoiorglatice hyde linn differences verbal ability metaanalysis psychological bulletin httpdxdoiorg jaskova kov acov bebras contest blind pupils proceedings th workshop primary secondary computing httpdxdoiorg kalelioglu teaching programming codeorg computers human behavior httpdxdoiorg jchb kalelioglu glbahar kukul framework computational thinking based systematic review baltic journal modern computing retrieved httpwwwbjmclulvfileadmin useruploadluportalprojektibjmccontentskalelioglupdf kalelioglu glbahar madran snapshot first implementation bebras international informatics contest turkey brodnik vahrenhold eds informatics schools curricula competences competitions berna springer httpdxdoiorg koh basawapatna bennett repenning towards automatic recognition computational thinking adaptive visual language visual languages humancentric computing vlhcc ieee symposium httpdxdoiorgvlhcc kuhn holling reasoning ability scholastic achievement multilevel mediation analysis individual differences httpdxdoiorgjlindif lee lin lin assessment computational thinking among vocational taiwan world conference multimedia hypermedia telecommunications retrieved httpwwweditliborgp leonard dsouza babu daily jorg waddell embodying programming constellation multimodal literacy practices computational thinking creative movement biology virtual environment interactions journal language literacy retrieved httpjollecoeugaeduwpcontentuploadsleonardtemplatefinalfixedlinkspdf liao bright effects computer programming cognitive outcomes metaanalysis journal computing httpdxdoiorgeghhkajrrkm linn petersen emergence characterization sex differences spatial ability metaanalysis child development httpdxdoiorg lye koh review teaching computational thinking programming next computers human behavior httpdxdoiorgjchb manovich software takes command york bloomsbury mayer teaching computer programming multiple perspectives york routledge mayer caruso salovey emotional intelligence meets traditional standards intelligence intelligence dxdoiorgs mcgrew chc theory human cognitive abilities project standing shoulders giants psychometric intelligence intelligence httpdxdoiorgjintell morenoleon robles automatic detection bad programming romangonz alez computers human behavior habits preliminary frontiers conference fie ieee httpdxdoiorgfie morenoleon robles analyze projects dr assess computational thinking conference retrieved httpjemolemereplicationscratchinferctpdf morenoleon robles dr web tool automatically evaluate projects proceedings th workshop primary secondary computing httpdxdoiorg morenoleon robles rom angonz alez dr automatic analysis projects assess foster computational thinking red revista de educacion distancia retrieved httpwwwumeseadred morenoroblespdf morenoleon robles rom angonz alez comparing computa tional thinking development assessment software complexity metrics ieee global engineering conference educon httpdxdoiorgeducon mhling ruf hubwieser first results psychometric measuring basic programming abilities proceedings th workshop primary secondary computing dxdoiorg nunnally bernstein psychometric theory rd ed york mcgrawhill papert mindstorms computers powerful ideas york basic books prensky january programming literacy blog post retrieved fromhttpwwwedutopiaorgliteracycomputerprogramming quiroga escorial rom morillo jarabo privado colom reliably measure general factor intelligence commercial video games yes intelligence httpdxdoiorg jintell resnick maloney monroyhern andez rusk eastmond brennan silverman programming communications httpdxdoiorg romangonz alez aprender programar apps como enriquecimiento curricular en alumnado de alta capacidad bordon revista de pedagoga httpdxdoiorgbordon romangonz alez computational thinking guidelines content validation th annual international conference technologies barcelona spain httpdxdoiorg rg romangonz alez erezgonz alez jim enezfern andez de pensamiento computacional diseno psicometra general computational thinking general psychometry iii congreso internacional sobre aprendizaje innovacion competitividad cinaic madrid spain dxdoiorgrg rushkoff november code literacy stcentury requirement blog post retrieved httpwwwedutopiaorgblogcodeliteracystcenturyrequirementdouglasrushkoff rushkoff program programmed york books schneider mcgrew cattellhorncarroll intelligence flanagan harrison eds contemporary intellectual assessment theories tests issues rd ed york guilford seisdedos cambios de flexibilidad cognitiva manual tecnico changes cognitive flexibility technical manual madrid tea ediciones seisdedos rp de resolucion de problemas manual ecnico rp problemsolving technical manual madrid tea ediciones thurstone primary mental abilities chicago university chicago press voyer voyer bryden magnitude sex differences spatial abilities metaanalysis consideration critical variables psychological bulletin httpdxdoiorg weintrop beheshti horn orton jona trouille defining computational thinking mathematics classrooms journal technology httpdxdoiorg weintrop wilensky commutative assessments compare conceptual understanding blocksbased textbased programs proceedings eleventh annual international conference international computing icer httpdxdoiorg werner denner campe kawamoto fairy performance assessment measuring computational thinking middle proceedings rd technical symposium computer httpdxdoiorg wing computational thinking communications httpdxdoiorg wing computational thinking thinking computing philosophical transactions series mathematical physical engineering sciences httpdxdoiorgrsta wing notebook computational thinkingewhat link magazine carnegie mellon university computer retrieved httpwwwcscmuedulinkresearchnotebookcomputationalthinkingwhatandwhy romangonz alez computers human behavior 
