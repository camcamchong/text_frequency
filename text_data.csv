text
international forum of educational technology   society a k   computational thinking curriculum framework  implications for teacher knowledge author s   charoula angeli  joke voogt  andrew fluck  mary webb  margaret cox  joyce malyn smith and jason zagami source  journal of educational technology   society   vol      no     july        pp        published by  international forum of educational technology   society stable url  https   www jstor org stable         jeductechsoci         references linked references are available on jstor for this article  https   www jstor org stable         jeductechsoci         seq   cid pdfreference references tab contents you may need to log in to jstor to access the linked references  jstor is a not for profit service that helps scholars  researchers  and students discover  use  and build upon a wide range of content in a trusted digital archive  we use information technology and tools to increase productivity and facilitate new forms of scholarship  for more information about jstor  please contact support jstor org  your use of the jstor archive indicates your acceptance of the terms   conditions of use  available at https   about jstor org terms international forum of educational technology   society is collaborating with jstor to digitize  preserve and extend access to journal of educational technology   society this content downloaded from               on wed     jan               utc all use subject to htt angeli  c   voogt  j   fluck  a   webb  m   cox  m   malyn smith  j     zagami  j          a k   computational thinking curriculum framework  implications for teacher knowledge  educational technology   society                    issn            online  and            print   this article of the journal of educational technology   society is available under creative commons cc by nd nc     license  https   creativecommons org licenses by nc nd        for further queries  please contact journal editors at ets editors ifets info  a k   computational thinking curriculum framework  implications for teacher knowledge charoula angeli     joke voogt    andrew fluck    mary webb    margaret cox    joyce malyn smith  and jason zagami   university of cyprus  cyprus     university of amsterdam  the netherlands     university of tasmania  australia     king s college london  uk     education development center  usa     griffith university  australia    cangeli ucy ac cy    j m voogt uva nl    andrew fluck utas edu au    mary webb kcl ac uk    mj cox kcl ac uk    jmsmith edc org    j zagami griffith edu au  corresponding author abstract adding computer science as a separate school subject to the core k   curriculum is a complex issue with educational challenges  the authors herein address two of these challenges      the design of the curriculum based on a generic computational thinking framework  and     the knowledge teachers need to teach the curriculum  the first issue is discussed within a perspective of designing an authentic computational thinking curriculum with a focus on real world problems  the second issue is addressed within the framework of technological pedagogical content knowledge explicating in detail the body of knowledge that teachers need to have to be able to teach computational thinking in a k   environment  an example of how these ideas can be applied in practice is also given  while it is recognized there is a lack of adequate empirical evidence in terms of the effectiveness of the frameworks proposed herein  it is expected that our knowledge and research base will dramatically increase over the next several years  as more countries around the world add computer science as a separate school subject to their k   curriculum  keywords computational thinking curriculum  pedagogical content knowledge  technological pedagogical content knowledge  teacher preparation  k   introduction in a world in which digital technology plays an important role in carrying out essential daily life tasks  it is imperative individuals have the education  knowledge  and skills to critically understand the technological systems they use  as well as to be able to troubleshoot and problem solve when things go wrong  wing        czerkawski        national research council         czerkawski        argues the knowledge that individuals need to have in order to competently respond to the challenges of the   st century goes beyond the acquisition of mere skills with immediate application  to knowledge with long term value that will enable them to understand the basics of computer structures and practices  in essence  the society needs citizens who understand the true affordances of computers in terms of what they can and cannot do  so they themselves become effective authors creators of computational tools  wing        broadened the idea of computation  and proposed that computational thinking should be considered as a basic skill taught across the curriculum  she defined computational thinking as the thought process of formulating and solving problems with the use of computers  according to wing         the teaching of computational thinking  as a basic skill across the school curriculum  will enable k    students to learn abstract  algorithmic and logical thinking  and be prepared to solve complex and open ended problems  how do we then prepare our students to develop the knowledge they need to survive and effectively cope with the technological challenges of the   st century  as many educators strongly argued  this educational goal can be achieved by integrating computer science as a distinct discipline and a school subject in the k    curriculum  barr   stephenson        fluck  webb  cox  angeli  malyn smith  voogt    zagami        goode  chapman    margolis        hazzan  lapidot    ragonis        tucker  deek  jones  mccowan  stephenson    verno         fluck et al         stated that there is a strong case for integrating computer science in the k    curriculum with arguments from both the educational and economic sectors  succinctly  the educational case asserts that computer science   a  develops and promotes a unique way of thinking about problems  namely computational thinking  that uses the power of logic  algorithm  abstraction  and precision   b  empowers individuals to create new artifacts and to move from being consumers of technology to producers of technology  and  c  redefines the way learners think about other disciplines  and  this can have a major impact on teaching practices  such as  for example  interdisciplinary teaching in school  the economic case stresses the critical shortage of applicants in it related jobs  especially in europe  this content downloaded from               on wed     jan               utc all use subject to htt    while at the same time the european commission predicts that major european countries  such as uk  will need an additional         it professionals by       husing   korte         adding computer science as a separate school subject to the core k    curriculum is  however  a complex issue that involves many legislative  administrative  political  and educational challenges  the latter are the focal point of this paper  in particular  there are two major educational challenges related to   a  what computer science content to teach across different educational levels  and  b  what body of knowledge do teachers need to have to be able to teach the computer science curriculum  over the years  a variety of computer science curricula  representing different views about what is important to teach in computer science and when  have been proposed in the literature and or enacted in different countries  such as uk  usa  austria  germany  mongolia  israel  greece  cyprus  and recently australia  well known efforts in the united states are  amongst others  the computer science principles  exploring computer science  beauty and joy of computing  project lead the way  pltw   and code org  computer science principles is part of a larger national effort in the united states  namely the cs   k project that aims to develop effective high school computing curricula enacted in        high schools taught by        well prepared teachers by       computer science principles constitutes a framework of standards from which high school computer science courses can be built  astrachan   briggs         the framework is specified through a set of six computational thinking practices  i e   connecting computing  developing computational artifacts  analyzing problems and artifacts  abstracting  communicating  and collaborating   and a set of seven big ideas of computer science  i e   creativity  abstraction  data and information  algorithms  programming  internet  and global impact   and has been adopted by several high schools in the united states for developing computer science courses  such as the beauty and joy of computing  code org  and pltw  astrachan   briggs        desjardins         the beauty and joy of computing course focuses on the big ideas of computing  and its main objective is to expose students to the beauty and joy of programming by engaging them in meaningful projects using the snap  programming language  similarly  code org is a high school course with lessons and programming projects around the seven big ideas of computing as well  whereas  the pltw uses python as its primary programming environment to expose students to different computational thinking projects  analogously  in various other countries similar initiatives have also been undertaken for introducing computer science to high school students  van diepen  perrenet    zwaneveld        micheuz        furber         undoubtedly  during the last two decades  a lot of work has been done by the computer science education community in promoting computer science as a school subject in secondary education  unfortunately  the same conclusion cannot be reached about the status of computer science in the elementary school curriculum  grades k    approximately from   to    years old   a number of computer science education researchers have written about their concerns in regards to teaching computer science in k    e g   armoni         these concerns are primarily linked to the incompatibility between abstraction  an essential process in computer science  and children s weakness to understand abstraction because of their very young age  armoni        explained that abstraction is an inherent component of computer science that is always encapsulated during the process of thinking about and automating a solution to a problem  from a piagetian perspective  children before the age of seven cannot really understand concrete logic  whereas children between seven and eleven years old can solve problems that apply to concrete objects  but not problems that apply to abstract concepts or phenomena  conversely  gibson        argued that high school is too late for exposing students to computer science for the first time  and stated that early exposure during kindergarten is necessary  in his research  gibson        found that young children can think abstractly when concrete reference systems are used to situate their thinking  recently  there has been much impetus in bringing computer science experiences to elementary school children  kumar         kumar        wrote about the proliferation of app development startup companies that have targeted  early childhood computing education as the next emerging frontier   p       and about formal deliberative initiatives for developing computer science curricula for k   students  succinctly  we acknowledge the effort by prottsman        who reported on the development of the thinkersmith curriculum in       which introduced a stand alone set of unplugged activities for k   specifically designed to provide students with strong computer science foundations without using computers  lessons in this curriculum  such as binary baubles  used materials found in games and crafts to teach authentic computer science concepts  in       code org expanded on what thinkersmith created  and offered a    hour unplugged curriculum for grades k    after the wide adoption of this curriculum  in      code org developed further the existing    hour unplugged curriculum  which now includes this content downloaded from               on wed     jan               utc all use subject to htt    more than    lessons  cs unplugged  another unplugged computer science  cs  approach proposed by bell  witten  fellows  adams  and mckenzie         is a collection of activities that teach computational thinking through engaging games and puzzles that use cards  string  crayons and lots of physical movement  students learn about binary numbers and algorithms without using computer programming  clearly  early computing education is now at the forefront  and  studies toward this line of research are urgently needed in order to develop an informed body of knowledge about learning and teaching computer science in k    accordingly  the authors propose a curriculum framework with a focus on promoting computational thinking skills for ages   to     while computational thinking is just one element of computer science  albeit an important one  fluck et al          the authors suggest a curriculum for k   with an explicit focus on computational thinking  before covering more theoretical and applied concepts of computer science in secondary education  particularly  this study sought to address the following questions   a  what computational thinking skills should a curriculum promote in k    and  b  what knowledge do teachers need to have to be able to teach a computational thinking curriculum in k    a definition of computational thinking while the concept of computational thinking in education can be traced back to the work of seymour papert  papert         wing s        article has rekindled the interest for promoting computational thinking in k     other efforts aiming at developing a definition for computational thinking include  among others  the national academy of sciences workshop  national research council         the initiative undertaken by furber         and workshops organized by the computer science teachers association  csta  and the international society for technology in education  iste   succinctly  the      national research council s report differentiated computational thinking from computer literacy  computer programming  and computer applications  i e   games   and broadened the term to include core concepts from the discipline of computer science  such as abstraction  decomposition  pattern generalization  visualization  problem solving  and algorithmic thinking  similarly  furber        offered a concise definition of computational thinking as  the process of recognizing aspects of computation in the world that surrounds us  and applying tools and techniques from computer science to understand and reason about both natural and artificial systems and processes   p       csta and iste  in collaboration with leaders from higher education  industry  and k    education  developed an operational definition of computational thinking as a problem solving process that includes  but is not limited to  the following elements   a  formulating problems in a way that enables us to use a computer and other tools to help solve them   b  logically organizing and analyzing data   c  representing data through abstractions  such as  models and simulations   d  automating solutions through algorithmic thinking  i e   a series of ordered steps    e  identifying  analyzing  and implementing possible solutions with the goal of achieving the most efficient and effective combination of steps and resources  and  f  generalizing and transferring this problem solving process to a wide variety of problems  despite the fact that currently there is not one unanimous definition of computational thinking  it seems fair to conclude that  based on the literature reviewed in this study  researchers have come to accept that computational thinking is a thought process that utilizes the elements of abstraction  generalization  decomposition  algorithmic thinking  and debugging  detection and correction of errors   abstraction is the skill of removing characteristics or attributes from an object or an entity in order to reduce it to a set of fundamental characteristics  wing         while abstraction reduces complexity by hiding irrelevant detail  generalization reduces complexity by replacing multiple entities that perform similar functions with a single construct  thalheim         abstraction and generalization are often used together as abstracts are generalized through parameterization to provide greater utility  decomposition is the skill of breaking complex problems into simpler ones  national research council         algorithmic thinking is a problem solving skill related to devising a step by step solution to a problem and differs from coding  i e   the technical skills required to use a programming language   selby         additionally  algorithmic notions of sequencing  i e   planning an algorithm  which involves putting actions in the correct sequence   and algorithmic notions of flow of control  i e   the order in which individual instructions or steps in an algorithm are evaluated  are this content downloaded from               on wed     jan               utc all use subject to htt    also considered important elements of computational thinking  selby         debugging is the skill to recognize when actions do not correspond to instructions  and the skill to fix errors  selby         table   shows the elements of computational thinking as these have been discussed and defined in this section  accordingly  this conceptual framework is the one that was adopted for developing the computational thinking curriculum framework for k   presented in the next section  table    the elements of computational thinking element definition    abstraction the skill to decide what information about an entity object to keep and what to ignore  wing            generalization the skill to formulate a solution in generic terms so that it can be applied to different problems  selby            decomposition the skill to break a complex problem into smaller parts that are easier to understand and solve  national research council        wing            algorithms a  sequencing b  flow of control the skill to devise a step by step set of operations actions of how to go about solving a problem  selby         the skill to put actions in the correct sequence  selby         the order in which instructions actions are executed  selby            debugging the skill to identify  remove  and fix errors  selby         a computational thinking curriculum framework for k   based on the five computational thinking skills shown in table    a computational thinking curriculum framework is developed and presented in table    table   shows indicators of competence for all five computational thinking skills  namely  abstraction  generalization  decomposition  algorithmic thinking  and debugging  in a progression from simple to complex across the educational levels of k         and      succinctly  the framework aims at engaging children in thinking and problem solving by developing a solution to a problem  automating the solution through algorithmic thinking  and generalizing this solution to new problems when common patterns are identified or recognized  in essence  the framework aims at introducing students of a very young age to the thinking processes of computational thinking so they become competent to learn more advanced theoretical and practical topics of computer science in secondary education  in addition  the framework targets the development of all five computational thinking skills across all k   levels  albeit at different levels of competence  through the use of examples and tasks that are within the reach of children either with or without external support  external reference systems   it is noted that the boundaries specified for each level may possibly vary from school to school and from classroom to classroom  by the same token  it is also expected that refinements to the curriculum framework will be ongoing once data become available from pilot offerings of different curricula  aligned with the proposed framework  in diverse contexts  table    a computational thinking curriculum framework for k   skill grade level  age level  k    ages   to         ages   to          ages    to     abstraction   with the use of external reference systems  create a model representation  to solve a problem  i e   using specific directional language   forward  left turn  right turn  back   and turns of a given degree                      children create a path and write instructions to enable others to follow the path  or children design a mat based on a story  and have their bee bot   create a model representation to solve a problem  i e   create an object and assign properties to it during an activity of digital game design and creation     create a new model representation to solve a problem  i e   create a simulation using scratch   this content downloaded from               on wed     jan               utc all use subject to htt    follow the path from the narrative   generalization   identify common patterns between older and newer problem solving tasks  and use sequences of instructions previously employed  to solve a new problem  i e   use a sequence of instructions from an older path  to program the beebot to follow a new path that includes the older path     remix and reuse  by extending if needed  resources that were previously created    remix and reuse  by extending if needed  resources that were previously created  decomposition   break a complex task into a series of simpler subtasks  i e   break a longer path into a series of smaller paths that the bee bot can follow     break a complex task into simpler subtasks    develop a solution by assembling together collections of smaller parts    break a complex task into simpler subtasks    develop a solution by assembling together collections of smaller parts  algorithmic thinking   define a series of steps for a solution    put instructions in the correct sequence    define a series of steps for a solution    put instructions in the correct sequence    repeat the sequence several times  iteration     define a series of steps for a solution    put instructions in the correct sequence    repeat the sequence several times  iteration     make decisions based on conditions    store  retrieve  and update variables    formulate mathematical and logical expressions  debugging   recognize when instructions do not correspond to actions    remove and fix errors    recognize when instructions do not correspond to actions    remove and fix errors    recognize when instructions do not correspond to actions    remove and fix errors  note   model representation   can be conceptual  mathematical  mechanical  textual  graphical  etc  curriculum design issues  a focus on a holistic design approach the framework presented in table   constitutes a general framework that can be used to develop various computational thinking programs  courses  or modules in k    the curriculum framework is conceptualized in a generic form to allow teachers the freedom and agency to adapt and customize the framework as they see fit for their own classrooms and students  according to van den akker         this enactment perspective  where teachers create their own curriculum realities  is increasingly replacing the fidelity perspective on implementation where teachers faithfully follow curricular prescriptions from external sources  accordingly  this trend  puts even more emphasis on teachers as key people in curriculum change   van den akker        p        underlining the utmost importance of relevant teacher preparation  in view of that  the authors herein propose the holistic design approach as one method that teachers can use to enact the computational thinking framework proposed in this paper  a holistic design approach attempts to  deal with complexity without losing sight of the separate elements and the interconnections between those elements   van merri nboer   kirschner        p      it is the opposite of an atomistic design where complex contents and tasks are reduced to simpler elements  promoting this way content compartmentalization and fragmentation  compartmentalization and fragmentation support the separation of a whole this content downloaded from               on wed     jan               utc all use subject to htt    into small  distinct  and often isolated parts  for example  teachers teach children to think computationally by teaching them abstraction  then decomposition  followed by generalization  algorithmic thinking  and debugging  it is doubtful if in the end children will have the opportunity to practice the whole complex skill  computational thinking  in this case  in its entirety  and doubtful if they will ever learn to think computationally  on the other hand  a holistic design approach aims at eliminating compartmentalization and fragmentation by focusing on whole complex and authentic learning tasks  without losing sight of the individual elements that make up the complex whole  thus  with this approach  if implemented correctly by the teacher  children learn to think computationally to solve a problem  and also learn all other constituent and interconnected pieces of knowledge  theoretical and or practical  that are directly related with the computational thinking task  we support the holistic design approach for teaching computational thinking and emphasize here two design steps in the process  namely   a  the design of problemsolving tasks with a focus on real life issues  and  b  the sequencing of problem solving tasks from simple to complex  we do acknowledge that more design steps exist in the literature  with regard to the first design step  it is argued that the sources of the computational thinking curriculum ought to be problems  issues  and concerns directly related to life itself  a curriculum of this kind will result in usable knowledge   that is  knowledge that can be applied directly in the context of real life  problems and concerns at hand   and not in inert knowledge  voogt  fisser  good  mishra    yadav        webb  fluck  cox  angeli valanides  malyn smith  voogt    zagami         educational researchers have found that a curriculum that is focused on problem solving around real world problems can result in greater intellectual curiosity  motivation  improved attitude toward schooling  and higher achievement in college  wolf   brandt         consequently  a curriculum designed around real life problems can be a way to make computational thinking relevant to students  lives  and  thus  a way to keep them interested in the subject matter  ultimately  this may end up in increasing substantially the number of students who will eventually pursue computer science as their major field of study later in college  from an implementation point of view  a curriculum designed around real life problems demands a wider range of content  simply because authentic real world problems are usually multidisciplinary in nature  as a consequence  a curriculum from this perspective poses new demands on teaching often requiring close collaboration among teachers with different content expertise  it should be noted that real life problem solving tasks constitute challenging design endeavors  and  a curriculum designer may approach the design process through the means of rapid prototyping before designing an entire educational program  course  or module  with regard to the sequencing of the problem solving tasks  a sequence from simple whole tasks to more complex whole tasks is recommended  it is made clear that each problem solving task  irrespective of complexity  engages the learner in whole task problem solving experiences  in the context of computational thinking  this means that each learning task  simple or complex  confronts the learner with all or almost all of the constituent computational thinking skills for a real life computational thinking experience  all tasks are meaningful  authentic  and relevant to children s life  a sequence of tasks constitutes the backbone of the computational thinking curriculum  it is also evident that children may need guidance and support as they start working on more challenging tasks  support may be provided in the form of external reference systems to help students gradually develop abstractions  students may also need guidance with the problem solving process itself  the knowledge that teachers need to teach the curriculum as gal ezer and stephenson        stated  having a curriculum is important  but preparing teachers to teach the curriculum is also critical  amongst computer science teacher educators  the framework of pedagogical content knowledge  pck  has been highly regarded as an appropriate framework for defining the knowledge teachers need to have to be able to teach computer science  e g   hubwieser  magenheim  m hling    ruf        saeli         succinctly  pck refers to a body of knowledge  which is highly context sensitive  cannot be conceptualized in isolation from teachers  classroom and teaching experiences  and is beyond and above a simple synthesis of knowledge of subject matter and pedagogy  shulman        shulman         pck is an amalgam of knowledge that  embodies the aspects of content most germane to its teachability   shulman        p      and refers to the transformation of content into forms that are understandable to learners  according to van driel and berry         having a good pck means that teachers have several representations of the most commonly taught topics within a certain subject  the more representations teachers have at their disposal and the better they recognize learning difficulties  the more effectively they can deploy their pck  van driel   berry         this content downloaded from               on wed     jan               utc all use subject to htt    within the domain of computer science  a number of computer science education researchers attempted to define pck for computer science  either in general ways  hubwieser et al         saeli  perrenet  jochems    zwaneveld        stephenson  gal ezer  haberman    verno        or more specific ways  saeli         saeli et al         concentrated on the teaching of programming in secondary education  and provided a general conceptualization of pck for the domain of programming in terms of its constituent elements  i e   what to teach about computer programming  how to teach programming  and what are learners  difficulties in programming   in a following study  saeli        was able to provide a more specific conceptualization of pck for the domain of programming in the context of secondary education  which included details about each constituent knowledge base  in terms of the content to be taught  she mentioned loops  data structures  arrays  problem solving skills  decomposition  parameters  and algorithms amongst others  regarding teachers  pedagogical knowledge she mentioned offering a simple programming language to better facilitate students  effort to learn the syntax of the language  and choosing several worthy problems to solve  lastly  she identified learners  difficulties about different programming concepts  such as loops  arrays  variables  and general problem solving skills  in the early     s  though  a number of educational researchers undertook systematic efforts for extending and enriching the concept of pck by adding technology knowledge as another essential category of teachers  knowledge base  angeli   valanides        koehler   mishra        niess         from this perspective  the introduction of technology knowledge in the existing framework of pck successfully expanded pck to tpck   that is  technological pedagogical content knowledge  angeli   valanides        angeli   valanides        koehler   mishra        niess         a conceptualization of the framework of tpck is proposed by angeli and valanides              as shown in figure    according to figure    tpck is conceptualized as a unique body of knowledge that is formed by the contribution of five distinct knowledge bases  namely  content knowledge  pedagogical knowledge  knowledge of learners  knowledge of the educational context  and technology knowledge  angeli   valanides        angeli   valanides         this body of knowledge grows when teachers are engaged systematically in useful educational practices  either in their own classrooms or teacher professional development programs  figure    technological pedagogical content knowledge  adopted from angeli   valanides        tpck is an important body of knowledge for the field of computer science  because technology is at the center of the computer science domain  either  as a means in itself  i e   to learn to use the technology as a goal   or as a means for achieving or teaching something else  i e   to use technology in order to solve a problem or to teach a computer science concept   for the purposes of this study  the authors provide a conceptualization of tpck for the construct of computational thinking  as it is defined in table    in order to better explain what teachers need to know to be able to teach a computational thinking course aligned with the framework proposed in table    this content downloaded from               on wed     jan               utc all use subject to htt    analytically  content knowledge  ck  is defined as knowledge about computational thinking  ckct    this includes knowledge and understanding about the skills of abstraction  including modeling   denoted as ckct a    generalization  denoted as ckct g    decomposition  designated as ckct d   algorithmic thinking  designated as ck ct algo    and debugging  denoted as ck ct debug    ck ct algo  includes knowledge of several computational thinking concepts  such as  data  processing  information  sequencing  loops  parallel processing  events  conditions  operators  variables  and dataflow of control  learner knowledge for computational thinking  lkct   includes knowledge about learners  difficulties in  a  developing abstractions that are beyond of any particular programming language or tool  denoted as lk ct a     b  generalizing from one solution to another by identifying common patterns  denoted as lkct g     c  decomposing complex problems to simpler ones  designated as lkct d     d  thinking algorithmically to solve a problem  including difficulties in understanding relevant concepts  such as sequencing  loops  flow of control  conditions  etc    denoted as lk ct algo    and  e  debugging  denoted as lkct debug   pedagogical knowledge for computational thinking  pkct   includes the general pedagogical knowledge applicable to all other content domains  i e   the use of questions to promote understanding  use of examples  explanation  demonstration   in addition to knowledge about subject specific pedagogical practices pertinent to computational thinking  pkct is defined in terms of the following teaching tactics   a  model how to problem solve or think about a problem in iterative and incremental ways   b  present or explain a solution to a problem in terms of a series of steps   c  model decision making based on conditions   d  do something based on  and expanding  what others or you have done  reuse and remix    e  show how a complex problem can be decomposed into simpler problems and develop a solution in increments   f  show how to design a model before writing a computer program for solving the problem  and  g  try things out as you go and make revisions based on what happens  technology knowledge for computational thinking  tkct   includes knowledge and skills about how to  a  operate use a variety of technologies   b  invent new technologies tools   c  solve a task using technical processes  methods  and tools  and  d  learn and adapt to new technologies  context knowledge for computational thinking  cxct   is defined from the point of view explicated by porrashern ndez and salinas amescua        who proposed to regard context knowledge along two important dimensions  namely  a  scope  macro  mezzo  and micro level context  and  b  actor  students  and teachers  inner and external context   macro context is defined by social  political  technological  and economic conditions at a global level that influence the value and worth of adding computer science and computational thinking to the school curriculum  mezzo context is defined by the social  cultural  political  organizational  and economic conditions settled in the local community and the educational institution about the value of computational thinking in children s lives  finally  micro context is the level that deals with in class conditions for learning  e g   available resources for computational thinking  available technologies  norms and policies  beliefs  expectations  teachers  and students  goals about computational thinking   in addition  porras hern ndez and salinas amescua        argued that in order to comprehend teachers  uses of technology  it is important to consider teachers  and students   actors   unique characteristics  as they are brought in the context as separate objects of knowledge with internal  e g   students  needs  preferences  misconceptions  learning difficulties  prior knowledge  teachers  self efficacy  pedagogical beliefs  and external contexts  e g   ethnicity  culture  community  and socioeconomic background   lastly  tpck for computational thinking  tpckct   is defined as knowing how to      identify a range of creative and authentic computational thinking projects      identify a range of technologies with an appropriate set of affordances in terms of providing the necessary technological means for practicing teaching the whole range of computational thinking skills with each project  and     use the affordances of technology to transform ckct and pkct using representations that make the overall computational thinking experience comprehensible for all learners  this content downloaded from               on wed     jan               utc all use subject to htt    the question that naturally arises at this point is   what form should teacher preparation take  so that teachers develop their tpckct competencies adequately   in the next section  we provide preliminary research evidence from a teacher education course on preparing teachers how to teach computational thinking  teacher preparation in developing tpck competencies for computational thinking in the fall of       fifteen elementary school teachers pursuing a master s degree in instructional technology were enrolled in a course on learning how to teach computational thinking in their k   classrooms  all teachers were unfamiliar with computational thinking and had no prior experiences with computer programming  the teachers participated in    three hour weekly meetings  the participants were engaged in hands on design activities with the scratch computer programming environment  the learning by design approach  which has been shown to be effective in contemporary teacher development studies  mckenney  kali  markauskaite    voogt         was used in the course to engage teachers in designing models of different problem situations before constructing computer programs for solving the problems  the course instructor initially engaged the teachers in authentic problem solving by asking them to think about the city town they were living and identify ways of how people s lives in those places could be improved  the teachers explained their thinking about possible improvements and then the instructor asked them to think about how computers could be used for solving some of the problems they identified  a brainstorming activity resulted in ten different ideas that constituted the real life tasks that the course instructor used to teach the teachers about computational thinking  the ten tasks were sequenced from simple to complex based on the involvedness of the solution  for each problem  teachers were taught how to create a model first before writing a computer program for solving the problem  creating a model proved to be extremely difficult for the teachers and often times they asked their instructor for help  early attempts in creating models resulted in models containing lots of unnecessary information  but  gradually teachers  with the help of the course instructor learned that models are abstractions of something free from inessential detail  the teachers were taught how to create models through a process that was explicitly taught to them and involved identification of the important entities of the model  their characteristics  parameters in the model   and relationships  either quantitative or qualitative  between the parameters of the entities  the teachers showed commitment in developing the best models they could possibly create  and  often times they exhibited lots of creative ideas of how to make them better  in regards to teaching teachers computer programming  the course instructor used systematically the following pedagogical strategies   a  decide what sprites are needed for your project   b  decide what scripts are needed for your project   c  organize the scripts in meaningful ways for you and others   d  develop some code  try it out  then develop some more   e  test and debug  and  f  build or extend on existing projects or ideas  during the programming tasks  computational concepts such as  data  processing  information  sequencing  loops  parallel processing  events  conditions  operators  variables  and dataflow of control  were explicitly explained and illustrated with lots of programming examples  teachers had no difficulties with understanding programming concepts  even though they found the concepts of variables and conditional logic more challenging than the others  concluding remarks in conclusion  the authors in this paper presented a computational thinking curriculum framework for designing a curriculum for k    an area of research that is still in its infancy  described design guidelines for enacting the curriculum framework  and defined tpckct as the body of knowledge that teachers need to have to be able to teach the curriculum in k    in addition  the authors provided an example of a teacher preparation course that was specifically designed to promote teachers  tpckct   it is recognized that more empirical evidence in the form of rich educational cases is needed in terms of further investigating the effectiveness of the frameworks proposed herein in a variety of contexts  it is expected that with the gradual adoption of computer science as a distinct school subject in the k   curriculum of countries around the world  our knowledge and research base regarding the issues discussed in this paper will dramatically expand over the next several years  this content downloaded from               on wed     jan               utc all use subject to htt    references angeli  c     valanides  n          preservice teachers as ict designers  an instructional design model based on an expanded view of pedagogical content knowledge  journal of computer assisted learning                  angeli  c     valanides  n          epistemological and methodological issues for the conceptualization  development  and assessment of ict tpck  advances in technological pedagogical content knowledge  tpck   computers   education                armoni  m          teaching cs in kindergarten  how early can the pipeline begin  acm inroads               astrachan  o     briggs  a          the cs principles project  acm inroads               barr  v     stephenson  c          bringing computational thinking to k     what is involved and what is the role of the computer science education community  acm inroads               bell  t  c   witten  i  h   fellows  m  r   adams  r     mckenzie  j          cs unplugged  an enrichment and extension programme for primary aged students  retrieved from http   csunplugged org wpcontent uploads         csunplugged os      v    pdf czerkawski  b          computational thinking in virtual learning environments  in proceedings of e learn  world conference on e learning in corporate  government  healthcare  and higher education       pp            chesapeake  va  association for the advancement of computing in education  aace   desjardins  m          creating ap  cs principles  let many flowers bloom  acm inroads               fluck  a   webb  m   cox  m   angeli  c   malyn smith  j   voogt  j     zagami  j          arguing for computer science in the school curriculum  educational technology and society                furber  s          shut down or restart  the way forward for computing in uk schools  london  uk  the royal society  gal ezer  j     stephenson  c          computer science teacher preparation is critical  acm inroads               gibson  j  p         july   teaching graph algorithms to children of all ages  in proceedings of the   th annual sigcse conference on innovation and technology in computer science education  iticse      pp          new york  ny  acm  goode  j   chapman  g     margolis  j          beyond curriculum  the exploring computer science program  acm inroads               hazzan  o   lapidot  t     ragonis  n          guide to teaching computer science  an activity based approach  london  uk  springer  hubwieser  p   magenheim  j   m hling  a     ruf  a         august   towards a conceptualization of pedagogical content knowledge for computer science  in proceedings of the ninth annual international acm conference on international computing education research  pp        new york  ny  acm  husing  t     korte  w  b          evaluation of the implementation of the communication of the european commission  e skills for the   st century  bonn  germany  empirica  retrieved from http   hdl voced edu au              koehler  m  j     mishra p          introducing tpck  in aacte committee on innovation and technology  eds    handbook of technological pedagogical content knowledge  tpck  for educators  pp         new york  ny  routledge  kumar  d          digital playgrounds for early computing education  acm inroads               mckenney  s   kali  y   markauskaite  l     voogt  j          teacher design knowledge for technology enhanced learning  an ecological framework for investigating assets and needs  instructional science                  micheuz  p          some findings on informatics education in austrian academic secondary schools  informatics in education                 national research council          committee for the workshops on computational thinking  report of a workshop on the scope and nature of computational thinking  washington  dc  national academy press  doi                niess m  l          preparing teachers to teach science and mathematics with technology  developing a technology pedagogical content knowledge  teaching and teacher education               papert  s          mindstorms  children  computers  and powerful ideas  new york  ny  basic books  inc  this content downloaded from               on wed     jan               utc all use subject to htt    porras hern ndez  l  h     salinas amescua  b          strengthening tpack  a broader notion of context and the use of teacher s narratives to reveal knowledge construction  journal of educational computing research                  prottsman  k          computer science for the elementary classroom  acm inroads               saeli  m          teaching programming for secondary school  a pedagogical content knowledge based approach  unpublished doctoral dissertation   technische universiteit eindhoven  netherlands  saeli  m   perrenet  j   jochems  w  m     zwaneveld  b          teaching programming in secondary school  a pedagogical content knowledge perspective  informatics in education                selby  c  c          how can the teaching of programming be used to enhance computational thinking skills   unpublished doctoral dissertation   university of southampton  southampton  uk  shulman  l  s          those who understand  knowledge growth in teaching  educational researcher            shulman  l  s          knowledge and teaching  foundations of the new reform  harvard educational review            stephenson  c   gal ezer  j   haberman  b     verno  a          the new educational imperative  improving high school computer science education  new york  ny  computer science teachers association  csta   thalheim  b          fundamentals of entity relationship modeling  new york  ny  springer  tucker  a  b   deek  f   jones  j   mccowan  d   stephenson  c     verno  a          a model curriculum for k    computer science  new york  ny  acm computer science teachers association  van diepen  n   perrenet  j     zwaneveld  b          which way with informatics in high schools in the netherlands  the dutch dilemma  informatics in education                  van driel  j  h     berry  a          teacher professional development focusing on pedagogical content knowledge  educational researcher                van den akker  j          building bridges  how research may improve curriculum policies and classroom practices  in beyond lisbon       perspectives from research and development for education policy in europe  pp            aarau  switzerland  cidree  van merri nboer  j  v     kirschner  p  a          ten steps to complex learning  a systematic approach to four component instructional design  mahwah  nj  lawrence erlbaum  voogt  j   fisser  p   good  j   mishra  p     yadav  a          computational thinking in compulsory education  towards an agenda for research and practice  education and information technologies                  webb  m   fluck  a   cox  m   angeli valanides  c   malyn smith  j   voogt  j     zagami  j          curriculum  advancing understanding of the roles of computer science informatics in the curriculum  in k w lai  ed    edusummit      summary report  pp          retrieved from http   www curtin edu au edusummit local docs edusummit     ebook pdf wing  j          computational thinking  communications of the acm                wing  j  m         march   computational thinking  retrieved from https   csta acm org curriculum sub currfiles wingctprez pdf wolf  p     brandt  r          what do we know from brain research  educational leadership               this content downloaded from               on wed     jan               utc all use subject to htt 
a systematic mapping study on assessing computational thinking abilities ana liz souto o  de araujo software practices laboratory federal university of campina grande departament of exact sciences federal university of para   ba para   ba  brazil analiz copin ufcg edu br wilkerson l  andrade software practices laboratory federal university of campina grande para   ba  brazil wilkerson computacao ufcg edu br dalton d  serey guerrero software practices laboratory federal university of campina grande para   ba  brazil dalton computacao ufcg edu br abstract several initiatives have been created to promote computational thinking  ct  abilities in students  there are multiple approaches of assessing ct and wide abilities and skills involved  however  the evidence on how to assess ct has not yet been systematically grouped or reviewed  the goal of our study is to identify and classify approaches to promote ct and the different ways of assessing ct abilities  to achieve this goal  a systematic mapping study was planned and executed  the results reveal that   i  programming courses are the most common pedagogical approaches to promote ct for k    students   ii  multiple skills are involved in ct  but solving problems  algo  rithms  and abstraction are most common abilities assessed  and  iii  codes and multi choice questionnaires are the most common artifacts for assessing ct abilities  this study points out to the fact that there are open questions for exploring and developing new researches for promoting and assessing ct abilities  i  introduction according to wing  in her seminal paper on the subject  computational thinking is about developing  fundamental  not rote skills  for problem solving  she mentioned  among others  the ability to think recursively  use abstraction and decomposition when dealing with complex tasks  and to use heuristics to reason about possible solutions      thinking like a computer scientist requires being able to think in multiple levels of abstraction  since then  several researchers have focused on defining the core set of skills that characterize computational thinking  ct   according to hu  ct represents a cognitive process and hence  it should be seen as a hybrid paradigm that accommodates different thinking models such as logical  algorithmic  analytic  mathematical  engineering and creative thinking      as a con  sequence  several different abilities and skills are associated with ct  for instance  while analysis and generalization are frequently employed in discussions of general problem solving skills  abilities like designing systems  programming comput  ers  as well as being able to apply concepts of automation and modeling are more frequently employed in discussions of general computer science concepts      most research results related to ct skills and abilities can be found in recent academic literatures  some studies have focused on the relation of ct and teaching in k     grover et al  presented environments and tools that foster ct and how they interact with computing education in k        voogt et al  presented a historical review of ct concepts  and gathered examples of how ct is taught  they also discussed the position of ct in the k    curriculum      taking a different perspective  selby and woollard have recently proposed a definition of ct and the main skills involved      based on a study of the most frequently terms and skills associated to ct      a related  but different field of investigation focuses on how to assess ct skills and abilities  in the report of the workshop on pedagogical aspects of computational thinking from       the national research council cites three reasons for assessing computational thinking abilities   i  to judge the curriculum and related materials and pedagogy   ii  to judge the individual s progress  and  iii  to manage instructor training and support      however  while a significant amount of research has been developed on skills  the discussion on their assessment is still in its infancy  in this study we focus on the approaches used by researchers and teachers to observe and assess the development of ct abilities in students  as far as we know  there is no system  atic review of the scientific literature on the subject of ct assessment  we identified and classified proposed approaches to promote ct and the different ways used to assess abilities within those approaches  more concretely  the study aimed at  i  characterizing the state of the art of research on assessing ct abilities in education   ii  identifying and classifying the different approaches and artifacts used to assess ct abilities in various educational levels  and  iii  discussing the results based on approaches  artifacts  and abilities assessed  to achieve this goal  we planned and executed a systematic mapping study based on the guidelines established by petersen et al  for such studies      the rest of this paper is organized as follows  in section ii  we briefly discuss related work  in section iii  we present our research methodology and the research questions that guided the study  in section iv  we present the data collected along the study  in section v  we present and discuss the results achieved  finally  in section vi  we present our conclusions                                    ieee ii  related work to the best of our knowledge there are no literature reviews about assessing ct abilities  the existing studies about ct involve definition  skills and role of ct in k                 these studies are important because they show an overview of essential aspects of ct and indicate the abilities that should be promoted and assessed  the systematic review presented by barcelos et al  consid  ered studies that describe and evaluate approaches to integrate ct and mathematics      a wide variety of mathematical topics are developed with emphasis on algebra  calculus and higher order thinking skills  programming is the main ap  proach  followed by robotics and spreadsheets  mathematical model is not related to ct according to this study  another systematic review identified tools used for promoting ct      scratch  is the most common tool for promoting ct  followed by app inventor  and alice    both systematic reviews are interested in promoting ct with mathematics or tools  but they do not show interest in how to assess the development of ct in those context  the literature review presented by lye and koh focused on teaching ct through programming       the computational concept  i e  concepts that programmer use  is widely explored in promoting ct through programming  the authors pro  pose that more intervention studies focused on computational practices and computational perspectives could be conducted for the promotion of ct  in addition  they propose that a constructionism based problem solving learning environment  with information processing  scaffolding and reflection activ  ities could be designed to foster computational practices and computational perspectives  the authors do not reveal how to assess the proposed approach  iii  research methodology this section details the methodology used for executing this systematic mapping study  the objective of a mapping study is to categorize several primary studies  frequently providing a visual summary of results  in addition  clusters and research gaps are evidenced allowing the identification of possible open problems for future works      in a mapping study  papers are categorized based on re  search questions aiming at providing a visual summary of the field  this methodology has been increasingly used in software engineering by petersen et al       because of this  we chose the protocol defined by petersen et al  and applied it to the computer and education field  as every mapping study has a clear protocol to guide  each step and outcome of the protocol is detailed in the rest of this section  a  research questions there are multiple approaches for promoting and assessing ct along with several involved abilities  so  the following   https   scratch mit edu    http   appinventor mit edu explore   http   www alice org  research questions  rq  were defined in order to guide this systematic mapping study    rq    what are the pedagogical approaches for promot  ing ct and for which kind of audience  the purpose is to elicit what kind of schemes activities the researchers apply to promote the acquisition of ct skills and for which audience  students  grade  these studies have been carried out    rq    what are the skills assessed in ct  the aim is to bring forth which abilities or skills are assessed by the pedagogical approach  in this work  skill and ability are considered as synonyms    rq    what are the instruments or artifacts for assessing ct abilities  the objective is to identify which instruments or artifacts are used in order to measure the ct abilities in each pedagogical approach  b  conduct search after defining the research questions  a strategy was de  signed to select the related papers  the following steps were adopted     analyze the terms to be used in the search string in order to answer the research questions     decide what the central idea in computational thinking and assess abilities is     choose synonyms of  assessing  in the context of edu  cation     test each synonym of  assessing  in search  analyze results in each digital library  and select the synonyms     use boolean or to connect the selected assessing synonyms     link  computational thinking  using boolean and     execute pilot tests to gauge the search string  as a result  the following search string was obtained   computational thinking  and  assess or analyze or evaluation or measure or validation  six digital libraries were chosen to conduct the research  acm  eric  ieeexplore  sciencedirect  elsevier   springer  and scopus  these digital libraries were chosen because they are the main publication vehicles of computer science and education  table i presents the summary of the search returned by each digital library  the studies were collected based on a title abstract search  thus  in this step  the outcome was all papers selected in the initial search  c  papers screening all inclusion and exclusion criteria applied in this mapping study are described below  the defined inclusion criteria are     studies that are about assessing some ability or skill in the context of ct     studies in any kind of educational level grade  table i summary of primary search results digital library database name acm eric ieeexplore sciencedirect scopus springer total search results                            studies reported in workshop or conference or jour  nal  the defined exclusion criteria are     studies that do not introduce how to assess or measure ct abilities or skills     studies that do not introduce  analysis  or  validation  of ct abilities  i e  papers that analyzed or validated the approach instead of ct abilities     studies that are not in the education context     studies that are in computational biology     secondary studies  short papers and chapter of book  the selection process was conducted in two steps  in the first stage  the title and abstract of all papers selected in the first search were read  in this step  duplicated papers  secondary studies and short papers were removed     studies were judged as potentially relevant after this point  in the second step  all papers were read and the inclusion and exclusion criteria were applied  most studies were excluded because they did not demonstrate how to assess or measure ct abilities  accordingly  in this last step     studies were selected as relevant to our goals  to avoid search bias  all stages were discussed by the three authors  the outcome of this step was all studies selected to answer the research questions based on the inclusion and exclusion criteria  iv  results this section details the result of our mapping study  the research was conducted from september      to april       first of all  the general results extracted directly from the headers of the papers are presented  such as countries where the research has been done  publication vehicle  journal or conference   and studies distribution by year of publication  then  the remaining sections answers each research question defined in section iii  a  general results    countries distribution  fig    shows the countries distri  bution where each research has been done  the united states is the leading country where approaches of assessing ct abilities have been investigated     studies   after that  south africa  italy and uk have   studies and other countries  such as brazil  china  germany  hungary  india  israel  new zealand  romania  singapore  and south korea have only   study  the united states is the leading country in number of publi  cation  a possible explanation is the presence of the computer fig     publication vehicle distribution science teacher association  csta  computational thinking task force  csta computational thinking task force  is responsible for current developments in ct and dissemination of teaching and learning resources related to ct     publication vehicle  fig    presents the publication vehi  cle adopted by the selected studies  publication in conferences are the most frequent type with         studies from      journals appear with        studies from         publication years  fig    presents the studies distribu  tion by year of publication  we do not delimit time to conduct the research  but the term  computational thinking  earned new signification in      by jannette wing      however  no work before      was found  the first selected study is from         study   in             and      few studies were reported about assessing ct abilities       and   studies  respectively   from       there was an increase in the number of studies    studies in         studies in         studies in       and   study in       until april          https   csta acm org curriculum sub compthinking html fig     countries distribution fig     studies distribution by year of publication table iii courses for promoting ct course content reference frequency scratch                       computational thinking             app inventor             alice        agentclub        game design  kodu         computer literacy course        web design        introductory programming        multidisciplinary collaboration class        fig     studies distribution by research approaches table ii pedagogical approaches for promoting ct    classification of research approaches  the studies also were classified based on the research approaches  the research approaches chosen by petersen et al     were the following  validation research  evaluation research  solution proposal  experience papers  philosophical papers  and opinion paper  for definitions  see       fig    shows the result of studies distribution by research approaches  philosophical papers and opinion papers were not found in the selected studies  b  rq   what are the pedagogical approaches for promoting ct and for which kind of audience  table ii presents four approaches applied to promote ct  course  test  framework  and tool  in this mapping study  the term course includes courses in general regardless of the duration  moreover  the term course includes workshops  modules or regular classes  test includes studies that only applied exams  framework is a model with the intention of measuring ct abilities  at last  tool comprises game  digital ink and platform  online interactive platform that offers several activities to foster and evaluate ct abilities   from this point of view  course was the leading pedagogical approach for promoting ct     studies   tests were the second most common    studies   followed by frameworks    studies   and tools    studies   since course was the most popular pedagogical approach  table iii presents a classification by course content  program  ming course was the most common pedagogical approach    studies   scratch was the most common programming environ  ment                        followed by app inventor             two courses were specific about computational thinking             the remainder included other programming environ  ments as alice and agentclub             a game design course with kodu       a computer literacy course with spreadsheets       a web design course       an introductory programming course with multiple languages       and a multidisciplinary collaboration class       fig     audience in addition  this mapping study aimed at knowing for which kind of audience  students  grade  these studies have been carried out  fig    grouped the students  grade  k    students were the leading audience     studies   followed by undergraduate students    studies   the undergraduates are computer science students and non computer science students  kindergarten has one study  teachers and pre service teachers have two studies  c  rq   what are the skills assessed in ct  the aim is to elicit which abilities or skills are assessed by the selected approaches  the measured skills and abilities were identified  but each study has adopted many different groups of abilities  table iv shows the skills and abilities assessed by each pedagogical approaches  the most common abilities are emphasized in bold  problem solving  algorithms  abstractions  and decomposition  for the best visualization of the frequency of abilities  fig    shows a word clouds from table iv  fig     word clouds of skills and abilities assessed in ct approach reference frequency course                                                                     test                                 framework                            tool                  table iv skills and abilities assessed in ct skills   abilities reference frequency algorithm                                                                          abstraction                                                programming             logical thinking             data representation                  data collection  data analysis        modeling             decomposition                       procedures                  automation        parallelization                  simulation             debugging             sequences  loops and conditionals                  computational concepts  computational practices and computational perspectives             sensors                  processes and transformations  models and abstractions  patterns and algorithms  tools and resources  inference and logic  evaluations and improvements             condicionals        recall        synchronize        troubleshooting             computer science fundamental concepts and computational literacy             screen interface  events  data persistence  data sharing  lists  public web services  accelerometer  location awareness        parameters  functions  recursion  event  screen interface        d  rq   what are the instruments or artifacts for assessing ct abilities  the aim is to present the instruments or artifacts used in order to measure ct abilities  table v shows the instruments or artifacts classified based on approaches  questionnaire is classified in different types  multiple choice  open ended  surveys and interviews  in a multiple choice questionnaire  the student need to choose the only one correct alternative  in an open ended questionnaire  the student need to write or draw the correct answer  in a survey there is no right or wrong answer  just the students opinion in a multiple  choice questionnaire  finally  in a interview the student speaks answers to questions  but there is not necessarily right or wrong answer  multiple choice questionnaire is the most common artifact for assessing ct abilities in eleven studies                                                       code is the second in ten studies                                                    followed by responses in nine studies                                     survey  interviews  open ended questionnaires  lesson plan  video journals  and design scenarios are other instruments for assessing ct abilities  fig    shows only the frequency of instruments and artifacts  the number of instruments is more than number of selected studies because each study can use more than one instrument for assessing ct abilities  fig    combines the results of instruments and research approaches in bubble plot  fig     instruments and artifacts used to asses ct video survey response questionnaire lesson plan interview game design scenarios code bubble plot of intruments and research approach research                                   fig     instruments and research approaches bubble plot instrument evaluation research experience papers solution proposal validation research table v instruments and artifacts used to assess ct categorized by approach practice ct abilities while avoiding the syntax hurdle as  sociated with text based programming languages  moreover  they are appointed to be pedagogically appropriate to k    students  computational thinking is not an alternative to learn how to program  however  many studies argue that  the ct can be initiated through programming  many other studies judge that programming is a good approach to promote ct  but few of them worry about how to assess the development of ct  individual s progress  and learning difficulties  programming can promote other abilities that may or may not be considered by ct  for instance  testing  debugging  looking for optimal solutions  because of that  the concept of ct and the involved abilities should be discussed in the context of programming courses  specifically for non computer science students     computational thinking workshops  computational thinking workshops have been designed to target both teach  ers      and pre service      teachers  in one study  pre service teachers participated in a one week module of ct  two     minute classes  during the educational psychology course  the module aims at demonstrating probabilistic reasoning  algo  rithmic thinking  heuristics  hypothesis testing  and problem solving  the assessment was conducted based on a survey and three open end questions for  i  explaining the concept of ct   ii  knowing whether ct can be integrated into the classroom  and  iii  whether ct it is related to other disciplines  in another study  teachers participated in a three days workshop that showed them the correlation between their taught subjects and ct  they were stimulated to use ct examples to teach in their respective classrooms  the lesson plan done after the workshop were assessed in order to measure the teacher s ability to synthesize the ct core concepts  the courses differ about purpose  time duration  content and type of assessment  in the first course  the pre service teachers were analyzed whether they had understood the content and whether they had intended to apply ct in future classroom  the content involved multiple abilities beyond computational thinking but programming was not involved  in the second course  teachers were assessed for the ability to connect the ct practices in their own subjects  an evaluation rubric was created to assess whether teachers effectively had used the computational thinking core concepts in their lesson plans  in this case  the teachers had a programming experience with scratch and alice     other courses  the options to promote ct without programming courses were game design courses  web de  sign courses  computer literacy courses  and multidisciplinary collaboration classes  all these courses are distinguished by purpose  content  audience  and assessed abilities  these ap  proaches were not programming courses but they were related to them and they were dependent on computers  no course promotes ct without computers  c  abilities problem solving is involved in all papers  except for one       therefore  problem solving is considered as the core of approach instrument or artifact reference course code                               responses           lesson plan      survey      multiple choice questionnaire  pisa       survey and open ended questionnaire      survey and multiple choice questionnaire      framework code  scratch       code  scratch   interviews  and design scenarios      code  robotic   video and responses      code and questionnaire      game      test multiple choice                          responses                tool survey  game       questionnaire  response  game  platform       responses  digital ink       v  discussion this section discusses the data presented in section iv regarding the concept of ct  pedagogical approaches  assessed abilities  instruments  and artifacts  finally  the threats to validity are presented  a  the concept of computational thinking the concept of ct can influence the abilities assessment  once understanding the concept of ct  the abilities can be elicited and appropriate instruments can be selected to assess theses abilities  the definitions found in literature are broad  making it difficult to find a systematic classification  in addition  some studies propose new definitions instead of an  alyzing existing ones  other studies propose activities without exposing their vision about ct  thus  a large interpretation on ct is seen in the selected studies  regarding theoretical references  most studies refer to wing s seminal papers  only   from    studies do not refer to wing s precursors papers  these studies were published in      and       although wing s seminal papers have strong influence on literature  more recent studies are proposing new terms and abilities  b  pedagogical approaches    programming courses  programming courses are the most common intervention to promote ct  visual program  ming environments are broadly employed  such as scratch  app inventor alice  and agentclub                                          although these environments are attractive  they seem to be limited to solve programming problems  make digital storytelling  and game design  in spite of that  they are feasible to introduce students to software programming because of the visual programming language  this technical feature allows students to learn programming concepts and computational thinking  in addition  other abilities collabo  rate to solve problems  in the mapping study  two papers treat troubleshooting instead of problem solving             in these papers  troubleshooting can be seen in the most common types of problem solving which usually possess a single fault state  have known solutions  rely most efficiently on experience  based rules for diagnosing  and require learners to make judgments about the nature of the problem  considering this definition  troubleshooting can fit into a context of ct  algorithm is directly related to    studies and indirectly to    from     in this mapping study  thereby  algorithmic thinking has been pointed out as one of the most fundamental abilities related to solving problems  designing an algorithm is a way of producing a solution through a set of steps  defining and following those steps help us to achieve a solution to a problem  for this reason  algorithmic thinking can be considered essential in ct  wing  in her seminal paper  argued that the essence of ct is abstraction       for the author  an algorithm can be seen as abstraction of a step by step procedure for taking input and producing some desired output  moreover  thinking abstractly involves identifying the heart of the problem and visualize different levels of details to help to solve it  abstraction also helps to simplify complex problems and decomposes complex tasks  abstraction is related with algorithm and problem  solving  therefore  abstraction can be considered essential in ct as well  computer science teachers association  csta  points out the following set of nine ct abilities to k    students  data collection  data analysis  data representation  problem decomposition  abstraction  algorithms and procedures  au  tomation  parallelization  and simulation       these abilities are explored in       csta argues the role of ct in k    is  a problem solving methodology that can be automated  transferred and applied across subjects        csta also designed the ct teacher resources and the ct leadership toolkit to help teachers to apply ct in their classes  so  these nine ct abilities can be appropriate to k    education  the csta s study already highlighted that ct is not an alternative to learn programming  but ct can be incited through programming  some papers considered conditional  loop  procedures  parameters  functions  recursion and event as ct abilities  those terms have correlation to programming  but the ct abilities in the context of programming needs to be more discussed  in another paper  mobile computational thinking  mct  is the term used to refer the programming aspects of ct plus mobile programming aspects designed for mit app inventor       the rubric of assessment mct includes screen interfaces  events  component abstraction  data persistence  data sharing  lists  public web services  accelerom  eter  orientation sensors  and location awareness  although those abilities are very specific to mobile programming  they are considered part of ct abilities  the most wide set of abilities appeared in             they elicited  i  processes and transformations   ii  models and abstractions   iii  patterns and algorithms   iv  tools and resources   v  inference and logic   vi  evaluations and im  provements  this set of abilities is wide to encompass ct and can involve activities with and without technology for development and assessing of ct  d  instruments and artifacts for assessing ct since programming courses were the most common ap  proaches to promote ct  code is already expected as one of the most common artifact for assessing ct abilities  in addition  four frameworks use code to measure ct  the problem in using code to measure development of ct is to limit the assessment to just a checklist  i e   the presence or absense of some programming structure  in accordance to lye and koh       computational practices and computational perspectives should be included in the context of programming and computational thinking  moreover  to measure ct abilities based on code should be more discussed  questionnaires  multiple choise and open ended question  naires  also were common instrument for assessing ct  ques  tionnaires  such as pre test and post test  applied before and after courses have advantages and limitations  in most of these cases  it is not possible to analyze the impact of specific activities offered during the course  as highlighted       in the context of programming course  pre assessment programming tasks could frustrate students who did not have previous knowledge about programming  these students could have a negative impact on their attitudes towards future activities  as highlighted       multiple choice questionnaires were one of the most com  mon type of questionnaire  multiple choice questionnaires have the advantage of being quicker to reproduce and compile the results  these questionnaires are simpler to summarize for statistical analysis  the challenge is to elaborate an appropriate test in order to measure cognitive processes  some studies elaborate its own questionnaires  other studies use a known test to measure students  problem solving skills  as pisa  program for international student assessment        on the other hand  responses to exercises also were used for assessing ct abilities  responses to exercises have the possi  bility to understand the specific role of individual activities and their impact on students  skills       content analysis allows us to make inferences about the reasoning that student appear to have been using  and gain further insight into students thought processes  moreover  content analysis can identify the students  mistakes when they do some exercises during a course or an experiment as in       besides  it can help to understand the range of errors and identify potential patterns for further investigations and propose a solution for it  test is the traditional instrument for assessment  however  the concern is about the planning and content of this instru  ment  the teacher can underestimated the difficulty of the test or plan their test based on previous experience  not considering appropriate pedagogical foundations for the audience  in the context of ct  there is not consolidated test to apply for measuring ct  however  this is already expected  once the concept of ct and essential abilities are not well defined in literature  considering tools  this mapping study identified three re  sults  one game  one digital ink  and one platform                   the game was not tested in a real environment  the digital ink has been undergoing validation process to verify its adequacy as an assessment tool for ct  the platform is a prototype with the purpose of collaboratively assess students by exercises  multiple choice and open ended questionnaires  game  puzzle   so  all of them need to be tested for empirical evidences of how the students react and how they could be assessed in practice  the use of games can be a strategic pedagogical approach to foster ct  educational games have the benefits to provide fun and help students to learn about subjects or assist them in learning a certain skill while they play  games can be designed to assess abilities that teacher would like to train and measure as       tools can be projected in order to capture more informa  tion about students  performance during the activity  specific digital tools can act as an entry mechanism and store data from each subject  this data may be retrieved and processed for future analysis concerning different parameters  such tools can be a way to assess not only the final result  but also the development process  the digital ink proposed in      is an example of this tool  platforms also can be designed to capture more data about the students  performance  moreover  platforms can help teachers with automated assessment and repository of questions tasks as       e  threats to validity this mapping study has some threats to validity  the result may not only be affected by the limitation of the automated search engines of each digital library but also by to human factors during the screening of papers and data extraction steps  so the search could not identify all relevant studies or extract all relevant information  it was limited to peer reviewed conference papers and journal articles available  this study considers neither book chapters nor short papers  vi  conclusion and future works this research has reinforced in our minds that there is a broad and varied interpretation of ct concepts and conse  quently of the approaches used to promote it  while these different interpretations are not irreconcilable  they do enforce different views that lead to significantly different assessment approaches  however  we were able to identify the most commonly used approaches  general problem solving  in particular  is considered in the vast majority of studies       and direct pro  gramming courses are the most popular pedagogical approach used to promote ct for k    students        rq    within programming courses  visual programming environments are broadly employed   in particular  tools like scratch and app inventor are  currently at least  very popular  these pedagog  ical approaches  however  are rather limited to programming problem solving  digital storytelling  and game design  the study also revealed that a broad range of different ct skills and abilities are promoted by researchers and teachers and as a consequence  several artifacts  metrics and dimensions are used in assessment  the abilities assessed in each artifact varies depending on the researcher s conceptualization of ct  solving problems  developing algorithms  and applying abstraction are the most common abilities assessed among the studies identified  rq    coding and multi choice ques  tionnaires are the leading artifacts for assessing ct abilities  rq    while the artifacts are the same  the method used to actually assess the code produced as well as the answers to questionnaires may vary  according to the pedagogical approach  the purpose of the evaluation and  finally  to the interpretation of the core concepts of ct  the subjective nature of the definition of ct concepts  skills and abilitites also has a major influence on the set of pedagogical approaches and assessment methods  despite that  and confirming our expectations  programming courses are the most popular pedagogical approaches  however  this seems to be a consequence of the fact that most studies are either performed by computer scientists or within the context of promoting computer science itself  there are  however  different approaches that are not based on programming  in fact  such alternatives are justified and desirable  since wing s seminal paper  most researchers accept that ct is about  conceptualizing  not programming   thus  finding ways to promote ct without the need to explicitly depend on teaching computer programming  be it within visual frameworks or not  is an important contribution to help promote ct more effectively  unfortunately  we still need to further propose and investigate alternatives  the broad definition of ct also collaborates to actively encourage it to different audiences  kindergarten  k     under  graduate students and teachers  this introduces further chal  lenges with respect to assessment  for each audience  different pedagogical approaches  artifacts and assessing methods are necessary  in particular  a major concern is that teachers have to master both the pedagogical approach as well as methods to assess the development of their students  finally  we must comment on the methodological aspects of the papers considered in this study  perhaps because the subject is difficult and complex  most studies presented simply cannot be replicated  either because there is no clear presentation of the conditions under which the study occurs  or because there is no precise characterization of the methods used to assess and evaluate the results  we know these studies are difficult  and perhaps impossible  to make them fully replica  ble  but we believe the whole community of researchers could benefit from a more careful description of the study design  procedures and assessment methods  as well as the general conditions necessary to conduct a similar study  we believe  that the ct research area needs to improve on the research methods adopted to better support claims on the relevance and effectiveness of ct  references     j  m  wing   computational thinking   communications of the acm  vol      no     pp                   c hu  computationalthinking whatitmightmeanandwhatwemight do about it   in proceedings of the   th annual joint conference on innovation and technology in computer science education  acm        pp               c  selby and j  woollard   computational thinking  the developing definition          accessed january            online   available  http   eprints soton ac uk             s  grover and r  pea   computational thinking in k    a review of the state of the field   educational researcher  vol      no     pp                   j  voogt  p  fisser  j  good  p  mishra  and a  yadav   computational thinking in compulsory education  towards an agenda for research and practice   education and information technologies  vol      no     pp                     n  r  council  report of a workshop on the pedagogical aspects of computational thinking  washington  dc  the national academies press         accessed january            online   available  http   www nap edu catalog       report of a workshop on  the pedagogical aspects of computational thinking     k  petersen  r  feldt  s  mujtaba  and m  mattsson   systematic map  ping studies in software engineering   in   th international conference on evaluation and assessment in software engineering  vol      no     sn        pp            t barcelos r mun  oz r v acevedo andi f silveira  relac  o  esentre o pensamento computacional e a matema  tica  uma revisa  o sistema  tica da literatura   in anais dos workshops do congresso brasileiro de informa  tica na educac  a  o  vol     no           p            j  bombasar  a  raabe  e  m  de miranda  and r  santiago   ferramen  tas para o ensino aprendizagem do pensamento computacional  onde esta   alan turing   in anais do simpo  sio brasileiro de informa  tica na educac  a  o  vol      no           p           s  y  lye and j  h  l  koh   review on teaching and learning of computational thinking through programming  what is next for k      computers in human behavior  vol      pp                    s  grover  s  cooper  and r  pea   assessing computational learning in k      in proceedings of the      conference on innovation   technology in computer science education  ser  iticse      new york  ny  usa  acm        pp              a  yadav  c  mayfield  n  zhou  s  hambrusch  and j  t  korb   compu  tational thinking in elementary and secondary teacher education   acm transactions on computing education  toce   vol      no     p                h  bort and d  brylow   cs impact  measuring computational thinking concepts present in cs hs participant lesson plans   in proceeding of the   th acm technical symposium on computer science education  acm        pp                c  s  miller  l  perkovic    and a  settle   file references  trees  and com  putational thinking   in proceedings of the fifteenth annual conference on innovation and technology in computer science education  acm        pp                c  kazimoglu  m  kiernan  l  bacon  and l  mackinnon   learning programming at the computational thinking level via digital game play   procedia computer science  vol     pp                      k  c  yeh  y  xie  and f  ke   teaching computational thinking to non computing majors using spreadsheet functions   in frontiers in education conference  fie         ieee        pp  f j         l  werner  j  denner  s  campe  and d  c  kawamoto   the fairy performance assessment  measuring computational thinking in middle school   in proceedings of the   rd acm technical symposium on computer science education  acm        pp                m  sherman and f  martin   the assessment of mobile computational thinking   journal of computing sciences in colleges  vol      no     pp                    d c webb  troubleshootingassessment anauthenticproblemsolving activity for it education   procedia social and behavioral sciences  vol     pp                      d  giordano and f  maiorana   use of cutting edge educational tools for an initial programming course   in global engineering education conference  educon        ieee  ieee        pp                l  seiter   using solo to classify the programming responses of primary grade students   in proceedings of the   th acm technical symposium on computer science education  acm        pp                s  m  pulimood  k  pearson  and d  c  bates   a study on the impact of multidisciplinary collaboration on computational thinking   in proceedings of the   th acm technical symposium on computing science education  acm        pp              c  duncan and t  bell   a pilot computer science and programming course for primary school students   in proceedings of the workshop in primary and secondary computing education  acm        pp              i  zur bargury  b  pa rv  and d  lanzberg   a nationwide exam as a tool for improving a new curriculum   in proceedings of the   th acm conference on innovation and technology in computer science education ser iticse     newyork ny usa acm      pp            online   available  http   doi acm org                              s  jun  s  han  h  kim  and w  lee   assessing the computational literacy of elementary students on a national level in korea   educational assessment  evaluation and accountability  vol      no     pp                      l  gouws  k  bradshaw  and p  wentworth   first year student perfor  mance in a test for computational thinking   in proceedings of the south african institute for computer scientists and information technologists conference  acm        pp                p  hubwieser and a  muhling   investigating the psychometric structure of bebras contest  towards mesuring computational thinking skills   in learning and teaching in computing and engineering  latice        international conference on  ieee        pp              m  csernoch  p  biro    j  ma  th  and k  abari   testing algorithmic skills in traditional and non traditional programming environments   informatics in education  vol      no     pp                      j a joines d raubenheimer anda craig  usingcomputationaltools to enhance problem solving   computers in education journal  vol      no     pp                      l  a  gouws  k  bradshaw  and p  wentworth   computational thinking in educational activities  an evaluation of the educational game light  bot   in proceedings of the   th acm conference on innovation and technology in computer science education  acm        pp              l  seiter and b  foreman   modeling the learning progressions of computational thinking of primary grade students   in proceedings of the ninth annual international acm conference on international computing education research  acm        pp              k  brennan and m  resnick   new frameworks for studying and assessing the development of computational thinking   in proceedings of the      annual meeting of the american educational research association  vancouver  canada             m  u  bers   the tangiblek robotics program  applied computational thinking for young children   early childhood research   practice  vol      no     p  n              b  zhong  q  wang  j  chen  and y  li   an exploration of three  dimensional integrated assessment for computational thinking   journal of educational computing research  p                               a  p  ambrosio  c  xavier  and f  georges   digital ink for cognitive assessment of computational thinking   in frontiers in education con  ference  fie        ieee  ieee        pp            d  giordano  f  maiorana  a  p  csizmadia  s  marsden  c  riedesel  s  mishra  and l  vinikiene     new horizons in the assessment of com  puter science at school and beyond  leveraging on the viva platform   in proceedings of the      iticse on working group reports  acm        pp                m  akcaoglu   learning problem solving through making games at the game design and learning summer program   educational technology research and development  vol      no     pp                      j  m  wing   computational thinking and thinking about computing   philosophical transactions of the royal society of london a  math  ematical  physical and engineering sciences  vol       no        pp                        v  barr and c  stephenson   bringing computational thinking to k     what is involved and what is the role of the computer science education community   acm inroads  vol     no     pp               
computational thinking builds on the power and limits of computing processes  whether they are executed by a human or by a machine  computational methods and models give us the courage to solve problems and design systems that no one of us would be capable of tackling alone  computational thinking confronts the riddle of machine intelligence  what can humans do better than computers  and what can computers do better than humans  most fundamentally it addresses the question  what is computable  today  we know only parts of the answers to such questions  computational thinking is a fundamental skill for everyone  not just for computer scientists  to reading  writing  and arithmetic  we should add computational thinking to every child s analytical ability  just as the printing press facilitated the spread of the three rs  what is appropriately incestuous about this vision is that computing and computers facilitate the spread of computational thinking  computational thinking involves solving problems  designing systems  and understanding human behavior  by drawing on the concepts fundamental to computer science  computational thinking includes a range of mental tools that reflect the breadth of the field of computer science  having to solve a particular problem  we might ask  how difficult is it to solve  and what s the best way to solve it  computer science rests on solid theoretical underpinnings to answer such questions precisely  stating the difficulty of a problem accounts for the underlying power of the machine the computing device that will run the solution  we must consider the machine s instruction set  its resource constraints  and its operating environment  in solving a problem efficiently  we might further ask whether an approximate solution is good enough  whether we can use randomization to our advantage  and whether false positives or false negatives are allowed  computational thinking is reformulating a seemingly difficult problem into one we know how to solve  perhaps by reduction  embedding  transformation  or simulation  computational thinking is thinking recursively  it is parallel processing  it is interpreting code as data and data as code  it is type checking as the generalization of dimensional analysis  it is recognizing both the virtues and the dangers of aliasing  or giving someone or something more than one name  it is recognizing both the cost and power of indirect addressing and procedure call  it is judging a program not just for correctness and efficiency but for aesthetics  and a system s design for simplicity and elegance  computational thinking is using abstraction and decomposition when attacking a large complex task or designing a large complex system  it is separation of concerns  it is choosing an appropriate representation for a problem or modeling the relevant aspects of a problem to make it tractable  it is using invariants to describe a system s behavior succinctly and declaratively  it is having the confidence we can safely use  modify  and influence a large complex system without understanding its every detail  it is modularizing something in anticipation of multiple users or prefetching and caching in anticipation of future use  computational thinking is thinking in terms of prevention  protection  and recovery from worst case scenarios through redundancy  damage containment  and error correction  it is calling gridlock deadlock and contracts interfaces  it is learning to avoid race conditions when synchronizing meetings with one another  computational thinking is using heuristic reasoning to discover a solution  it is planning  learning  and scheduling in the presence of uncertainty  it is search  search  and more search  resulting in a list of web pages  a strategy for winning a game  or a counterexample  computational thinking is using massive amounts of data to speed up computation  it is making trade offs between time and space and between processing power and storage capacity  thinking like a computer scientist means more than being able to program a computer  it requires thinking at multiple levels of abstraction  consider these everyday examples  when your daughter goes to school in the morning  she puts in her backpack the things she needs for the day  that s prefetching and caching  when your son loses his mittens  you suggest he retrace his steps  that s backtracking  at what point do you stop renting skis and buy yourself a pair   that s online algorithms  which line do you stand in at the supermarket   that s performance modeling for multi server systems  why does your telephone still work during a power outage   that s independence of failure and redundancy in design  how do completely automated public turing test s  to tell computers and humans apart  or captchas  authenticate humans   that s exploiting the difficulty of solving hard ai problems to foil computing agents  computational thinking will have become ingrained in everyone s lives when words like algorithm and precondition are part of everyone s vocabulary  when nondeterminism and garbage collection take on the meanings used by computer scientists  and when trees are drawn upside down  we have witnessed the influence of computational thinking on other disciplines  for example  machine learning has transformed statistics  statistical learning is being used for problems on a scale  in terms of both data size and dimension  unimaginable only a few years ago  statistics departments in all kinds of organizations are hiring computer scientists  schools of computer science are embracing existing or starting up new statistics departments  computer scientists  recent interest in biology is driven by their belief that biologists can benefit from computational thinking  computer science s contribution to biology goes beyond the ability to search through vast amounts of sequence data looking for patterns  the hope is that data structures and algorithms our computational abstractions and methods can represent the structure of proteins in ways that elucidate their function  computational biology is changing the way biologists think  similarly  computational game theory is changing the way economists think  nanocomputing  the way chemists think  and quantum computing  the way physicists think  this kind of thinking will be part of the skill set of not only other scientists but of everyone else  ubiquitous computing is to today as computational thinking is to tomorrow  ubiquitous computing was yesterday s dream that became today s reality  computational thinking is tomorrow s reality  back to top what it is  and isn t computer science is the study of computation what can be computed and how to compute it  computational thinking thus has the following characteristics  conceptualizing  not programming  computer science is not computer programming  thinking like a computer scientist means more than being able to program a computer  it requires thinking at multiple levels of abstraction  fundamental  not rote skill  a fundamental skill is something every human being must know to function in modern society  rote means a mechanical routine  ironically  not until computer science solves the ai grand challenge of making computers think like humans will thinking be rote  a way that humans  not computers  think  computational thinking is a way humans solve problems  it is not trying to get humans to think like computers  computers are dull and boring  humans are clever and imaginative  we humans make computers exciting  equipped with computing devices  we use our cleverness to tackle problems we would not dare take on before the age of computing and build systems with functionality limited only by our imaginations  complements and combines mathematical and engineering thinking  computer science inherently draws on mathematical thinking  given that  like all sciences  its formal foundations rest on mathematics  computer science inherently draws on engineering thinking  given that we build systems that interact with the real world  the constraints of the underlying computing device force computer scientists to think computationally  not just mathematically  being free to build virtual worlds enables us to engineer systems beyond the physical world  ideas  not artifacts  it s not just the software and hardware artifacts we produce that will be physically present everywhere and touch our lives all the time  it will be the computational concepts we use to approach and solve problems  manage our daily lives  and communicate and interact with other people  and for everyone  everywhere  computational thinking will be a reality when it is so integral to human endeavors it disappears as an explicit philosophy  many people equate computer science with computer programming  some parents see only a narrow range of job opportunities for their children who major in computer science  many people think the fundamental research in computer science is done and that only the engineering remains  computational thinking is a grand vision to guide computer science educators  researchers  and practitioners as we act to change society s image of the field  we especially need to reach the pre college audience  including teachers  parents  and students  sending them two main messages  intellectually challenging and engaging scientific problems remain to be understood and solved  the problem domain and solution domain are limited only by our own curiosity and creativity  and one can major in computer science and do anything  one can major in english or mathematics and go on to a multitude of different careers  ditto computer science  one can major in computer science and go on to a career in medicine  law  business  politics  any type of science or engineering  and even the arts  professors of computer science should teach a course called  ways to think like a computer scientist  to college freshmen  making it available to non majors  not just to computer science majors  we should expose pre college students to computational methods and models  rather than bemoan the decline of interest in computer science or the decline in funding for research in computer science  we should look to inspire the public s interest in the intellectual adventure of the field  we ll thus spread the joy  awe  and power of computer science  aiming to make computational thinking commonplace  
   introduction this work presents and discusses a specific didactic approach to support the development of students  computational thinking  ct  skills in educational robotics  er  activities  as wing     argues  computational thinking  ct  is a fundamental skill for everyone and it should be considered as an important component of every child s analytical ability along with reading  writing  and arithmetic  recently  there has been growing recognition of the importance of ct in controlling and managing cognitive activities  as well as understanding and solving problems in a wide range of contexts  not only in the field of computer science  but in all disciplines        corresponding author  tel                   e mail addresses  atmatzid csd auth gr  s  atmatzidou   sdemetri csd auth gr  s  demetriadis   robotics can be used as a tool that offers opportunities for students to engage and develop computational thinking skills        educational robotics is being introduced in many schools as an innovative learning environment  enhancing and building higher order thinking skills and abilities  and helping students solve complex problems      furthermore  a guided instruction approach using robots facilitates teamwork  develops conceptual understanding  enhances critical thinking  and promotes higher order learning in the domains of mathematics and science      this paper describes the implementation of er activity in secondary school  focusing on the different possible impacts that the instructional approach might have on the development of students  ct skills depending on their age and gender  guided by worksheets  students worked in small groups to solve robot programming problems  the level of their ct skills was evaluated at different times during the activity  with focus on five key ct constructs abstraction  generalisation  algorithm  modularity and decomposition  http   dx doi org         j robot                              elsevier b v  all rights reserved      s  atmatzidou  s  demetriadis   robotics and autonomous systems                      background robotics is usually seen as an interdisciplinary activity drawing mostly in science  mathematics  informatics and technology and offering major new benefits to education in general at all levels        educational robotics is a powerful  flexible  teaching and learning tool  encouraging students to construct and control robots using specific programming languages      the roots of er are to be found in seymour papert s work  creator of the logo programming language      papert suggests that learning is most effective when students are experiencing and discovering things for themselves  he also argues that robotics activities have tremendous potential to improve classroom teaching         drawing on the theoretical underpinnings of papert s constructionism and vygotsky s sociocognitive approaches  er activities help students transform themselves from passive to active learners  constructing new knowledge by collaborating with their peers and developing essential mental skills by acting as researchers  many studies indicate that er activities have a positive impact on the development of students  critical thinking  problem solving and metacognitive skills           and also on the learning of a programming language            other studies demonstrate how er promotes a joyful mode of learning  while advancing students  motivation  collaboration  self confidence and creativity          many researchers argue that robotics programs provide a valuable avenue to increase students  interest and participation in science  technology  engineering and mathematics  stem   while they motivate them to pursue a career in one of these fields  e g            however  certain researchers point out that although robotics seems to be an excellent tool for teaching and learning and a compelling topic for students of all ages  the pedagogy of teaching with robotics is still in its infancy         it is also noted that more research is needed to point out how to work with educational robotics to help students develop specific skills          as this study focuses on er as a means for advancing students  ct skills  we concisely review next the ct theoretical framework and studies on the er ct relationship  wing     describes ct as a type of analytical thinking that draws on concepts fundamental to computer science and provides a way for solving problems  designing systems  and understanding human behaviour  ct roots go back to papert s ideas of the computer being the children s machine that would allow them to develop procedural thinking through programming  and refers to ways of algorithmically solving problems and to the acquisition of technological fluency      in the literature there are multiple definitions of ct and several suggestions about which skills and abilities are relevant to ct and how to integrate ct in the curricula of all grades  wing     asserts that ct has the potential to advance the students  problemsolving skills through processes such as abstraction  generalisation  decomposition  algorithm design and separation of concerns  astrachan et al       emphasise skills such as  developing computational artefacts  abstracting  analysing problems and artefacts  and communicating and working effectively in teams  still others argue that the key concepts of ct are abstraction  automation  simulation  evaluation  algorithm building  conditional logic  debugging  decomposition  problem analysis  distributed computing and effective teamwork          emphasis is also given to the view that the educational benefits of ct transfer to any domain   not only in the field of computer science   by enhancing and reinforcing intellectual skills         yadav      argues emphatically that  ct in education has the potential to significantly advance the problem solving skills of k    students   naturally  researchers have started exploring also the potential of educational robotics to promote the development of ct            certain studies emphasise that children who program robots learn and apply core ct concepts such as abstraction  automation  analysis  decomposition  modularisation and iterative design            a      study by national science foundation     provided evidence that student programmers in a robotics project  developed abstraction  automation  and analysis related skills  while programming the robot agent to interact with its environment  however  it is worth mentioning according to researchers that the field requires systematic assessment procedures  research engaging younger children reported also positive outcomes  demonstrating that children     years old can build simple robotics projects becoming acquainted with powerful ideas of engineering  technology  and computer programming while also building ct skills             more specifically  a study with    kindergarten children      using lego wedo robots and the cherp  creative hybrid environment for robotics programming  language  reported that the children were involved and understood basic programming and ct concepts relevant to sequencing and choosing the correct instructions  a similar study by kazakoff et al  with    kindergarten children  focusing solely on sequencing  showed improvement of the students  scores from the first activity to the last       regarding elder children  junior and high school students   studies report also positive results on the development of ct skills  grover      developed a curriculum for teaching ct language and ct principles in schools  the results indicated that students after the intervention were capable of using certain ct related vocabulary and principles  such as conditional logic and decomposition   whereas other concepts like abstraction  representation and algorithmic flow control were seldom used  another study by touretzky et al       engaging children aged        some of them with special abilities   focused on abstraction across different programming environments and especially on deep and abstract understanding of programming concepts  the researchers concluded that   despite the limitations   robotics is a helpful tool for young students    facilitating a more abstract understanding    penmetcha      investigated the effects of er activity on university students exploring the relationship between robotics and developing programming and algorithmic thinking  the results showed that robotics fulfil their purpose as a medium for incorporating ct practices  regardless of the students  background  and can be used to teach concepts such as designing  programming and testing at a more abstract level  as in the other studies  limitations were reported relevant to the study small sample size       finally  a case study by eguchi      explores the effects of a robotics competition on students  ct and problem solving skills reporting an overall very positive effect  overall  although the ct concept has attracted considerable attention  the literature on implementing ct in a k    setting is still relatively sparse       there is also lack of empirical evidence in defining the explicit ct boundaries       although recent articles begin to describe what it looks like               more than that  research into how ct can be introduced in the classroom is on the early stages and there is shortage of description about how children can learn and develop ct skills             another issue is to understand at what age   or grade level   children are ready to be familiar with advanced concepts such as abstraction  automation  decomposition  etc  and how to teach those skills progressively      likewise  there is little agreement on strategies for assessing the development of ct in young people                existing studies typically employ a student group of specific age thus limiting the generalisation of the results to other age groups  e g              have small sample sizes  e g                  and do not provide explicit teacher guidance on how to organise a well guided er activity to promote students  ct skills  researchers also differ in the way they build an operational ct skills framework to apply to their studies  table   presents the various ct skill models employed in various er studies  another issue of interest is the gender differences observed in studies on stem learning activities  much research has s  atmatzidou  s  demetriadis   robotics and autonomous systems                       table   ct skills models employed in various er studies  article context ct skills model lee et al      k    abstraction  automation  and analysis  grover         students mean age     computational thinking language  ctl       abstraction  taskbreakdown  conditional logic  representation  algorithm  and debugging  penmetcha         university students abstraction  algorithm  programming  and designing  bers et al          kindergarten students sequencing kazakoff et al          kindergarten students sequencing touretzky et al          students aged       abstraction between three software frameworks  kodu  alice  lego nxt   recognise fundamental programming concepts  bers et al          kindergarten students debugging  correspondence  sequencing  and control flow  eguchi          students aged       problem solving  debugging  prototyping  decomposition  logical thinking  creating step by step procedure  analysing skills  critical thinking  iteration  and debugging  documented gender differences  showing that men have higher levels of self efficacy and higher probability of success in stemrelated fields  e g             however  over the past few decades the gender gap has narrowed  the stereotypic gender role might have a clear impact on attitudes about technology but this can be positively changed under the right conditions          studies indicate that both genders can have a successful and rewarding experience being exposed to robotics activities  milto et al       found that although men were more confident in their abilities than women  in an introductory engineering class women and men displayed equivalent competency in robotics activities  similarly  nourbakhsh et al       investigated the gender differences in a robotics course involving high school students  according to the study  although girls entered the course with less confidence than boys and were more likely to have struggled with programming  by the end of the course girls  confidence increased more than boys   another study by cheng      reported that in terms of assembling and programming lego robots  while there were slightly higher average scores for male students it was not of significant difference  however  research on comparing the development of ct skills between genders in k    robotics activities is relatively sparse  while research has been conducted on gender differences in many science and mathematics areas      limited research has been carried out into gender differences in robotics and programming achievement especially in early childhood       research motivation and key research question considering the above background  the current study aimed to conduct an instructional well guided er activity  recruit a relatively large student sample size and explore the impact of the activity on students  ct skills  comparing student groups of different age and gender  thus  the overarching research question set by the study is    are students of different age and gender developing ct skills in the same way in the context of educational robotics activity       method      participants for the purpose of our study we conducted a series of robotic training seminars in public schools in the area of thessaloniki  in total      students of two different school levels  junior high and high vocational  participated in the study  specifically  in the seminars were engaged    junior high  j       k   students  age         boys and    girls    high vocational  h       k    students  age         boys and    girls        a model for ct skills to operationalise the ct theoretical approach  we focused on five core dimensions of the broader ct conceptual framework  these included  abstraction  generalisation  algorithm  modularity and decomposition  the proposed model encompasses skills that can easily emerge when students engage in educational robotics activities  in detail  the proposed model for ct skills presented in table         implementation procedure in total  we conducted   training robotics seminars    at junior high and   at high vocational schools   during the           school year  the lego mindstorms nxt     educational robotics kit was used in all seminars  organised and supervised by the main researchers  authors of this work   each seminar comprised    sessions    h each  conducted once a week   trained postgraduate students    trainers    assisted with the practicalities of the activity  e g  organising student groups  handling out worksheets  encouraging and scaffolding teams  administering questionnaires  etc    the seminars were conducted during the typical school time schedule and the class teachers remained in the classroom during the activity  simply helping to maintain the flow of each lesson  in detail  the sessions were as follows   st session  in the beginning  the teacher introduced robotics in general  the lego mindstorms nxt robot and the lego nxtg programming environment  then she handed out the profile questionnaire  pq  to be filled in individually by students  working in groups  the students implemented their first program using their own robot kit  emphasis was placed on the concept of algorithm and the importance of developing precise instructions that when implemented they lead to the solution of the problems   nd session  the objective here was students  familiarisation with some basic programming concepts  sequential structure and loop structure   the students also became familiar with the motors  the touch sensor  the sound sensor and finally with some basic feature of nxt  such us displaying images on the screen of the robot  in this session  students programmed their robots to dance and presented them to the other groups  the session placed focus on the abstraction and generalisation concepts  participants were prompted to reflect on the role of these two concepts in their own problem solving activities   rd and  th sessions  the students worked on the control structure and on how to use the ultrasonic sensor and the wait block  they also practised conversion of numbers to text in order to show a numerical value on the screen  in the last activity of the  th session the challenge was to create a robotic alarm system that detects motion and sound  at the end of the fourth session we administered the first questionnaire  q   in order to assess the students  level of ct skills development  in  rd session the focus here was on modularity and decomposition and their importance in optimising the structure of an algorithm implementation  from the  th session onwards  the activities challenged the students to engage in practising all the concepts of the ct model and develop relevant skills   th and  th sessions  the students became familiar with the operation of light sensor  the creation of reusable subprograms     s  atmatzidou  s  demetriadis   robotics and autonomous systems                   table   the ct skills model applied in the current study  ct skills description student skills  the student should be able to        abstraction abstraction is the process of creating something simple from something complicated  by leaving out the irrelevant details  finding the relevant patterns  and separating ideas from tangible details       wing     argues that the essence of ct is abstraction     separate the important from the redundant information     analyse and specify common behaviours or programming structures between different scripts     identify abstractions between different programming environments  generalisation generalisation is transferring a problem solving process to a wide variety of problems       expand an existing solution in a given problem to cover more possibilities cases  algorithm algorithm is a practice of writing step by step specific and explicit instructions for carrying out a process  kazimoglu et al       argue that selection of appropriate algorithmic techniques is a crucial part of ct     explicitly state the algorithm steps     identify different effective algorithms for a given problem     find the most efficient algorithm  modularity modularity is the development of autonomous processes that encapsulate a set of often used commands performing a specific function and might be used in the same or different problems       develop autonomous code sections for use in the same or different problems  decomposition decomposition is the process of breaking down problems into smaller parts that may be more easily solved  break down a problem into smaller simpler parts that are easier to manage  wing     argues that ct is using decomposition when attacking or designing a large complex task   make a new   my block     the use of the lamp block and the parallel programming  the students programmed a recycler robot  where the robot moves following a black line and sorts items to be recycled depending on their colours   th and  th sessions  the students worked on the concept of variable and basic arithmetic operators  in this context  the students implemented a security guard robot that moves around a building and detects every motion  sound and change in lightness   th and   th sessions  students were given activities of increased difficulty to practise their developing ct skills in the context of more complex authentic problems  such as a car that moves following the traffic code  etc  the project allowed children to demonstrate the powerful ideas they learned over the previous sessions as well as to apply them and continue learning by solving a new problem  a second questionnaire  q   was administered at the end of this session to assess the students  current level of ct skills development    th session  in the final session  student groups were given the   final challenge   that is a demanding robot programming task for groups to compete against each other  the winner was the group that proposed an effective and efficient task solution  optimised code and fastest solution   after the completion of each seminar  two other instruments were used to capture the students  level of ct skills and also their views regarding the er training experience  these were   a  a  think aloud  protocol implementation   b  a student s opinion questionnaire  overall  the procedure of each training seminar and the various data collection instruments are presented in fig          didactic model in each seminar  students worked in groups of three  or four if necessary  and were guided by worksheets in the investigating robot programming tasks of gradually increased complexity  these enabled them to start constructing understanding and developing the ct skills prescribed by our model  the worksheets also directed students to assume the roles of analyst  analyse the problem   algorithm designer  describe the algorithm   programmer  write the code   or debugger evaluator  review and assess the solution   the students exchanged roles successively as the activities evolved  during the sessions  the trainers acted as facilitators to scaffold students while solving programming tasks  after the  th session  trainers gradually faded their support  this means that detailed guidance was gradually replaced by simple prompts to students to assume the relevant role and practise the acquired skills on their own capacity      the trainers were ready to fade in again and support students should the circumstances require it  to trigger students  reflection and development of ct modelled skills  prompts such as the following  see table    were included in the worksheets  peers were expected to spend some time discussing how to answer these prompts  then one peer was assigned the responsibility of writing down the group answer to the worksheet       measures  instruments and data analysis the instruments that we used to collect evaluation data  and respective measures  are as follows  profile questionnaire  pq   an individual questionnaire was administered in the beginning of each seminar  the questionnaire recorded some simple demographic data  e g  student gender   the students  background on computer use  for example  frequency of computer use  computer experience  etc   and experience with robotics  such as previous knowledge on constructing and programming robots   two intermediate questionnaires  q  and q    q  was handed out after the  th and q  after the   th session  both questionnaires asked students to solve programming problems and practise ct skills during their solution process  for example  identify common programming structures that guide robot behaviour in two tasks  abstraction   propose a more general solution  generalisation   describe step by step the solution process  algorithm   etc  the assessment of students  answers in q  and q  was based on a graded criterion instrument  rubric  using a   point likert scale       unsatisfactory        quite satisfactory        satisfactory        excellent    there were specific criteria for each construct of the ct model  abstraction  generalisation  algorithm  modularity  decomposition  and so each student was assigned a grade for each ct construct after answering the q  and q  questionnaires  a mean value was also calculated across all ct constructs  in q  and q  respectively   we consider the q  and q  measurements as indicators of student s level of ct skills development at certain phases during the training seminar  q  after the  th session  q  after the   th session   in the following  we refer to q  measurement as   students  starting ct skill level    or simply ct    and to q  measurement as   students  final ct skill level    or simply ct      as ct   is a measurement reflecting students  ct skills early in the training  we use it as covariate in our statistical analysis  we would like to clarify that although administering a pre test s  atmatzidou  s  demetriadis   robotics and autonomous systems                       fig     seminar organisational structure  lower row indicates session when ct skills were introduced  arrows indicate sessions when evaluation interventions were conducted  table   ct skills and relevant prompts to trigger students  self reflection  abstraction what is common in robot behaviour in both programs  how would you describe this common behaviour  what is the common programming structure  which is the information you actually need  what is irrelevant detail and not necessary in your description  generalisation propose a more general solution for the activity above  that can cover a wider variety of cases  is the proposed solution more general and why  algorithm write step by step the operations needed so that the robot can do what the problem asks  what are the steps i will need to do to solve this problem  modularity are there any parts of the code that you have met before  have you created your own blocks for these  what are they  do you expect to need some parts of this particular code in the future or in a different problem  decomposition can i break down this complex problem into smaller ones  can i solve and explain the smaller problems  building up a solution towards the complex problem  before any training was feasible  we though as a better approach to first provide students with a common programming tool for expressing ct  in our case  the lego mindstorms programming software  and then collect initial data after few sessions  session     we argue that this approach enabled us to   a  help students develop a homogeneous background that led to more reliable measurement of their initial ct level  students can express their ct using the same programming tool   and  b  compare students    short training   ct development  session    to   long training   ct development  session      student opinion questionnaire  soq   an opinion questionnaire was handed out to students to be filled individually after the completion of the training  the instrument recorded   a  students  subjective views on understanding ct concepts and developing relevant skills  and  b  students  views and opinions regarding the outcomes of the overall learning experience on four key aspects      development of students  ct skills      understanding of basic programming concepts      students  in group collaboration  benefits and possible drawbacks   and     likes and dislikes relevant to the overall activity  think aloud protocol  after the training  students individually were given a certain robot programming task and were asked to describe aloud the process they would follow to solve it  simultaneously  the researcher prompted students to reflect on ct concepts relevant to their solution  the assessment of the student s proposed solution was based also on the same graded criterion instrument  rubric  as before  we consider this grade as an indicator of student s ct skills when evaluated in a different context than that of the q  and q  questionnaires  the main difference is that the  think aloud  method allows students to express their thinking more freely as opposed to the highly structured form of the questionnaire instruments  in the following  we refer to  thinkaloud  measurement as   students  ta ct skill level    or simply ctta   as before  we have   individual measures for each ct construct and a mean ct ta grade calculated across all ct constructs  interview  after the think aloud activity students were asked  as a semi structured interview  to freely state their opinion on key aspects of the activity  the four aspects described above in the soq section   observation  systematic monitoring of the students  work was applied by taking notes on a structured form  observation sheets   both the supervising researcher and trainers filled in the sheets and then extensively discussed their observations to reach consent and decide on their importance  so  an observation table was gradually developed displaying researchers  observations in order of their discussed importance       results        statistical analysis profile questionnaire data revealed that none of the participating students had any previous experience with robotics  after the data collection  the statistical processing was as follows   a  table   presents statistical controls applied on students  ct   and ct    scores in junior high  j  and high vocational  h  groups   b  table   presents statistical controls applied on students  ct   and ct    scores analysed in each of the five dimensions of the ct model   c  table   presents statistical control applied on the students  ct ta scores  both total and analytical scores for each of the five ct dimensions    d  table   presents statistical control applied on students  ct   and ct    scores across different gender groups  two gender groups were used  girls and boys at junior  j  level  the girls boys distribution in the high  h  group was highly uneven and this group was excluded from across gender comparisons   e  table   presents statistical controls applied on students  ct   and ct    scores analysed in each one of the five dimensions of our ct model  as before  table    data refer to gender groups only within j group   f  table   presents statistical control applied on the students  ctta scores across gender  both total and analytical scores for each of the five ct dimensions       s  atmatzidou  s  demetriadis   robotics and autonomous systems                   table   comparing ct    and ct   scores between j and h groups  level n ct   ct    paired t test ancova m  sd  m  sd  ct    compared to ct    same student group  comparing ct    across student groups  ct   as covariate  j                            t              p         f                  h                            t              p         p                    total                             t               p           significant difference at the      level  table   comparing ct    and ct   scores analytically for the five ct dimensions  ct skills level ct   ct    paired t test ancova m  sd  m  sd  comparing ct    across student groups with ct   as covariate abstraction j                         t              p        f                  h                         t             p        p                    generalisation j                         t              p        f                  h                         t              p         p                    algorithm j                         t             p        f                  h                         t              p         p                    modularity j                         t              p         f                h                         t              p         p                    decomposition j                         t              p         f                   h                         t              p         p                         significant difference at the      level  table   comparing ct ta scores between j and h groups  ct skills j h t test m  sd  m  sd  abstraction                         t               p        generalisation                         t               p         algorithm                         t              p        modularity                         t              p        decomposition                         t              p        total ct ta                         t               p          significant difference at the      level  table   comparing ct    and ct   scores between gender groups  j level only   gender n ct   ct    paired t test ancova m  sd  m  sd  ct    compared to ct    same student group  comparing ct    across student groups  ct   as covariate  girl                            t              p         f                 boy                            t              p        p                     total                            t              p           significant difference at the      level         students  opinion questionnaire  soq  data from soqs and interviews helped us understand students  opinions regarding the overall activity  key findings can be summarised as follows   i  students  subjective impression was that they acquired certain ct skills  they reported that they can detect and describe the common behaviours or programming structures used in different tasks  m         sd         and also that they can suggest a more general solution for a given problem  m         sd           ii  students reported that the guidelines in the worksheets helped them develop a certain problem solving process  m         sd          they find this process useful to think of    it comes to mind    when solving problems in other domains as well  m         sd          some relevant students  statements are    now i think differently and solve problems more easily   and   i changed my way of thinking in problem solving even in other subjects such as mathematics     iii  the students stated that they became familiar with basic programming constructs  m         sd         and that they would like to continue with programming  in particular  h level students mentioned that they better understood some basic programming concepts they learned in other programming environments  such as the control structure    if      then      else    and the loop structure    for      next      do while           they also said that working with the robots not only helped them develop a deeper understanding of programming  m         sd         but also kept them in  s  atmatzidou  s  demetriadis   robotics and autonomous systems                       table   comparing ct    and ct   scores analytically for the five ct dimensions  j level only   ct skills gender ct   ct    paired t test ancova m  sd  m  sd  comparing ct    across school levels  ct   as covariate  abstraction girl                         t              p        f                 boy                         t             p        p                     generalisation girl                         t              p        f                boy                         t              p        p                    algorithm girl                         t             p        f                 boy                         t             p        p                    modularity girl                         t              p         f                 boy                         t              p        p                     decomposition girl                         t              p         f                 boy                         t              p         p                       significant difference at the      level  table   statistical analysis comparing ct ta between gender groups  j level only   ct skills girls  n       boys  n       independent t test m  sd  m  sd  abstraction                         t             p        generalisation                         t             p        algorithm                         t             p        modularity                          t             p        decomposition                          t             p        total ct ta                         t             p        terest and motivated them to keep working on programming  m         sd           iv  regarding collaboration  the students enjoyed working in groups    three minds are better than one      we motivate each other when working together    and assuming ct relevant roles  m         sd         with the most popular role being that of the   programmer     v  finally  the students found the robotics experience very interesting  m         sd          reporting that they would like to continue practising er in the future  m         sd         and engage in more challenging tasks  indicative of their interest is the fact that when finishing with the worksheets  they explored different programming structures    blocks      even those they had not learned yet   and different ideas to expand and improve their solutions       discussion and conclusions the current work analysed the development of students  computational thinking skills in the context of educational robotics  with special focus on the impact that the instructional approach may have on student groups of different ages and genders  the study provides evidence from evaluation instruments administered at various times during the activity  thus offering a picture of how ct skills develop as students  work progresses  students  ct skills are also evaluated using different modalities in assessment instruments  questionnaires answered in written and problemsolving think aloud protocols   finally  researchers  observations and qualitative data from students  opinion questionnaires help triangulate data and deeper understand their meaning  a first observation is that students develop the same level of ct skills at the end of their training independently of age  additionally  ct skills in most cases are significantly improved as the training proceeds  comparing ct   and ct    scores in tables   and     this is clear for the total population and for each of the two groups  although for the j group appears as a strong tendency  p          not exactly reaching the level of significance  table    paired t test and ancova   thus  one key conclusion is that the satisfactory development of ct skills needs a considerable number of training sessions   independently of student s age   and is not simply a matter of a few training sessions  this conclusion is in line with studies emphasising that skill development in general requires adequate amount of training time          reflecting further on table    we see that significant differences between ct    and ct   measures are identified in certain cases independently of student s level  age   clearly for the modularity and decomposition dimensions   while in other cases such differences are evidenced only for the h group  algorithm and generalisation dimensions  or not at all  abstraction   to explain these differences we resort to researchers  observations regarding the group composition and students  preference for writing  most students in the h group are boys not so willing to provide answers in written  this is in line with studies suggesting that boys are significantly more reluctant writers than girls  for example        by contrast  students in the j group are almost equally distributed across gender and adopt a more positive attitude towards expressing themselves in written  compared to boys in h group   keeping this in mind  we explore the implications of data in table    as the development of the abstraction skill for both groups reaches a high level already in session    not to be surpassed in the next sessions   this is an indication that students from session   onwards deal with programming tasks without further development of this skill in a way that is reflected in the measures  also  the additional workload of expressing this skill in written does not seem to affect students in the high group  however  generalisation and algorithm skills are further developed  from ct   to ct     only for the high group  table     this is probably explained by the observation that younger students in the j group are more willing to follow instructions and provide answers in written  so their scores are high already from the  th session  ct      while students in the h group improve significantly from ct   to ct    as they gradually familiarise themselves with following the worksheet guidelines and become more willing to provide written documents expressing their thinking  these explanations are further supported by the fact that the aforementioned differences are not observed when the modality of the assessment instrument changes  see also comments below regarding table     finally  considering the modularity and decomposition dimensions we observe significant differences between ct    and ct    for both j and h groups  regarding modularity  we believe that the significant improvement of     s  atmatzidou  s  demetriadis   robotics and autonomous systems                   ct    score for the j group is mainly due to the improvement of the girls  ct    score in the group  see also modularity in table    we comment on that further below   regarding decomposition  we see that both boys and girls in j group improve significantly their ct    score  see also table    and this  we believe  is due to the increase of problem complexity as the training proceeds  increased problem complexity gives the opportunity to students of both groups  j and h  to practise the skill more extensively and this is reflected in their scores  additionally  we identify   only for decomposition   a statistically significant difference between the two groups favouring students in the j group  ancova in table     we suggest that this is another manifestation of the unwillingness of boys in the h group to routinely follow instructions  students in this group do not actually think it is necessary to decompose the problem into smaller ones to solve it  however  this attitude could also be linked to the cognitive maturity of elder adolescents in group h as compared to the younger adolescents in group j  which enables the former to manage more complex programming solutions without decomposing them  moving on to table    ct ta scores   we see that when evaluating students  ct skills orally  think aloud protocol  no betweengroup differences are identified  except for generalisation  favouring the h group   this  corroborates our already stated conclusions that   a  development of ct skills happens in the same way for both groups independently of age  and  b  ct skills measures might be affected by the workload imposed on students from the recording instrument modality  when students are asked to provide written evidence of their skills  they might appear to underperform because of poorly following the instructions  as in decomposition  table     however  it is not clear why the h group outperforms j in generalisation  table     one possible explanation is that the oral modality allows the specific profile male students in group h to thoroughly express their more complex thinking required to describe a generalised problem solution  thus  we might have here another indication of the interaction between students  scores and assessment instrument modality  which should be seriously considered by researchers in relevant studies  in all other dimensions  and also in the total ct skills score  no significant differences are recorded  next  we focus on the analysis of scores between gender groups  tables       a key conclusion here is that  although boys and girls reach the same ct skills level  ancova in table     there is  however  a significant difference between ct    and ct   scores for the girls  subsample indicating that the girls need longer time to reach the same skills level  this difference is also reflected on the total population  paired t tests in table     this outcome is in line with other studies suggesting that girls seem to require more time  compared to boys  when it comes to skills development  see        table   presents analytically the ct    and ct   skills scores in the five dimensions for boys and girls  the previously discussed pattern    both genders reach the same skill level but girls need more time    appears again for the abstraction  strong tendency for girls  p          generalisation  strong tendency for girls  p          modularity  significant difference for girls  p          but not for the algorithm or the decomposition dimensions  for the decomposition  we believe  the explanation is the same as before  the increased complexity of programming tasks as the training proceeds allow students of both genders to practise decomposition more systematically and this is reflected in their scores  finally  some interesting evidence emerges in table    on one hand  no significant differences in ct skill scores appear  neither for the total ct ta score nor for any dimension  except for strong tendency in algorithm  favouring girls   the   no significant   outcome is compatible with the overall gender pattern that boys and girls reach finally the same skills level  on the other hand  however  the strong tendency in algorithm seems to be at odds with what has been discussed so far  as the algorithm relevant skill is the only one developed in the same way by both boys and girls  table     one possible explanation might be that while girls in the j group understand and express the algorithmic dimension of a programming task as efficiently as boys  table     nevertheless  when they are additionally given the opportunity to express their algorithmic thinking orally  they tend to do that more effectively than boys  table     anyway  we acknowledge that more research is needed to clarify that point  by reflecting on researchers  observations we report the most important of them as follows   a  despite any initial difficulties in grasping the concept of abstraction  students were able to easily identify the common programming concepts when comparing different scenarios  this conclusion is in line with quantitative data indicating that abstraction is easily grasped and practised by students   b  in the beginning  the students  faced difficulties in understanding the concept of generalisation and suggesting more general solutions  however  at the end of the training  interesting generalisations were observed in students  solutions  especially students in the h group assimilated the concept more easily and used it in the activities often without any intervention from trainers  this corroborates the findings in table   where elder adolescents  the h group  seem to practise generalisation significantly better when the assessment modality is oral  thus  generalisation appears to be a ct skill which develops better in elders and this is perhaps related to the cognitive developmental level of the h group  certainly  more research is needed to further clarify the issue   c  most students had difficulty in describing the algorithm with clarity and accuracy  they preferred to describe a process in general rather than analyse it step by step  perhaps this is due to the cognitive load induced when analytically expressing the algorithm  here  again  a modality effect is identified  girls tend to orally describe the algorithm better than boys  table      d  the students  encouraged by the trainers  practised the skill of modularity in their activities by creating their own programming   blocks    the students in j group familiarised with and integrated the skill more than the students in h group  this last observation is in line with quantitative data  table    showing that j group applies decomposition better  we attribute that behaviour mostly to h group students  unwillingness to follow instructions for decomposing problems  being able to manage the code as a whole  overall  this study provides evidence that   a  students of different ages     vs      and genders eventually reach the same level of ct skills development  this view is supported by evidence from assessment instruments using two modalities   b  time is an essential commodity for ct skills development  skills level evaluated in later session have been found in most cases to be significantly improved when compared to initial session   c  when analysing the particular skills of the ct model certain differences are identified which are related to the following factors  age and student cognitive developmental level  students  attitudes relevant to following instructions and afford workload induced by the task  and also gender   d  the assessment instrument modality may have an impact on students  scores as boys are  generally  more reluctant writers compared to girls  when this attitude is intense then boys may appear to underperform if skills evaluation is based on instruments of written modality   e  girls appear in most cases to need more time  training sessions  in order to reach the same skill level as boys   f  provided that the overall instructional context is supportive and the learning activity time is adequate  students may overcome their initial difficulties and successfully develop their ct skills  understanding the above conclusions should be done while also considering the limitations of the study  it is important to remember that educational robotics activities cannot be conducted under full experimental control and many factors might s  atmatzidou  s  demetriadis   robotics and autonomous systems                       interact in an unexpected and   relatively   uncontrolled way  the current study provides evidence coming from various data collecting methods and with assessment instruments of different modality  something that   we believe   increases the validity of the conclusions  however  it was not possible to include a control group in the design that would allow exploring the issue of whether the ct skills in er activities develop in the same way compared to a control non er instructional condition  an additional limitation is the exclusion of the h group from across gender controls due to the highly uneven distribution of girls boys in the sample  this does not permit the current study to simultaneously apply across age and across gender controls that could further shed light on the gender relevant differences and reveal any possible interaction between the two factors  finally  the study did not administer any pre intervention controls of students    preference for writing   attitude and general ability levels  our experience indicates that such tests could provide valuable information regarding some of the observed gender and group relevant differences  acknowledgements the authors would like to thank all school teachers  postgraduate student trainers and the students involved in the er seminars for their helpful collaboration and also the journal editor and the manuscript reviewers for their constructive comments  
the current issue and full text archive of this journal is available on emerald insight at  www emeraldinsight com           htm abstract artificial intelligence  computational thinking  and mathematics education artificial intelligence     received    september      revised    october      accepted    november      george gadanidis western university  london  canada purpose   the purpose of this paper is to examine the intersection of artificial intelligence  ai   computational thinking  ct   and mathematics education  me  for young students  k     specifically  it focuses on three key elements that are common to ai  ct and me  agency  modeling of phenomena and abstracting concepts beyond specific instances  design methodology approach   the theoretical framework of this paper adopts a sociocultural perspective where knowledge is constructed in interactions with others  vygotsky         others also refers to the multiplicity of technologies that surround us  including both the digital artefacts of our new media world  and the human methods and specialized processes acting in the world  technology is not simply a tool for human intention  it is an actor in the cognitive ecology of immersive humans with technology environments  levy              that supports but also disrupts and reorganizes human thinking  borba and villarreal         findings   there is fruitful overlap between ai  ct and me that is of value to consider in mathematics education  originality value   seeing me through the lenses of other disciplines and recognizing that there is a significant overlap of key elements reinforces the importance of agency  modeling and abstraction in me and provides new contexts and tools for incorporating them in classroom practice  keywords artificial intelligence  mathematics education  computational thinking paper type conceptual paper introduction this paper examines the intersection of artificial intelligence  ai   computational thinking  ct  and mathematics education  me  for young students  k     specifically  it focuses on three key elements that are common to ai  ct and me  agency  modeling of phenomena and abstracting concepts beyond specific instances  see figure     as is the case with a lot of the author s work  the theoretical framework of this paper adopts a sociocultural perspective where knowledge is constructed in interactions with others  vygotsky         others also refers to the multiplicity of technologies that surround us  including both the digital artefacts of our new media world  and the human methods and specialized processes acting in the world  technology is not simply a tool for human intention  it is an actor in the cognitive ecology of immersive humans with technology environments  levy              that supports but also disrupts and reorganizes human thinking  borba and villarreal         actor network theory  latour        emphasizes the reciprocal relationship between the  actor  and technology  where we are both acting and acted upon  thumlert et al          in this examination of the overlap of ai  ct and me  i identify and explore key elements of ct as actors we  can  think with in the learning and teaching process  the first two sections below introduce ai and ct  the third section discusses how agency  modeling and abstraction may be seen as three common key elements of ai  ct and me  ai ai is the intelligence evident in machines or software  it is also the name of the academic field of study which studies how to create computers and computer software that are capable of intelligent behavior  major ai researchers and textbooks the international journal of information and learning technology vol     no          pp            emerald publishing limited           doi         ijilt              ijilt          define this field as  the study and design of intelligent agents   in which an intelligent agent is a system that perceives its environment and takes actions that maximize its chances of success   artificial intelligence   n d   para      today  ai is increasingly pursued in a variety of ways by industry  such as seen in the development of self driving cars by google and cognitive systems like watson by ibm  ai singularity some experts estimate that we are       years away from an ai singularity  where machines capable of recursive self learning surpass human intellectual capacity and control  ai machines that match and surpass human intelligence may be seen as leading to positive technological advances  such as eliminating aging and disease or enhanced space travel  bostrom and yudkowsky         at the same time  an ai singularity may prove disastrous  stephen hawking told the bbc  cellan jones          the development of full ai could spell the end of the human race   hawking        para     wrote  if a superior alien civilisation sent us a message saying   we ll arrive in a few decades   would we just reply   ok  call us when you get here   we ll leave the lights on   probably not   but this is more or less what is happening with ai  although we are facing potentially the best or worst thing to happen to humanity in history  little serious research is devoted to these issues        all of us should ask ourselves what we can do now to improve the chances of reaping the benefits and avoiding the risks  ai in education ai in education has historically focused on the design of digital tutors that not only provide exposition of concepts to be learned  but also have the intelligence to respond meaningfully to student behavior  such as providing adaptive support  gilbert et al          addressing student learning styles  dorca        or providing culturally appropriate communication  blanchard         historically  these tutors were embedded in software packages designed for specific content areas  such as mathematics  today  especially in higher grades and in post secondary settings  with student learning increasingly occurring in online settings  there is a focus on web based intelligent agents that may act as content tutors or as online discussion facilitators  adamson et al         tegos et al          ai support of online learning is especially important with the growth of massive open online courses  moocs   where enrollment in the most popular mooc platforms averages over        students  ferenstein         ai can play a role in organizing and supporting online collaboration and in assessing student learning  another form of educational ai  which most of us take for granted  is online search engines coupled with the tremendous amount of freely accessible online information  me agency modeling abstracting ct figure    three elements common to ai  ct and me ai if we need a definition  the knowledge to complete a task  or help to understand a concept  a quick search of available online knowledge will identify a variety of text and multimedia resources to assist us  ct ct in education has three instances  screen based coding  digital tangibles  such as programmable robots and circuits   and off screen algorithms or pseudocode  the term ct was popularized by wing s        advocacy   to reading  writing  and arithmetic  we should add ct to every child s analytical ability    p       currently ct in education is more as its own  isolated curriculum objective  rather than integrated with  and enriching  existing subject areas  gadanidis         however  there is a natural connection between ct and mathematics   such as in the logical structure or in the ability to model mathematical relationships  wing         ai ct me let us now turn to the intersection of ai  ct and me and explore their common focus on agency  modeling and abstraction  agency ai  agency and the associated features of self regulation and self learning are key aspects of ai  let s take self driving cars as an example  where a core problem is the analysis of sensor and image data  for instance  what kind of object is in front of the car  and how should the car respond  it examines the images and guesses the kind of object in each image  initially most of its guesses will be wrong  therefore  the algorithm modifies internal parameters or parts of its structure somewhat and tries again  this process continues  discarding changes that reduce the algorithm s accuracy  keeping changes that increase the accuracy  until it correctly classifies all images  afterward  when entirely new images are presented to the algorithm it will classify them with high accuracy  the algorithm has learned   top misconceptions of autonomous cars and self driving vehicles        para       the team of programmers designing the self driving car could attempt to anticipate every obstacle or situation  but variations are too numerous  the car in action has to be able to learn from its experience and to make decisions based on that self learning  what is also interesting is that once one car learns something from a situation  its knowledge can be immediately shared with all other cars  so that all cars learn  ct  student agency is a key feature of education oriented ct environments  building on papert s        work with logo programming  several programming languages are available today  e g  scratch  available  at https   scratch mit edu    that offer a low floor  enabling even young children to engage with little prerequisite knowledge  and a high ceiling  providing opportunities to explore more complex relationships  as elaborated in greater detail in gadanidis  in press   this environment offers students opportunities to abstract  automate and dynamically model concepts  to explore their relationships and to experience conceptual surprise and insight  not only by implementing pre programmed simulations  but also by creating and editing their own  thus experiencing ct and mathematics as producers as well as consumers  for example  figure   shows the scratch code for drawing a set of circles  rotated about a point  young students can drag and drop code blocks that snap together to model various of mathematical concepts  in such computer coding experiences  students are in control  writing personally meaningful code and exploring related problems and extensions  me  students  agency is also a key feature of me theory  burton        suggests that agentic control makes a substantial difference in mathematics attitude and achievement  artificial intelligence     ijilt          go to x    y    clear pen down repeat    draw circle turn    degrees change pen color by    define draw circle repeat    move   steps turn   degrees schoenfeld        suggests   many students come to believe that school mathematics consists of mastering formal procedures that are completely divorced from real life  from discovery  and from problem solving   p        papert        p      adds   i am convinced that the best learning takes place when the learner takes charge   modeling ai  developing a self driving car involves conceptualizing models of how other cars move and react and how pedestrians interact with vehicles  to give two examples  similarly  designing intelligent agents in education contexts  such as tutoring or online learning facilitation  requires the development of models of the subject matter and of the learners  this model creation and the associated model testing and  refinement is an integral component of ai development  ct  ct is an approach to problem solving that focuses on the logic and design of computational algorithms  or sequences of steps that can be implemented using a computer  aho        wing                     the power of ct modeling is its dynamic nature  making a change in the computer code shows the mathematical reaction immediately  for example  changing the values of parameters in figure   can cause the program to draw fewer circles or different shapes  me  dynamic modeling allows students to  play  with mathematics and helps bring to life the concepts students are studying  play naturally engages children with creative problem solving  ginsburg        and has historically been valued in early childhood learning  perry and dockett        duncan and lockwood         abstraction ai  abstraction  plays a key role in representing knowledge and in reasoning   saitta and zucker        p      and is an integral component of ai development  for example  in the case of the self driving car  creating a model of  pedestrian  abstracts key attributes  figure    creating a circles pattern in scratch ct  yadav et al         note that abstraction is a key element of ct  wing        p        states   in computing  we abstract notions beyond the physical dimensions of time and space  our abstractions are extremely general because they are symbolic  where numeric abstractions are just a special case   this process of abstraction can be seen in figure    where the code used represents a variety of related cases at once  me  abstraction is at the heart of mathematics  abstraction  in the everyday sense of the word  is also a natural human activity  for example  very young children easily abstract beyond specific instances of objects and develop mental models of classes of objects  such as  cat   despite the many different sizes  colors and behaviors of cat instances  however  as i have argued in gadanidis              the idea of engaging young students with abstraction is not widely accepted in education  primarily due to the widespread acceptance of piaget s stages of development  egan        notes that  piaget s ideas and overall approach absolutely dominate in education   p        papert         egan         fernandez armesto        and schmittau        challenge piaget s notion that young children are not capable of abstract thinking  which egan identifies as integral to language development  abstraction helps students conceptualize and engage with complex problems and relationships by reducing information and detail  wing        notes that we use abstraction to better manage complexity  concluding remarks there is tremendous interest and enthusiasm today for ct in education  in canada  for example  in january      prime minister justin trudeau said   we need to do a lot better job of getting young people to understand what coding is and how it s important  how to program  how to problem solve  how to create the most elegant algorithm possible   kitchener post         around the same time  the provinces of british columbia and nova scotia announced that computer coding will be added to all grades of the k    curriculum  internationally  as one example  england in      mandated a coding curriculum for all k    students  at the same time  as discussed above  there is a growing industry focus on ai  these phenomena are not distinct or separate  as the ancient greek playwright sophocles suggested  there are few plots in life  to better understand the evolving phenomena around us it is important to examine how they overlap and to see each through the lens of another  this paper offers a nascent exploration of the intersection of ai  ct and me  highlighting three of their common elements  agency  modeling and abstraction  this seeing of me through the lenses of other disciplines helps us recognize that there is a significant overlap of key elements  draws our pedagogical attention to the importance of agency  modeling and abstraction in me  and provides new contexts and tools for incorporating them in classroom practice  references adamson  d   dyke  g   jang  h  and rose  c p           towards an agile approach to adapting dynamic collaboration support to student needs   international journal of artificial intelligence in education  vol      pp       aho  a v           computation and computational thinking   computer journal  vol      pp           artificial intelligence  n d     in wikipedia   available at  https   en wikipedia org wiki artificial  intelligence  accessed march            blanchard  e g           socio cultural imbalances in aied research  investigations  implications and opportunities   international journal of artificial intelligence in education  vol      pp           borba  m c  and villarreal  m e          humans with media and reorganization of mathematical thinking  information and communication technologies  modeling  experimentation and visualization  springer  new york  ny  artificial intelligence     ijilt          bostrom  n  and yudkowsky  e           the ethics of artificial intelligence   in frankish  k  and ramsey  w   eds   the cambridge handbook of artificial intelligence  cambridge university press  cambridge  pp           burton  l           the practices of mathematicians  what do they tell us about coming to know mathematics    educational studies in mathematics  vol      pp           cellan jones  r           stephen hawking warns artificial intelligence could end mankind   british broadcasting corporation  december    available at  www bbc com news  technology           accessed february            dorca  f           implementation and use of simulated students for test and validation of new adaptive educational systems  a practical insight   international journal of artificial intelligence in education  vol      pp           duncan  j  and lockwood  m          learning through play  a work based approach for the early years  continuum international publishing group  new york  ny  egan  k          the educated mind  how cognitive tools shape our understanding  university of chicago press  chicago  il  egan  k          getting it wrong from the beginning  our progressive inheritance from herbert spencer  john dewey  and jean piaget  yale university press  new haven  ct  ferenstein  g           study  massive online courses enroll an average of        students      completion   tech crunch  available at  http   techcrunch com            study massive  online courses enroll an average of       students    completion   accessed february            fernandez armesto  f          truth  a history and a guide for the perplexed  bartam  london  gadanidis  g           young children  mathematics and coding  a low floor  high ceiling  wide walls learning environment   in polly  d   ed    cases on technology integration in mathematics education  igi global  hershey  pa  pp           gadanidis  g           coding as a trojan horse for mathematics education reform   journal of computers in mathematics and science teaching  vol     no     pp           gadanidis  g   hughes  j   minniti  l  and white  b   in press    computational thinking  grade   students and the binomial theorem   digital experience in mathematics education  gilbert  s b   blessing  s b  and guo  e           authoring effective embedded tutors  an overview of the extensible problem specific tutor  xpst  system   international journal of artificial intelligence in education  vol      pp           ginsburg  h p           mathematical play and playful mathematics  a guide for early education   in golinkoff  r m   hirsh pasek  k  and singer  d   eds   play   learning  oxford university press  new york  ny  pp           hawking  s           transcendence looks at the implications of artificial intelligence   but are we taking ai seriously enough    independent  may    available at  www independent co uk news  science stephen hawking transcendence looks at the implications of artificial intelligence but  are we taking         html  accessed february            kitchener post          google opens its doors on breithaurt  pm trudeau takes part   available at  www kitchenerpost ca news story         google opens its doors on breithaupt pm trudeau  takes part   accessed june            latour  b          reassembling the social  an introduction to actor network theory  oxford university press  oxford  levy  p          tecnologias da intelige ncia  o futuro do pensamento na era da informa tica  technologies of intelligence  the future of thinking in the informatics era   editora     rio de janeiro  levy  p          becoming virtual  reality in the digital age  plenum press  new york  ny  papert  s          mindstorms  children  computers  and powerful ideas  basic books  new york  ny  papert  s          the children s machine  rethinking school in the age of the computer  basic books  new york  ny  perry  b  and dockett  s           young children s access to powerful mathematical ideas   in english  l d   ed    handbook of international research in mathematics education  directions for the   st century  lawrence erlbaum associates  mahwah  nj  pp          saitta  l  and zucker  j d          abstraction in artificial intelligence and complex systems  springer  new york  ny  schmittau  j           the development of algebraic thinking   a vygotskian perspective   zdm  vol     no     pp         schoenfeld  a h           what s all the fuss about metacognition    in schoenfeld  a h   ed    cognitive science and mathematics education  lawrence erlbaum associates  hillsdale  nj  pp           tegos  s   demetriadis  s  and tsiatsos  t           a configurable conversational agent to trigger students  productive dialogue  a pilot study in the call domain   international journal of artificial intelligence in education  vol      pp         thumlert  j   de castell  s  and jenson  j           short cuts and extended techniques  rethinking relations between technology and educational theory   educational philosophy and theory  vol     no     pp           top misconceptions of autonomous cars and self driving vehicles          in driverless car market watch   available at  www driverless future com  page id      accessed february            vygotsky  l s          mind in society  harvard university press  cambridge  ma  wing  j           research notebook  computational thinking   what and why    the link magazine  spring  carnegie mellon university  pittsburgh  pa  available at  http   link cs cmu edu  article php a     wing  j m           computational thinking   communications of the acm  vol     no     pp         wing  j m           computational thinking and thinking about computing   philosophical transactions of the royal society a  vol      no        pp             yadav  a   mayfield  c   zhou  n   hambrusch  s  and korb  j t           computational thinking in elementary and secondary teacher education   acm transactions on computing education  vol     no     pp           corresponding author george gadanidis can be contacted at  ggadanid uwo ca artificial intelligence     for instructions on how to order reprints of this article  please visit our website  www emeraldgrouppublishing com licensing reprints htm or contact us for further details  permissions emeraldinsight com 
comprehensive articles bringing computational thinking to k     what is involved and what is the role of the computer science education community  by valerie barr and chris stephenson the process of increasing student exposure to computational thinking in k    is complex  requiring systemic change  teacher engagement  and development of significant resources  collaboration with the computer science education community is vital to this effort     acm inroads      march   vol      no    comprehensive articles     introduction when jeanette wing      launched a discussion regarding the role of  computational thinking  across all disciplines  she ignited a profound engagement with the core questions of what computer science is and what it might contribute to solving problems across the spectrum of human inquiry  wing argued that advances in computing allow researchers across all disciplines to envision new problem solving strategies and to test new solutions in both the virtual and real world  computing has made possible profound leaps of innovation and imagination as it facilitates our efforts to solve pressing problems  for example  the prevention or cure of dis  eases  the elimination of world hunger   and expands our under  standing of ourselves as biological systems and of our relationship to the world around us  these advances  in turn  drive the need for educated individuals who can bring the power of computing  supported problem solving to an expanded field of endeavors  it is no longer sufficient to wait until students are in college to introduce these concepts  all of today s students will go on to live a life heavily influenced by computing  and many will work in fields that involve or are influenced by computing  they must be  gin to work with algorithmic problem solving and computational methods and tools in k     the successful embedding of com  putational thinking concepts into the k    curriculum requires efforts in two directions  educational policy must be changed  overcoming significant infrastructure hurdles  and k    teachers need resources  starting with a cogent definition and relevant age  appropriate examples  in this paper we report on the first part of a multiphase project aimed at developing an operational definition of computational thinking for k    along with suitable resources for policy and curricular change  in addition to explaining the is  sues involved in the k    arena  this paper  following gal ezer and stephenson      is intended to help bridge the gap between the k    and cs education communities  we note that this effort is distinct from cs education efforts  such as that of zendler and spannagel       in that our goal is to articulate a set of key con  cepts within computation that can be applied across disciplines  rather than proposing a set of central concepts of computer sci  ence solely for cs curricula  the computer science education community can play an impor  tant role in highlighting algorithmic problem solving practices and applications of computing across disciplines  and help integrate the application of computational methods and tools across diverse areas of learning  at the same time  cs educators must understand the complexities of the k    educational setting  incorporating that knowledge into outreach activities and support for k    changes  developing a definition of  or approach to  computational think  ing that is suitable for k    is especially challenging in light of the fact that there is  yet  no widely agreed upon definition of compu  tational thinking  certainly  k    students already learn how to think and to problem solve  but computer scientists can help teach  ers understand these processes as algorithmic  and identify where actual computation and manipulation of data with a computer may fit in  many disciplines require  promote  and teach problem solv  ing skills  logical thinking  or algorithmic thinking  computer sci  entists can promote understanding of how to bring computational processes to bear on problems in other fields and on problems that lie at the intersection of disciplines  for example  bioinformatics and computational biology are different  but both benefit from the combination of biology and computer science  the former involves collecting and analyzing biological information  the latter involves simulating biological systems and processes  presenting both bio  informatics and computational biology in algorithmic form helps scientists exchange information          multiple definitions of computer science and computational thinking questions of the nature and educational value of computer science are as old as the discipline itself  in       abelson and sussman argued that computer science is  a discipline of constructing ap  propriate descriptive languages       denning      however  posited that computer science consists of mechanics  computation  com  munication  coordination  automation  and recollection   design principles  simplicity  performance  reliability  evolvability  and se  curity  and practices  programming  engineering systems  model  ing and validation  innovating  and applying   the acm model curriculum for k    computer science      provides a defini  tion of computer science specifically for k    educators  computer science  it argues  is neither programming nor computer literacy  rather  it is  the study of computers and algorithmic processes in  cluding their principles  their hardware and software design  their applications  and their impact on society   pg     computer science therefore includes  i programming  i hardware design  i networks  i graphics  i databases and information retrieval  i computer security  i software design  i programming languages and paradigms  i logic  i translation between levels of abstraction  i artificial intelligence  i the limits of computations  what computers cannot do   i applications in information technology and information systems  and i social issues  internet security  privacy  intellectual property  etc    more recently  felleisen and krishnamurthy     have argued that  imaginative programming  is the most crucial element of computing because it closely aligns mathematics with computing and in this way brings mathematics to life  in framing the conceptual and educational importance of com  putational thinking  as distinct from computer science  wing      suggested that computational thinking includes seeking algorithmic      march   vol      no    acm inroads    comprehensive articles bringing computational thinking to k    continued approaches to problem domains  a readiness to move between dif  fering levels of abstraction and representation  familiarity with de  composition  separation of concerns  and modularity  more recently  isbell et al      have argued for  computationalist thinking   a focus on providing services  interfaces  and behaviors that involves a more central role for modeling as a means of formulating relationships and identifying relevant agencies that are sources of change  as the international working group on computational thinking     pointed out  however  computational thinking  shares elements with various other types of thinking such as algorith  mic thinking  engineering thinking  and mathematical thinking   perkovic et al       similarly focus on the intellectual skills neces  sary to  apply computational techniques or computer applications to     problems and projects  in any discipline  hemmendinger     notes that we must be aware of the risks of arrogance and over  reaching when discussing the role of computational thinking  es  pecially across disciplines  he argues that the elements of compu  tational thinking that computer scientists tend to claim for their own  constructing models  finding and correcting errors  creating representations  and analyzing  are shared across many disciplines and that the appearance of grand territorial claims risks provoking i what would computational thinking look like in the classroom  i what are the skills that students would demonstrate  i what would a teacher need in order to put computational thinking into practice  i what are teachers already doing that could be modified and extended  to be useful  a definition must ultimately be coupled with ex  amples that demonstrate how computational thinking can be in  corporated in the classroom  research regarding the implementa  tion of computational thinking skills in informal education also provides valuable insights  the international working group on computational thinking      for example  points to several suc  cessful projects that use simulation and modeling  robotics  and computer game design to teach abstraction  automation  and analy  sis  as they note  these kinds of activities also involve an iterative design  refinement  and reflection process that resnick     argues is central to creative as well as computational thinking  in the summer of       the computer science teachers as  sociation  csta  and the international society for technology in education  iste  began a multi  phase project aimed at develop  ing an operational definition of computational thinking for k     these two organizations  see appendix a for more informa  tion about csta and iste  are particularly suited for this under  taking because of their extensive involvement in k    and their ex  pertise in developing educational standards  curriculum materials  and professional development for educators  this project would bring together computational think  ing and k    curriculum thought leaders committed to focusing on definitions and implementation of computational thinking in the context of real k    curriculum outcomes  standards  and arti  facts  the project began with the selection of a small steering com  mittee that met to  i identify criteria for and names of potential invitees for a thought leaders meeting  and i develop an agenda for a two day thought leaders meeting designed to create a framework lexicon to better facilitate discussions of key elements of computational thinking across diverse disciplines  the steering committee identified a group of educators and ad  ministrators who i had interest in computational thinking for k    or expertise in curriculum development and implementation i would provide representation from a broad spectrum of backgrounds and perspectives  higher education faculty and researchers  k    professional associations  school based leaders  teachers  the corporate community   i had experience with or demonstrated interest in k    issues  and to be useful  a definition must ultimately be coupled with examples that demonstrate how computational thinking can be incorporated in the classroom  adverse reactions  hemmendinger concludes that the ultimate goal should not be to teach everyone to think like a computer scientist  but rather to teach them to apply these common elements to solve problems and discover new questions that can be explored within and across all disciplines      creating a definition for computational thinking in k    k    education today is a highly complex  highly politicized en  vironment where multiple competing priorities  ideologies  peda  gogies  and ontologies all vie for dominance  it is simultaneously subject to wildly diverse expectations  intense scrutiny  and di  minishing resources  any effort to achieve systemic change in this environment requires a deep understanding of the realities of the system  passionate debate about the nature of computer science or computational thinking may provide intellectual stimulation for those in the computing fields  however  embedding computational thinking in k    requires a practical approach  grounded in an op  erational definition  it requires that we begin with a set of ques  tions focused specifically on k    implementation     acm inroads      march   vol      no    comprehensive articles i demonstrated leadership  particularly in stem discipline areas  the steering committee eventu  ally selected    thought leaders and charged them with developing a shared vision and set of strategies for embed  ding computational thinking across the k    curriculum  most especially in the stem subject areas  the purpose of the meeting  held over two days in april       was not to craft a formal or defin  itive definition of computational think  ing to be debated by academics  rather  the goal of the meeting was to reach a consensus of what computational think  ing means in k     as well as explain the particularities of k    education to the cs education representatives  spe  cifically  for any k    collaboration to be successful  college faculty must un  derstand the complexities of teaching in and making changes in the k    setting  the computer scientists participating  in particular  noted that educational change was considerably more complex than they suspected and that working with educators from multiple diverse disciplines meant learning to  disconnect computational thinking from computer science       ways of envisioning computational thinking in k    classroom the participants identified many ideas about what computational thinking is and what it could be in k    classrooms  when chal  lenged with the task of describing what makes computational thinking distinct from other kinds of thinking  participants tended to focus on the centrality of the computer and a set of concepts encompassed by computational thinking and doing  ct is an approach to solving problems in a way that can be implemented with a computer  students become not merely tool users but tool builders  they use a set of concepts  such as ab  straction  recursion  and iteration  to process and analyze data  and to create real and virtual artifacts  ct is a problem solving methodology that can be automated and transferred and applied across subjects  they also considered the generation of computational thinking from  and its potential use in  a wide variety of disciplines  the power of computational thinking is that it applies to every other type of reasoning  it enables all kinds of things to get done  quantum physics  advanced biology  human computer systems  de  velopment of useful computational tools  the participants envisioned computational thinking manifesting in the classroom through active problem solving  they saw students   engaged in using tools to solve problems    comfort  able with trial and error   and working in  an atmosphere of figuring things out to  gether   they also saw students using key concepts  so that  you will hear them talk about sequences  inputs  outputs  saved value  how complex the solution is   the meeting participants also predicted that students whose learning abounded with opportunities for  computational do  ing  would evidence a more fluid kind of problem solving  these students would understand that  problems can be solved in multiple ways   have  a tolerance for ambiguity and flexibility  and have  rea  sonable expectations about the prospect of producing a working solution   one structured model that emerged focused on identifying core computa  tional thinking concepts and capabili  ties and providing examples of how they might be embedded in activities across multiple disciplines  table   shows the results of these efforts  participants also discussed the core concepts in the context of capabilities  dispositions and pre dispositions  and classroom cul  ture  in many ways the capabilities category is a reiteration of the core concepts  focused on what students would actually do  these capabilities include  i design solutions to problems  using abstraction  automation  creating algorithms  data collection and analysis   i implement designs  programming as appropriate   i test and debug  i model  run simulations  do systems analysis  i reflect on practice and communicating  i use the vocabulary  i recognize abstractions and move between levels of abstractions  i innovation  exploration  and creativity across disciplines  i group problem solving  and i employ diverse learning strategies  the dispositions and pre dispositions category arose from an attempt to capture the  areas of values  motivations  feelings  stereotypes and attitudes  applicable to computational thinking  these included  i confidence in dealing with complexity  i persistence in working with difficult problems  i the ability to handle ambiguity  i the ability to deal with open ended problems  i setting aside differences to work with others to achieve a common goal or solution  and i knowing one s strengths and weaknesses when working with others  the meeting participants also predicted that students whose learning abounded with opportunities for  computational doing  would evidence a more fluid kind of problem solving       march   vol      no    acm inroads    comprehensive articles bringing computational thinking to k    continued table    core computational thinking concepts and capabilities ct concept  capability data collection data analysis data representation problem decomposition abstraction algorithms   procedures automation parallelization simulation cs find a data source for a problem area write a program to do basic statistical calculations on a set of data use data structures such as array  linked list  stack  queue  graph  hash table  etc  define objects and methods  define main and functions use procedures to encapsulate a set of often repeated commands that perform a function  use conditionals  loops  recursion  etc  study classic algorithms  implement an algorithm for a problem area threading  pipelining  dividing up data or task in such a way to be processed in parallel algorithm animation  parameter sweeping math find a data source for a problem area  for example  flipping coins or throwing dice count occurrences of flips  dice throws and analyzing results use histogram  pie chart  bar chart to represent data  use sets  lists  graphs  etc  to contain data apply order of operations in an expression use variables in algebra  identify essential facts in a word problem  study functions in algebra compared to functions in programming  use iteration to solve word problems do long division  factoring  do carries in addition or subtraction use tools such as  geometer sketch pad  star logo  python code snippets solve linear systems  do matrix multiplication graph a function in a cartesian plane and modify values of the variables science collect data from an experiment analyze data from an experiment summarize data from an experiment do a species classification build a model of a physical entity do an experimental procedure use probeware simultaneously run experiments with different parameters simulate movement of the solar system social studies study battle statistics or population data identify trends in data from statistics summarize and represent trends summarize facts  deduce conclusions from facts language arts do linguistic analysis of sentences identify patterns for different sentence types represent patterns of different sentence types write an outline use of simile and metaphor  write a story with branches write instructions use a spell checker do a re enactment from a story use excel play age of empires  oregon trail in attempting to define a classroom culture that would be most conducive to computational thinking  the participants identified strategies or characteristics that could be considered broadly beneficial to any learning experience  these included  i team work by students  with explicit use of    decomposition   breaking problems down into smaller parts that may be more easily solved    abstraction   simplifying from the concrete to the general as solutions are developed    negotiation   groups within the team working together to merge parts of the solution into the whole  and   consensus building   working to build group solidarity behind one idea or solution  i i increased use by both teachers and students of computational vocabulary where appropriate to describe problems and solutions  acceptance by both teachers and students of failed solution attempts  recognizing that early failure can often put you on the path to a successful outcome     acm inroads      march   vol      no    in order to articulate and expand on these two set of resources  the thought leaders identified several strategic areas that would have to be addressed in order to successfully embed computational thinking within k     for each strategic area  they developed a set of requirements and suggestions that would support that element of systemic and sustained change      policies  vision  and language educational policies that include computational thinking as a part of every student s education include the following activities  i present a single message at federal  state  and local levels about the importance of computational thinking in k    education  i encourage computer science professional organizations to advocate at the federal and state levels and work with groups that are active on state k    standards  i incorporate computational thinking throughout the entire k    experience with outcomes that demonstrate incremental steps  i attach computational thinking  where possible  to existing policies  for example  it could be included as an explicit outcome of state level technology tests  i include in all teacher pre service preparation programs a class on computational thinking across disciplines  a shared vision and common language include the following activities  inspiring and preparing teachers to change include the follow  ing activities  i foster professional development since it is critical to successful educational change  cs faculty can help by providing summer institutes  demonstrating the role of computational thinking in non cs disciplines and providing relevant curricular materials  i encourage school administrators to provide incentives for k    teachers to change courses and curricula  the nsf ret grants awarded to cpath grantees are one model that provides incentives for k    teachers to adopt curricular or pedagogic changes that have been piloted at the college level  i provide teachers with resources to support change  including curricular materials  models and simulations  model activities  and web sites for independent student activities  i provide teachers with professional development and support in the form of learning communities  summer institutes  peer learning offered by teachers with computational thinking experience  exposure to industry applications where ct skills are utilized  and help identifying where computational thinking is already included in teaching  i make available to school districts open source tools  blogs  wikis  forums  and web based social networks and content delivery systems for use by teachers and students  vetted so that districts are not likely to block them   i encourage current professional education associations to show how computational thinking fits into their current standards work  comprehensive articles while further detail and synthesis work is clearly required  and planned for in the next phase of the project  these models provide a way to begin embedding computational thinking within k    formal education  this counters the potential claim that computa  tional thinking can only be addressed in informal education expe  riences where discipline based learning and classroom constraints are not major encumbrances  however  there are still considerable barriers that must be considered in any attempt at systemic and sustained change      strategies for achieving systematic change the kind of systemic and sustained educational change proposed necessitates two sets of resources  resources are needed to help i improve the relationships and communication between k    educators  faculty and administrators   college cs faculty  computer science professionals  and others in industry  i develop a clear statement of computational thinking as a core competency in k     i demystify terminology about computational thinking  give clear examples of ways it applies to and can be integrated into a range of curricular areas      inspiration and leadership an activity for school and district level leadership inspiring change is to provide materials that will help school administrators under  stand computational thinking and see why associated knowledge and skills are important for today s students  the larger cs com  munity can help by providing suitable materials and taking advan  tage of opportunities to work with k    administrators  inform educational policy makers about the nature and importance of computational thinking  its con  nections to learning goals that may have already been set for students  for example national and state standards   and ways it can best be integrated within the larger framework for student learning and suc  cess  teachers also need resources that demonstrate how to most appropriately and effectively integrate these new concepts  first into their own sphere of content and pedagogical knowledge  and then into their classroom content and practice  the larger cs community can help by providing suitable materials and taking advantage of opportunities to work with k    administrators       march   vol      no    acm inroads    comprehensive articles bringing computational thinking to k    continued i ask professional education associations to include a focus on computational thinking in their conferences  workshops  and professional development events  these represent strategic areas that would support the long  term goal of embedding computational thinking in k     they clearly demonstrate the myriad issues and obstacles involved when trying to achieve educational change in k     they also illustrate the critical importance of engaging knowledgeable k    educators in projects that purport to improve student learning  and the extent to which a successful effort will require the expertise  resources  and dedication of educators and policy makers at all educational levels      next step the next phase of this project will involve a practitioners workshop that will begin to develop the resources and strategies identified in the thought leaders meeting  the challenge will be to determine the best possible artifacts to promote the implementation of compu  tational thinking concepts in k     we expect that the practitioners workshop will therefore include development of various resource sets  for example  a framework might be developed to guide high  level policy work  e g school  district  state   a second resource might consist of exemplars or activities for classroom teachers  while the precise set of resources and their content have not yet been deter  mined  it is clear that the practitioners workshop will be focused on formulating new materials both for implementing ct concepts into the curriculum and for advocating for computational thinking as a key educational component for all students  given efforts already under way at the college level  including the development of new curricula and resources  we expect the computer science education community will have much to contribute to this effort  ir csta is a membership organization of more than      computing educators at the k    and post secondary level  its mission is to support and promote the teaching of computer science and other computing disciplines at the k    level by providing opportuni  ties for teachers and students to understand better the computing disciplines and to prepare themselves more successfully to teach and to learn  since its inception five years ago  csta has become the primary voice for k    computer science education  advocating for the importance of computer science as part of the educational canon and its centrality to all of the stem  science  technology  engineer  ing  mathematics  disciplines  through its development and publication of the acm model curriculum for k    computer science and supporting curriculum implementation documents  csta has provided the de facto national standards for computer science in k     csta also conducts groundbreaking research and has published several germinal white papers on key computer science education issues  it provides multiple levels of professional development  through workshops and annual conferences  that have helped educators improve theiir technical knowledge and pedagogical skills  references     abelson  h  and sussman g  structure and interpretation of computer programs  mit press  cambridge  ma            denning  p  great principles of computing  communications of the acm                     felleisen  m and krishnamurthi s  viewpoint   why computer science doesn t matter  com  munications of the acm                 gal ezer  j  and stephenson  c  computer science teacher preparation is critical  acm inroads                   hey  t   tansley  s  and k  tolle   jim gray on escience  a transformed scientific method  in the fourth paradigm  data intensive scientific discovery  microsoft research  redmond wa            hemmendinger  d  a plea for modesty  acm inroads                isbell c   stein a   cutler r   forber j   fraser l   impagliazzo j   proulx v   russ s   thomas r   xu y   re defining computing curricula by  re defining computing  acm sigcse bulletin                      iwg        may  computational thinking for youth  education development center  inc   newton  ma     resnick  m  all i really need to know  about creative thinking  i learned  by studying how chil  dren learn  in kindergarten   acm      creativity and cognition conference  washington  dc       perkovic l   settle a   hwang s  and jones  j  a framework for computational thinking across the curriculum  proceedings of the      conference on innovation and technology in computer science education                      tucker  a   mccowan d   deek f   stephenson c   jones j  and verno a  a model curriculum for k    computer science  report of the acm k    task force computer science curriculum committee  association for computing machinery  new york  ny             wing  j m  computational thinking  communications of the acm                     zendler  a  and spannagel  c  empirical foundation of central concepts for computer sci  ence education  acm journal on educational resources in computing        valerie barr computer science department  union college     union street  schenectady  ny       barrv union edu chris stephenson computer science teachers association   penn plaza  suite      new york  ny             cstephenson csta acm org categories and subject descriptors  k      computers and education   computer and information science education   computer science education  curriculum  general terms  human factors keywords  computational thinking  k    curriculum  k    cs education  cross disciplinary computing doi                                 acm                          appendix a ste is recognized for its leadership to improve learning and teaching through effective integration of technology across the curriculum and throughout the education enterprise  iste s commitment to educational transformation is best represented by its work to develop the national educational technology standards  nets  for students  teachers  and administrators  by convening k    educators  teacher educators  curriculum and education associations  government  business  and private foundations  iste built consensus for the framework and momentum for using the standards  iste is a also a leader in convening educators and school leaders  best illustrated by its annual conference which showcases emerging technology and innovative and effective use of technology in the k    classroom     acm inroads      march   vol      no    note  this project is supported by the national science foundation under grant nos          and         
computers in human behavior xxx  xxxx  xxxx contents lists available at sciencedirect computers in human behavior journal homepage  www elsevier com locate comphumbeh full length article can computational thinking be improved by using a methodology based on metaphors and scratch to teach computer programming to children  diana pe rez mari na    raquel hijo n neiraa  adria n baceloa  celeste pizarrob a rey juan carlos university  computer science department  mo stoles  madrid  spain b rey juan carlos university  applied mathematics department  mo stoles  madrid  spain article info keywords  computational thinking primary education programming methodology metaphor    introduction computational thinking  ct  can be defined as the skill of solving problems  designing systems  and understanding human behavior based on computer science concepts  wing         ct is a key skill for chil  dren in the   st century  wing         however  it is unclear how ct can be developed in the most effective way in children  currently  different pedagogical methodologies that can be used to develop ct are being researched  in the last years  some authors have claimed that ct can be acquired and developed by teaching programming to children  in addition  it has been claimed that this should be done as early as possible  heintz  mannila    fa rnqvist        kazakoff  sullivan    bers        mccartney        mccartney   tenenberg        papadakis  kalogiannakis    zaranis        strawhacker  portelance  lee    bers         it is possible that ct can be acquired by other means such as educational robotics  bers et al          storytelling  lee et al          unplugged activities  brackmann  barone  casali  boucinha    mun oz  herna ndez         scratch jr  papadakis et al         or even in ethics lessons  seoane pardo         although this paper focuses on pro  gramming to foster ct  learning how to program is worthwhile not only for that reason  but also because of the real need for programmers in   corresponding author  e mail address  diana perez urjc es  d  pe rez mari n   https   doi org         j chb             abstract computational thinking  ct  is a key skill in the   st century  however  it is not clear which is the most effective way to acquire and improve ct  big research efforts are made to determine which pedagogical means should be used  one research trend is based on the idea that teaching programming since primary education suffices to improve ct  in our previous work  we proposed and validated a methodology based on metaphors and used of scratch  mecoprog  to teach basic programming concepts to children  it is our hypothesis h that by applying mecoprog  students will develop their ct  to check h  we carried out an experiment with     primary education students       years in age   at the beginning of the experiment  all students were asked to fill in a programming concepts test and two tests to measure their ct  during the sessions  all students were taught according to mecoprog  finally  they took the three tests again  a significant increase in the results on all the tests has been measured  supporting the use of metaphors and scratch to teach computer programming concepts to primary education students to develop their ct  our digital society  margulieux  catrambone    guzdial         as well as other advantages such as the improvement of higher cognitive skills  pea   kurland         many countries implemented computer science as a subject in primary education to train students into creators of computer programs  heintz et al          a common approach to teaching computer sci  ence to children is scratch  defined as an authoring environment   de  veloped by the lifelong kindergarten research group at the mit media lab   to design interactive media by snapping together programming  instruction blocks  resnick et al         ouahbi  kaddari  darhmaoui  elachqar    lahmine         other approaches focus on using makey makey  where students can interact with the computer by means of fruits or play doh rather than using the traditional mouse  lee  kafai  vasudevan    davis         using lego wedo or mindstorms ev  ro  bots  sovic   jagus t    sers ic          and  producing  making games  campe   denner         another possibility is to follow unplugged approaches using storytelling or free exercises from code org  this is particularly useful in countries with limited resources  but also in de  veloped countries  where computer science is considered interesting  but there is a lack of trained teachers and or resources  brackmann et al          the results of these approaches have not yet been properly eval  uated  and their effectiveness is still unclear  kaleliog lu         received    december       received in revised form   august       accepted    december                        elsevier ltd  all rights reserved  please cite this article as  diana pe rez mari n  et al   computers in human behavior  https   doi org         j chb             d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx moreover  no methodology or particular resources have been identified as the most adequate to teach programming to children  there are difficulties in teaching children even basic concepts such as program construction  lahtinen  ala mutka    ja rvinen         loops  ginat         structures control  and algorithms  seppa la   malmi    korhonen         these difficulties arise because of poor teacher training or a lack of a proper teaching methodology  barker  mcdowell    kalahar        coull   duncan         it has become evident that teachers need guidance to approach this task adequately  brackmann et al         jovanov  stankov  mihova  ristov    gusev        yadav  gretter  hambrusch    sands         in our previous work  we proposed and validated the use of meta  phors to introduce children to basic concepts of programming according to the methodology mecoprog  pe rez mari n et al          for in  stance  we proposed using the metaphors of a thermomix  recipe as a program  and sequence   pantry as memory  and boxes as variables  we also illustrated the possibility of applying these metaphors to any re  source available to the teacher  such as scratch  the reason for using metaphors is the widely reported usefulness of metaphors as powerful educational tools  metaphors focus on concepts and facilitate students  organization of ideas and clearer  more straightforward thinking  rodri guez die guez         using metaphors does not require special equipment and helps teachers turn abstract concepts into simple ideas and images  students need clear and careful  well focused thinking to correctly write computer programs  heintz et al          this research paper asks the following question  can computational thinking be improved by using a methodology based on metaphors and scratch to teach computer programming to children  it is our hypoth  esis  h  that the answer is yes  for this study  we asked     primary education students  aged   to     to follow mecoprog for six weeks  there were two objectives     to teach students the basic concepts of computer science programming  and     to develop students  ct by teaching them those concepts using metaphors and scratch  the results derived from this study show that using metaphors and scratch can significantly develop students  ct  but also that students are able to learn basic programming concepts  the paper is organised as follows  section   reviews background literature on computational thinking and teaching programming in primary education  section   outlines the materials and methods of the experiment carried out so that this study can be reproduced elsewhere  section   presents the results of the experiment  and section    sum  marises the main conclusions and suggests future lines of work     background computational thinking  ct  is not a new term  it dates back to     s  when it was referred to as  algorithmic thinking   it was defined as a way to use algorithms to produce appropriate output to a given input  denning         in       wing relaunched interest in the topic and defined ct as follows   it involves solving problems  designing systems  and understanding human behavior  by drawing on the con  cepts fundamental to computer science   wing         given the gen  eric nature of that definition  there has recently been several un  successful attempts to make it more specific  aho        brennan   resnick        csta   iste        google for education        wing         according to grover and pea         ct includes decomposition  pattern generalisations and location  abstraction and algorithms among other computer science resources such as debugging and systematic error detection  iterative  parallel and recursive thinking  control flow and use of symbols  brennan  balch  and chung        also explored ct in terms of programming  more specifically using scratch based on a   d ct clas  sification into concepts  practices  and computational perspectives  brennan   resnick         see table    table   summary table of the   d ct dimensions model  source  brennan   resnick             concepts    sequences   loops   parallelism   events   conditionals   operators   data   practices    incremental   iterative development   test   debugging   mix   reuse   abstract   encapsulate   perspectives    to express   to connect   to question the goal is not to replace creative and critical thinking or other competences  but to add the skill of using computers and algorithms to solve problems  cuny  snyder    wing        wing        csta   iste        furber        espino  soledad    gonza lez         many governments emphasise the need for children to be fluent in the digital language rather than making them mere users of computer software  garci a pen alvo         there are already certain resources available in the specialised literature for this  balanskat   engelhardt        wing         learning how to program can induce changes in the way that people think  papert        resnick         this is likely because of the ana  lytical component of ct  which is quite similar to mathematical thinking  i e  problem solving   engineering thinking  design and eva  luation of processes  and scientific thinking  systematic analysis   ct can be useful not only for students or professionals of computer science  but for any other person  wing         starting ct training as early as possible is of particular interest  and it has been shown that children aged as young as four can understand programming concepts and even build simple robots which can move and interact with the environment  bers  ponte  juelich  viera    schenker        bers et al          this is why teaching computer science programming has been in  cluded in the primary education curricular in many countries  heintz et al         see table     a commonly used approach to teach com  puter science to children is using scratch  resnick et al          while interacting with scratch  students learn basic concepts such as se  quences  loops  parallelism  events  conditionals  operators and data  brennan   resnick        ouahbi et al          other approaches include making an own program  campe   denner         using lego wedo or mindstorms ev  robots  sovic  et al          with regard to unplugged approaches  these are common in countries with limited resources  but also in developed countries  which consider computer science an interesting option but lack trained teachers and or internet connections  brackmann et al          in unplugged approaches  the concepts of computer science are transmitted through storytelling or free exercises available on code org  it bears mentioning here that there is no established method to evaluate the effectiveness of these approaches  therefore  their validity is still unclear  kaleliog lu         a previous study by pe rez mari n et al         contributed to the debate by introducing metaphors as an alternative approach to teaching programming  metaphorical language is employed in real  everyday life  and is considered a crucial component of thinking  lakoff   johnson         in particular  conceptual metaphors  i e   cognitive mechanisms that project from a source domain to a target domain in order to facilitate understanding of a concept in the target domain  are of great interest in educational environments  sanford  tietz  farooq  guyer    shapiro         metaphors have been used to teach biology  paris   glynn         chemistry  thomas   mcrobbie         and mathematics  boero  bazzini    garuti         the use of metaphors to teach computer science is common at college level and has been the subject of research interest  putnam  sleeman  baxter    kuspa        sanford et al   d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx table   interest in teaching programming  based on heinz  mannila   fa rnqvist  et al          country australia england estonia finland new zealand norway sweden south korea finland usa macedonia content form own subject and integrated replaces existing subject integrated integrated primary compulsory compulsory compulsory compulsory compulsory compulsory compulsory compulsory secondary compulsory compulsory opcional opcional opcional opcional compulsory opcional digital technologies computing programming programming programming programming programming informatics computer science computer science computers and basics of programing own subject own subject integrated own subject own subject own subject own subject and computer science and digital competence        there are studies on specific metaphors  such as the locker memory to teach dynamic memory  jime nez peris  pareja flores  patin o marti nez    vela zquez iturbide         or matrixes for event  handling in java  milner         however  the use of metaphorical language as a tool to teach basic concepts of computer science for primary education  and the minimum age at which it can be used  have not yet been researched in detail  therefore  we proposed and validated a methodology called mecoprog  see description in section    to teach programming to primary education students  using metaphors  the purpose of the experiment described in this paper is to analyse whether mecoprog has an impact on the students  programming knowledge and whether it can improve computational thinking in students     method      participants     spanish primary education students        male and       femal  aged   to      recruited in two parts  were asked to take part in the experiment in order to assess whether their computational thinking  ct  improved after teaching programming using the mecoprog methodology based on metaphors  the reason for having two different parts is that programming is not compulsory in spanish schools  therefore  only a few students  usually in private schools  have the opportunity to attend programming lessons  we asked several private schools that offered programming to colla  borate in the study  one school agreed because their programming teacher was on sick leave and they required a skilled temporary teacher for  th   th and  th grades  we were given permission to teach using the mecoprog method during the six weeks the teacher needed to convalesce  in addition  and in order to provide other children with the op  portunity to attend programming classes and to ensure a more het  erogeneous sample  we offered other schools in madrid and the city council of fuenlabrada  where the authors live  a cost free program  ming camp to be held on three consecutive saturdays  which children aged    to    could attend  this camp also used the mecoprog methodology      of our participants attended private schools and the rest at  tended    different public schools and were recruited as they partici  pated in the programming camp  fig    shows the distribution of the students per grade  in spain   th grade corresponds to students aged        th grade corresponds to students aged        and  th grade corresponds to students aged               were  th grade students        were  th grade students  and       were  th grade students       design the research model followed a longitudinal pretest posttest quasi  experimental design  because the head master of the private school did fig     distribution of the participants in grades  not provide a control group and we could not randomly assign students to each group  similarly  we could not have a control group in the programming camp or randomly assign students to each group  because one of the city council s conditions to providing us with a class room was that all students must receive the same teaching  moreover  as rooms were only available from       a m  to      p m   we had to divide students  thus  students in the  th grade attended from       a m  to midday  whereas those in the  th grade attended from midday to      p m  it was not possible to recruit  th grade students from the city council  according to cook   campbell         we could measure the im  pact of our intervention using mecoprog by following the quasi ex  perimental design outlined below  no rewards were offered       materials        mecoprog our main resource was mecoprog  pe rez mari n et al          table   summarises the metaphors used in mecoprog grouped into three blocks      program  sequence  variable and input and output instructions      conditional instructions and     loops  the process for each block was     introduce the concept by using metaphors  and then      practice with scratch  see fig    for a global overview of mecoprog  block      h   first  the concept of programming was explained by using the thermomix   tx  cooking recipe metaphor  children were explained that   just likewhen they are following steps in a tx recipe   table   metaphors used in mecoprog for programming concepts  block concept   program  sequence  memory and variable input and output   conditional   loop metaphor thermomix   tx  recipe  pantry and box mouth and rectum  beginning and end of the digestive system  intelligent fridge hand mixer   d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx fig     overview of mecoprog blocks  up  first  concept  second  scratch  from left to right  sample script to work with input output  block     sample script to work with conditionals  block     sample script to work with loops  block     the computer is able to execute the instructions of a program one step at a time  no ambiguity is allowed as the computer does not understand instructions that are not precise  additionally  just as the goal of fol  lowing a recipe is to produce good food  a program always has a specific output  the first program that they are asked to execute in scratch is to say  hello    scratch s  say  and  ask  instructions help to teach basic input  output programming concepts  whenever students do not understand them  the metaphor of input as eating something with their mouth  and how their digestive system processes it until it passes through the rectum  output  is used  that way  students understand that you can enter data into the computer  input   execute a program and produce a result  output   the concept of sequence is also explained here  as the sentences in a tx recipe program must be executed one after another  students are also asked whether they think that a computer has a memory  surprisingly  not all students think they do  therefore  we help them understand the concept of computer memory by using the pantry me  taphor  the concept of data was explained by comparing the in  gredients they need to carry out a tx recipe with the data a computer needs to executes a program  moreover  the pantry metaphor can also be used to explain the concept of variables as a boxes metaphor  just like food is organised in the kitchen  eggs in their box  fruit in their fruit bowl  etc  so the computer organises data into boxes inside its memory as variables  to illustrate the concept  we created the scratch program shown in fig    left  block      h   an intelligent fridge was used as a metaphor to ex  plain conditionals  students were told that the fridge has a sensor to detect how many pieces of food it contains  for instance  we told children to imagine that they were in charge of serving dessert to their family at dinner  an intelligent fridge would know how many family members there are and thus how many pieces of fruit they would need  if they were four family members  they would need at least four pieces of fruit  if there were fewer than four pieces contained in the fridge  the intelligent fridge will connect to internet to buy more fruit  to illustrate the concept  we created the scratch program shown in fig    center  block      h   for loops  a hand mixer metaphor was used  just like a hand mixer repeats the same movement over and over again  a loop repeats the same command over and over again until a condition is fulfilled  students are told that the condition in the case of the hand mixer is to whip the eggs five times  to illustrate the concept  we cre  ated the scratch program shown in fig    right  following the  d ct model  see table    for concept dimensions the methodology covers sequences  loops  conditionals  operators and data  see table   left   mecoprog also covers the first three practices of the practices dimension  see table     all students were encouraged to revisit their programs and incrementally improve them as they learnt new concepts  all the examples involved testing and debugging when simple coding was reused and incorporated into more complex ones  see table   top right   in regard to the perspective dimension  the metaphor methodology also allows questioning  giving solutions to a proposed guided metho  dology  and expressing  giving solution to a problem using the com  puter   see table   right bottom   table   concepts  practices and perspectives covered by mecoprog  highlighted in underlined  in the  d ct model proposed by brennan and resnick          concepts    sequences   loops   parallelism   events   conditionals   operators   data   practices    incremental   iterative development   test   debugging   mix   reuse     abstract   encapsulate perspectives    to express   to connect   to question   d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx computational thinking  unplugged approaches use these types of ex  ercises to develop ct  brackmann et al          we debated whether to use pcnt exclusively for all students re  gardless of their age  however  we decided against that idea as romt is a validated test  and we wanted to ensure that the results provided by both tests could be correlated       procedure fig    shows the experimental procedure  at the start of the ex  periment  all students took three tests    students from  th to  th grades in spanish primary education  aged       attended classes that taught programming through the mecop  rog pedagogical method  certain students  who had chosen programming as one of their optional school subjects  attended as part of their schooling while the remaining students  who did not take programming as a subject  as it is not compulsory in spain   were grouped into a programming camp on saturdays  all of them used scratch  after   weeks   h per week in the private school and     h sessions in the camp  all students took those same three tests again  we had previously decided to use the same tests again to guarantee that the post tests had the same level of difficulty as the pre tests  in order to avoid student boredom of taking the same tests again  we waited a minimum of   weeks before asking them to take the post test  in addition  during the first test session we did not resolve any questions they had from taking the pre tests to avoid giving solutions to the post  test       measures the variables were the scores achieved by the students in the cont  romt and pcnt tests  specifically  the following    con  students  knowledge test  cont  score   rom  students  validated ct  romt  score   pcnt  students  new ctt test score  pcnt       data analysis a comparative study using non parametric tests to measure the hypothesis contrast between the pre post pcn  con and rom values was performed  non parametric tests were used because when the data gathered was analysed  we saw that they had not come from a normal distribution  and we did not have enough data to assume normality     findings      overall results table   shows the means  medians  more representative than the mean in asymmetric distribution   and standard deviation for pre test and post test of pcn  con and rom  without making distinctions per grade  table   reveals a clear in  crease in the post test results in the three variables  showing a greater improvement in con variable  and a smaller improvement in rom variable  standard deviation slightly increases in all the variables  ex  cept in pcn  where it is more reduced in the post test  fig    shows box plots for these three variables  both in the pre test and post test  graphically      of the central data are represented in during the experiment  cutting cross all three blocks  we occasion  ally used an application named compthink app in our sessions         developed ad hoc for the improvement of children s computational thinking  the app works with seven aspects  all focused on improving the students  computational thinking  see fig        loops  students select an element and set the number of times that the element will repeat the action  then  they can watch an ani  mation of the action being repeated the selected number of times    algorithms  students establish the order of a finite set of steps to carry out a certain activity  such as cooking a recipe  or planting a tree    patterns  students choose the different features of a face out of a variety of options to create a face  they choose between different types of hair  eyes or mouths  and the outcome is an animated gif with the selections they have made    conditionals  students drag and drop images according to the op  tions given in  if else  branches  for instance   if the weather is cold  scarfs  coat and boots   else  t shirts  bathing suit and shorts      steps  students select which part is missing from several possibilities in the picture  in fig     for example  cream and a cherry is needed to complete the cupcake    instructions  students find the final position on a map  divided in squares  after following a set of movement instructions    automats  students select the correct order to follow a path from one place to another with certain restrictions  compthink app  compthink app        is a drag and drop visual interface for android tablets or smartphones  table   shows the   d ct dimensions model  brennan   resnick         table   presents the concepts that each part of the app covers including those proposed by brennan and resnick  op  cit           tests three tests have been used to measure the impact of our interven  tion that used mecoprog to teach students programming concepts and skills and to improve their computational thinking  we used the cont  questionnaire to measure participants  knowl  edge of programming concepts  measures the con variable as ex  plained in section       cont tests the participants  knowledge of programming  sequence  memory   variables  input   output in  structions  conditionals  and loops  the question formats are as fol  lows   what do you think a program is  can you give an example    and seek to measure students  knowledge of those areas  two tests were used to measure computational thinking  the first test is called romt   measures the rom variable as explained in sec  tion       romt is a validated test with    items that measures the computational thinking of children aged over     roma n gonza lez  pe rez gonza lez    jime nez ferna ndez         fig    shows a sample question in romt  questions are based on scratch code blocks and cover certain ct areas  given that romt cannot evaluate computational thinking in children younger than     we also used a second validated test suitable for those students  however  as far as we know  no test has been vali  dated to measure ct in children younger than     therefore this study proposed using a new test to measure ct created for children of this age  it is called pcnt  and measures the pcn variable as explained in section      fig    shows an example pcnt question  pcnt has    exercises grouped into the categories outlined in section       for the compthink app         to cover the   d ct di  mensions model created by brennan and resnick        to assess   https   tinyurl com mecoprogct  in spanish     https   tinyurl com mecoprogtrg  in spanish     https   tinyurl com mecoprogctl  in spanish   romt  a validated test for children to measure computational   thinking  roma n gonza lez et al            cont  a concept test created ad hoc for the experiment  pcnt  a new test to measure ct based on the field s literature    d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx fig     compthink app         an example of the games for each of the seven options available  concept dimension covered of   d ct dimensions model by compthink app  table   compthink app loops algorithms pattern conditionals steps instructions automats brennan and resnick concept dimension on ct loops and data sequences sequences and data conditionals sequences and operators sequences sequences and conditionals the box  and the median are marked with a line as representative measure  the highest and lowest values for each box plot correspond to values which are not less than q       q  q   and not greater than q       q  q    some outliers are marked with the case number  after analysing the data using the shapiro wilk test  we found that the distribution of the variables under study did not come from a normal distribution  except in post con variable  p        and post rom  p           therefore  and without having a high enough number of population  nonparametric tests were chosen for the study to guarantee the robustness of the results  spearman s rank correlation coefficient shows a significant corre  lation  p          between pre and post tests in pcn  con and rom variables  the wilcoxon signed rank test is used to compare two related samples  in this case the pre and post tests  and evaluate whether there is any statistically significant difference in the pre and post tests in the three variables studied  table   shows a significant improvement for all tests  the rom p  value is much higher than the others  therefore  con variable is the most significant  consequently  we could conclude that the population saw a significant improvement in the tests  some additional information to size the effect is the r value  in  troduced by rosenthal in       pcn had a value of r        corre  sponding to a small effect  r        for con variable  corresponding to a large effect  and  finally  r        for rom variable  indicating a small effect       results per grades first  a descriptive analysis for each variable in the three grades is presented  tables      show the median  mean and standard deviation  fig     an example of a romt question   what instructions can you give pac  man to reach the ghost   choose from  a  b  c or d   con variable shows a large increase for all grades  in addition to increasing data dispersion  see table     in rom variable   th and  th show an increase for the median  as well as the standard deviation  box    d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx fig     example of a pcnt question   do you know what steps you need to take to plant a tree  place the following four actions into order     take a shovel     water the tree     plant the tree     dig a hole    fig     box plot for variables pcn  con and rom in pre and post test  again  spearman s rank correlation coefficient shows a significant correlation  p          between pre and post tests in pcn and con in all the grades  and in  th and  th grades in rom  the wilcoxon signed  rank test is used to compare two related samples  in this case pre and post test  and evaluate whether there is any statistically significant table   median  mean and standard deviation in pre  and post tests pcn  con and rom  pcn con rom table   comparative study using wilcoxon test  pcn con z               p value             rom              fig     flow diagram of the experiment  mdn m sd pre                post                mdn m                  sd mdn m sd                                         difference in pre  and post tests in the three variables studied for each grade  table    shows significant differences in different grades  there is a significant improvement in pcnt variable in  th  p           as well as romt variable  although with a higher p value  p           in the case of con variable  the improvement is significant in all grades  p           rosenthal r value quantifies the improvement where it happens  in  th grade  a large improvement  close to very large  is observed in con variable  r          in  th grade  there is a small increase  near to a plots confirm this statement  see table      pcn variable shows a large increase in  th grade  followed by  th grade  standard deviation is reduced  no improvement is observed for  th grade students  see table     box plots confirm this reasoning and show the existence of several outliers related to low marks for the three grades  especially in  th grade    d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx table   median  mean and standard deviation for pre test and post test for pcn  per grades  table    rosenthal r to quantify the improvement detected in the three tests  pcn  th mdn msd  th  th n dpcn  th       th          th      all         dcon drom                                   pre      post      table                       mdn m                     sd mdn                     msd                     is possible to teach children basic computer programming concepts such as memory  programming  conditionals or loops  and improve their ct  with children as young as nine  it is worth noting that although there is a general consensus re  garding the need to foster children s ct  roma n gonza lez         and the results reported in this study significantly contribute to the litera  ture in this sens  there is still much controversy surrounding the defi  nition of the term ct and how and when to integrate it into the cur  riculum  gouws  bradshaw    wentworth         since this study required a practical definition of what comprises ct in order to work with children and anaylse what parts of ct could be improved and how  we chose the  d ct model  brennan   resnick        see table     the reason for selecting that model was that it had been created by the authors of scratch  a program that allows children to program  as noted by vico         translated from spanish    a child who does not learn how to program will have the same handicap as a spanish child who is not able to understand english   this is also why we wanted to foster an interest in ct  so that children can become programmers  otherwise  it seems as though we have only taught our pre school children to read  but not how to write  however  some computer science educators have argued that pro  gramming is not necessary to teach computational thinking  lu   fletcher        yadav  zhou  mayfield  hambrusch    korb         some have even suggested that teaching programming to foster ct could deter students as some may find computer science and pro  gramming boring  lu   fletcher         in light of our results  and from our experience with children age   to     learning how to program is engaging and helps them focus on problems  all children payed attention during the lessons regardless of their grade  in general  it is well known that children love computers and do not think that they are difficult or boring to use  this could be used as a base to start working with children  who are naturally fasci  nated by technology  this study is particularly relevant for teachers and national curri  culums as it shows that children can enjoy learning about program  ming  until recently  it was unconceivable to think children could learn about programming  on the contrary  children were not taught these concepts until secondary school  or even university  at an age that students begin to find these complex ideas difficult to understand  in contrast to younger children  who can easily absorb them when adapted to their age  it has also become evident that teachers need guidance in their approach to this task  according to this study  students are able to learn programming concepts if they are taught with methodologies such as mecoprog with scratch and those that use metaphors  teachers must be trained in those methodologies if we want to reach primary median  mean and standard deviation for pre test and post test for con  per grades  con  th mdn msd  th  th pre      post      table                        mdn m                     sd mdn                     msd                     median  mean and standard deviation for pre test and post test for rom per grade  rom  th  th mdn m sd mdn m sd pre           post                                                   medium increase in pcn variable  r          a large increase occurs in the con variable  r         and a small increase in the rom variable  r          finally  in  th grade  a large effect is found  with r              synopsys table table    gathers the increase of the scores in the three tests taken by the students before and after mecoprog  finally  in response to our question regarding the relationship be  tween pcnt and romt  there is a low lineal correlation between them  spearman r         p             discussion this paper explored whether primary education students  ct can be improved and  to what extent primary education students are able to learn programming concepts  it included factors such as grade and used tests to measure children s  knowledge and computational thinking  one important conclusion is that there is a statistic significant in  crease in children s post test results both in knowledge  according to the cont knowledge test   and ct values for all grades  according to pcnt and romt ct tests   this suggests that even in a short period of time it table    comparative study using wilcoxon test  pcn con rom  th  th                            th  th z               p value              th  th                            th  th                             d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx to them as they were aged younger than     no conclusion could be drawn from this test  when the results of the pcnt are analysed  no significant results could be drawn either  indicating the need for more studies to quantify the increase  if any  of the development of ct in students aged younger than    when they learn programming concepts  we cannot end without highlighting the fact that  th grade students improved their performance in all tests  not only did they learn more programming concepts through mecoprog  but their scores in both ct measuring tests increased significantly  finally   th and  th grade students  knowledge of programming improved  but no significant im  provement was found in romt or pcnt scores  this may indicate ei  ther that these students need more time to improve their ct  or that the mecoprog metaphors methodology is more applicable to students aged        acknowledgments research funded by the projects tin            c    r and s     ice       references aho  a  v          computation and computational thinking  the computer journal                  balanskat  a     engelhardt  k          computing our future  computer programming and coding priorities  school curricula and initiatives across europe  brussels  belgium  european schoolnet      barker  l  j   mcdowell  c     kalahar  k          exploring factors that influence com  puter science introductory course students to persist in the major  acm sigcse bulletin  vol       pp            acm no     bers  m  u          the tangiblek robotics program  applied computational thinking for young children  early childhood research   practice            bers  m  u   ponte  i   juelich  c   viera  a     schenker  j          teachers as designers  integrating robotics in early childhood education  information technology in childhood education annual                 bers  m   rogers  c   beals  l   portsmore  m   staszowski  k   cejka  e   et al          innovative session  early childhood robotics for learning  proceedings of iste  c        computational thinking in k    education leadership toolkit  boero  p   bazzini  l     garuti  r          metaphors in teaching and learning mathe  matics  a case study concerning inequalities  pme conference  vol      pp          brackmann  c   barone  d   casali  a   boucinha  r     mun oz herna ndez  s          computational thinking  panorama of the americas  computers in education  siie   international symposium on iee  pp          brennan  k   balch  c     chung  m          creative computing  cambridge  masachussets   harvard graduate school of educationhttp   scratched gse harvard edu guide files  creativecomputing         pdf  consulta               brennan  k     resnick  m          new frameworks for studying and assessing the de  velopment of computational thinking  proceedings of the annual meeting of the american educational research association  vancouver  canada  pp           campe  s     denner  j          programming games for learning  a research synthesis  paper presented at the annual meeting of the american educational research association  chicago  il  cook  t  d     campbell  d  t          the causal assumptions of quasi experimental practice  synthese                  compthink app         http   www lite etsii urjc es tools compthink app   coull  n  j     duncan  i  m          emergent requirements for supporting introductory programming  innovation in teaching and learning in information and computer sciences                csta    iste         operational definition of computational thinking for k    education  retrieved from http   csta acm org curriculum sub currfiles compthinkingflyer  pdf  cuny  j   snyder  l     wing  j  m          demystifying computational thinking for non  computer scientists  unpublished manuscript in progress   on line   available  refer  enced in http   www cs cmu edu  compthink resources thelinkwing pdf  denning  p  j          the profession of it  beyond computational thinking  communications of the acm                espino  e   soledad  c     gonza lez  c          estudio sobre diferencias de ge nero en las competencias y las estrategias educativas para el desarrollo del pensamiento com  putacional  revista de educacio n a distancia      furber  s          shut down or restart  the way forward for computing in uk schools   on line   available  retrieved from http   royalsociety org education policy  computing in schools report   garci a pen alvo  f  j          a brief introduction to taccle   coding european project  computers in education  siie   international symposium on ieee  pp          ginat  d          on novice loop boundaries and range conceptions  computer science education                  google for education         exploring computational thinking  retrieved from https    www google com edu resources programs exploring computational thinking   gouws  l  a   bradshaw  k     wentworth  p          computational thinking in education students  therefore  and in line with the digital competence that teachers should develop  we should include this training in their pedagogical education  intef         measuring the progress of ct is also necessary  the tests used for this could differ depending on the definition of ct and the age of the students  for instance  the test created by korkmaz  c akir  and o zden        is limited to the sub skills comprising the iste        definition  in addition  it is limited to associate students and older students  only one validated test was found to measure ct according to the  d ct model and to be useful for young children  the authors of this test kindly allowed us to use it  roma n gonza lez et al         for this study  however  the test  romt  is only validated for children older than     for younger students  we tried a new test  pcnt   as explained above  which was also in line with the published  d ct model  the results gathered both from romt and pnct proved that ct can be improved by using mecoprog  however  given the low correlation found between pcnt and romt  more studies should be carried out focusing on how to assess ct for young students  particularly those aged under         limitations and future work we are aware that these measures would change if we use a dif  ferent ct definition  and that the results may change if we use a dif  ferent model  and or a different computer program other than scratch  furthermore  mecoprog can be used with different resources  and may thus produce different results in each case  the core metaphors used in this paper are based on cooking  different metaphors can be used such as car metaphors  the door as input output for the car  junctions for conditionals  roundabouts for loops and so on  during class  teachers are able to select the most adequate metaphor from mecoprog  as published  pe rez mari n et al          the experiment has been described in great detail so that other researchers are interested in repeating it with a different sample or to test more advanced programming concepts  can do so easily  this study experiment focused on basic introductory computer programming concepts because it was the first contact with those particular students and the project only had a limited amount of time  the authors are currently also carrying out a multifactorial study to determine whether other factors such as sex  motivation or effort might have an impact on students  ct test scores  we would also like to continue with the validation of pcnt  given the low correlation found between pcnt and romt     conclusions the findings of this longitudinal pre  and post test quasi experiment carried out with     primary education students  aged   to     posi  tively confirmed the formulated research question  can computational thinking be improved using a methodology based on metaphors and using scratch to teach computer programming to children  table    gathers the main results of the research study  here  both the knowledge programming concept test and the ct tests  romt and pcnt  found better post test scores  when data were analysed for all the grades  these results suggest that using metaphors and scratch is useful for teaching computer programming concepts to primary education students  and for improving students  ct  providing a positive answer to the research question  it contributes to the area of study exploring how to develop computational thinking by covering gaps in methodologies  and uses  for the first time  metaphors to teach basic programming concepts to primary education students  together with scratch  when the analysis is carried out per grade  it shows that  th grade students can understand programming concepts  in fact  it seems to show that these students are actually able to learn more about pro  gramming concepts  as their increase in cont knowledge improves more than any other group  because we could not apply the romt test   d  pe rez mari n  et al  computers in human behavior xxx  xxxx  xxxx educational activities  an evaluation of the educational game light bot  proceedings of the   th acm conference on innovation and technology in computer science education  pp            grover  s     pea  r          computational thinking in k     a review of the state of the field  educational researcher                heintz  f   mannila  l     fa rnqvist  t          a review of models for introducing computational thinking  computer science and computing in k    education  frontiers in education conference  fie         pp        ieee  intef         marco comu n de competencia digital docente  https   intef es blog marco  comun de competencia digital docente septiembre        iste         ct leadership toolkit  available at  https   www iste org docs ctdocuments  ct leadershipt toolkit pdf  fsfvrsn bc    jime nez peris  r   pareja flores  c   patin o marti nez  m     vela zquez iturbide  j a           the locker metaphor to teach dynamic memory  acm sigcse bulletin  vol       pp            acm no     jovanov  m   stankov  e   mihova  m   ristov  s     gusev  m          computing as a new compulsory subject in the macedonian primary schools curriculum  global engineering education conference  educon        ieee  pp            ieee  kaleliog lu  f          a new way of teaching programming skills to k    students  code  org  computers in human behavior               kazakoff  e  r   sullivan  a     bers  m  u          the effect of a classroom based in  tensive robotics and programming workshop on sequencing ability in early child  hood  early childhood education               korkmaz  o    c akir  r     o zden  m  y          a validity and reliability study of the computational thinking scales  cts   computers in human behavior               lahtinen  e   ala mutka  k     ja rvinen  h  m          a study of the difficulties of novice programmers  acm sigcse bulletin  vol       pp          no     lakoff  g     johnson  m          metaphors we live by  university of chicago press  lee  e   kafai  y  b   vasudevan  v     davis  r  l          playing in the arcade  designing tangible interfaces with makey makey for scratch games  playful user interfaces  pp            springer singapore  lee  i   martin  f   denner  j   coulter  b   allan  w   erickson  j     werner  l          computational thinking for youth in practice  acm inroads               lu  j  j     fletcher  g  h          thinking about computational thinking  acm sigcse bulletings            e     margulieux  l  e   catrambone  r     guzdial  m          employing subgoals in com  puter programming education  computer science education                https   doi  org                                special issue ii on computer science education in k    schools  r  mccartney  ed    transactions on computing education  acm         special issue on computing education in  k     schools  transactions on computing education  r  mccartney    j  tenenberg  eds    acm         milner  w  w          a broken metaphor in java  acm sigcse bulletings                ouahbi  i   kaddari  f   darhmaoui  h   elachqar  a     lahmine  s          learning basic programming concepts by creating games with scratch programming environment  procedia social and behavioral sciences                  papadakis  s   kalogiannakis  m     zaranis  n          developing fundamental pro  gramming concepts and computational thinking with scratchjr in preschool educa  tion  a case study  international journal of mobile learning and organisation                  papert  s          mindstorms  children  computers  and powerful ideas  new york  ny  basic books  paris  n  a     glynn  s  m          elaborate analogies in science text  tools for en  hancing preservice teachers  knowledge and attitudes  contemporary educational psychology                  pea  r  d     kurland  d  m          on the cognitive effects of learning computer pro  gramming  new ideas in psychology                 pe rez mari n  d   hijo n neira  r     marti n lope  m          a methodology proposal based on metaphors to teach programming to children  ieee revista iberoamericana de tecnologi as del aprendizaje                putnam  r  t   sleeman  d   baxter  j  a     kuspa  l  k          a summary of mis  conceptions of high school basic programmers  journal of educational computing research                 resnick  m          new paradigms for computing  new paradigms for thinking  in y  inkafai    m  resnick  eds    constructionism in practice  designing  thinking  and learning in a digital world  mahwah  nj  erlbaum  resnick  m   maloney  j   monroy hernandez  a   rusk  n   eastmond  e   brennan  k   et al          scratch  programming for all  communications of the acm                 rodri guez die guez  j  l          las meta foras en la ensen anza  ensen anza   teaching  revista interuniversitaria de dida ctica  pp            universidad de salamanca    roma n gonza lez  m          computational thinking test  design guidelines and content validation  proceedings of edulearn   conference  pp                roma n gonza lez  m   pe rez gonza lez  j  c     jime nez ferna ndez  c          which cognitive abilities underlie computational thinking  criterion validity of the com  putational thinking test  computers in human behavior               https   doi org          j chb              nd rosenthal  r          meta analytic procedures for social research    ed    newbury park  ca  sage  sanford  j  p   tietz  a   farooq  s   guyer  s     shapiro  r  b          metaphors we teach by  proceedings of the   th acm technical symposium on computer science education  pp            acm  seoane pardo  a  m          computational thinking between philosophy and stem  programming decision making applied to the behaviour of  moral machines  in ethical values classroomieee ritahttps   doi org         rita               seppa la   o   malmi  l     korhonen  a           observations on student mis  conceptions a case study of the build heap algorithm   computer science education                  sovic   a   jagus t  t     sers ic   d          how to teach basic university level program  ming concepts to first graders  integrated stem education conference  isec        ieee  pp        ieee  strawhacker  a   portelance  d   lee  m     bers  m          designing tools for developing minds  the role of child development in educational technology  idc      workshop  available on line at  http   everychildacoder org uk wp content uploads          strawhacker et al final pdf last visit  november   rd         thomas  g  p     mcrobbie  c  j          using a metaphor for learning to improve students  metacognition in the chemistry classroom  journal of research in science teaching                  vico  f          el nin o que no programe tendra  un ha ndicap como hoy lo tiene el que no entiende ingle s  entrevistas educacio n      https   www educaciontrespuntocero com  entrevistas francisco j vico programacion       html  wing  j  m       a   computational thinking  communications of the acm                wing  j  m       b   computational thinking  communications of the acm                wing  j          computational thinking and thinking about computing  philosophical transactions of the royal society of mathematical physical and engineering sciences                  wing  j          research notebook  computational thinking  what and why   on line   available  the link magazine  springpittsburgh  carnegie mellon university  retrieved from http   link cs cmu edu article php a      wing  j  m          computational thinking     years later  http   www microsoft com en  us research blog computational thinking    years later  yadav  a   gretter  s   hambrusch  s     sands  p          expanding computer science education in schools  understanding teacher experiences and challenges  computer science education        yadav  a   zhou  n   mayfield  c   hambrusch  s     korb  j  t          introducing computational thinking in education courses  proceedings of acm special interest group on computer science education  dallas  tx     
            by acm  original version in acm ubiquity  reprinted here with permission  doi         comjnl bxs    computation and computational thinking alfred v  aho department of computer science columbia university new york  n y        corresponding author  aho cs columbia edu we recommend using the term computation in conjunction with a well defined model of computation whose semantics is clear and which matches the problem being investigated  computer science already has a number of useful clearly defined models of computation whose behaviors and capabilities are well understood  we should use such models as part of any definition of the term computation  however  for new domains of investigation where there are no appropriate models it may be necessary to invent new formalisms to represent the systems under study     the need for clear definitions in any scientific discipline there are many reasons to use terms that have precise definitions  understanding the terminology of a discipline is essential to learning a subject and precise terminology enables us to communicate ideas clearly with other people  in computer science the problem is even more acute  we need to construct software and hardware components that must smoothly interoperate across interfaces with clients and other components in distributed systems  the definitions of these interfaces need to be precisely specified for interoperability and good systems performance  using the term  computation  without qualification often generates a lot of confusion  part of the problem is that the nature of systems exhibiting computational behavior is varied and the term computation means different things to different people depending on the kinds of computational systems they are studying and the kinds of problems they are investigating  since computation refers to a process that is defined in terms of some underlying model of computation  we would achieve clearer communication if we made clear what the underlying model is  rather than talking about a vague notion of  computation   my suggestion is to use the term in conjunction with a well  defined model of computation whose semantics is clear and which matches the problem being investigated  computer science already has a number of useful clearly defined models of computation whose behaviors and capabilities are well understood  we should use such models as part of any definition of the term computation  however  for new domains of investigation where there are no appropriate models it may be necessary to invent new formalisms to represent the systems under study     computational thinking we consider computational thinking to be the thought processes involved in formulating problems so their solutions can be represented as computational steps and algorithms  an important part of this process is finding appropriate models of computation with which to formulate the problem and derive its solutions  a familiar example would be the use of finite automata to solve string pattern matching problems  a less familiar example might be the quantum circuits and order finding formulation that peter shor     used to devise an integer  factoring algorithm that runs in polynomial time on a quantum computer  associated with the basic models of computation in computer science is a wealth of well known algorithm  design and problem solving techniques that can be used to solve common problems arising in computing  however  as the computer systems we wish to build become more complex and as we apply computer science abstractions to new problem domains  we discover that we do not always have the appropriate models to devise solutions  in these cases  computational thinking becomes a research activity that includes inventing appropriate new models of computation  corrado priami and his colleagues at the centre for computational and systems biology in trento  italy have been using process calculi as a model of computation to create programming languages to simulate biological processes  priami states  the basic feature of computational thinking is the computer journal  vol     no          downloaded from https   academic oup com comjnl article abstract                 by          user on    january      abstraction of reality in such a way that the neglected details in the model make it executable by a machine       as we shall see  finding or devising appropriate models of computation to formulate problems is a central and often nontrivial part of computational thinking     forces at play in the last half century  what we think of as a computational system has expanded dramatically  in the earliest days of computing  a computer was an isolated machine with limited memory to which programs were submitted one at a time to be compiled and run  today  in the internet era  we have networks consisting of millions of interconnected computers and as we move into cloud computing  many foresee a global computing environment with billions of clients having universal on demand access to computing services and data hosted in gigantic data centers located around the planet  anything from a pc or a phone or a tv or a sensor can be a client and a data center may consist of hundreds of thousands of servers  needless to say  the models for studying such a universally accessible  complex  highly concurrent distributed system are very different from the ones for a single isolated computer  another force at play is that because of heat dissipation considerations the architecture of computers is changing  an ordinary pc today has many different computing elements such as multicore chips and graphics processing units  and an exascale supercomputer by the end of this decade is expected to be a giant parallel machine with up to a million nodes each with possibly a thousand processors  our understanding of how to write efficient programs for these machines is limited  good models of parallel computation and parallel algorithm design techniques are a vital open research area for effective parallel computing  in addition  there is increasing interest in applying computation to studying virtually all areas of human endeavor  one fascinating example is simulating the highly parallel biological processes found in human cells and organs for the purposes of understanding disease and drug design  good computational models for biological processes are still in their infancy  and it is not clear we will ever be able to find a computational model for the human brain that would account for emergent phenomena such as consciousness or intelligence     the theory of computation the theory of computation has been and still is one of the core areas of computer science  it explores the fundamental capabilities and limitations of models of computation  a model of computation is a mathematical abstraction of a computing system  the most important model of sequential computation studied in computer science is the turing machine  first proposed by alan turing in           let us briefly review the definition of a turing machine to appreciate the detail necessary to understand even this familiar model of computation  we can think of a turing machine as a finite state control attached to a tape head that can read and write symbols on the squares of a semi infinite tape  initially  a finite string of length n representing the input is in the leftmost n squares of the tape  an infinite sequence of blanks follows the input string  the tape head is reading the symbol in the leftmost square and the finite control is in a predefined initial state  the turing machine then makes a sequence of moves  in a move it reads the symbol on the tape under the tape head and consults a transition table in the finite state control which specifies a symbol to be overprinted on the square under the tape head  a direction the tape head is to move  one square to the left or right   and a state to enter next  if the turing machine enters an accepting halting state  one with no next move   the string of nonblank symbols remaining on the input tape at that point in time is its output  mathematically  a turing machine consists of seven components  a finite set of states  a finite input alphabet  not containing the blank   a finite tape alphabet  which includes the input alphabet and the blank   a transition function that maps a state and a tape symbol into a state  tape symbol  and direction  left or right   a start state  an accept state from which there are no further moves  and a reject state from which there are no further moves  we can characterize the configuration of a turing machine at a given moment in time by three quantities   i  the state of the finite state control   ii  the string of nonblank symbols on the tape  and  iii  the location of the input head on the tape  a computation of a turing machine on an input w is a sequence of configurations the machine can go through starting from the initial configuration with w on the tape and terminating  if the computation terminates  in a halting configuration  we say a function f from strings to strings is computable if there is some turing machine m that given any input string w always halts in the accepting state with just f  w  on its tape  we say that m computes f   the turing machine provides a precise definition for the term algorithm  an algorithm for a function f is just a turing machine that computes f   there are scores of models of computation that are equivalent to turing machines in the sense that these models compute exactly the same set of functions that turing machines can compute  among these turing complete models of computation are multitape turing machines  lambda calculus  random access machines  production systems  cellular automata  and all general purpose programming languages  the reason there are so many different models of computation equivalent to turing machines is that we rarely want to implement an algorithm as a turing machine program  computation and computational thinking     the computer journal  vol     no          downloaded from https   academic oup com comjnl article abstract                 by          user on    january          a v  aho we would like to use a computational notation such as a programming language that is easy to write and easy to understand  but no matter what notation we choose  the famous church turing thesis hypothesizes that any function that can be computed can be computed by a turing machine  note that if there is one algorithm to compute a function f  then there is an infinite number  much of computer science is devoted to finding efficient algorithms to compute a given function  for clarity  we should point out that we have defined a computation as a sequence of configurations a turing machine can go through on a given input  this sequence could be infinite if the machine does not halt or one of a number of possible sequences in case the machine is nondeterministic  the reason we went through this explanation is to point out how much detail is involved in precisely defining the term computation for the turing machine  one of the simplest models of computation  it is not surprising  then  as we move to more complex models  the amount of effort needed to precisely formulate computation in terms of those models grows substantially     concurrent models many real world computational systems compute more than just a single function the world has moved to interactive computing      the term reactive system is used to describe a system that maintains an ongoing interaction with its environment  examples of reactive systems include operating systems and embedded systems  a distributed system is one that consists of autonomous computing systems that communicate with one another through some kind of network using message passing  examples of distributed systems include telecommunications systems  the internet  air traffic control systems  and parallel computers  many distributed systems are also reactive systems  perhaps the most intriguing examples of reactive distributed computing systems are biological systems such as cells and organisms  we could even consider the human brain to be a biological computing system  formulation of appropriate models of computation for understanding biological processes is a formidable scientific challenge in the intersection of biology and computer science  distributed systems can exhibit behaviors such as deadlock  livelock  race conditions  and the like that cannot be usefully studied using a sequential model of computation  moreover  solving problems such as determining the throughput  latency  and performance of a distributed system cannot be productively formulated with a single thread model of computation  for these reasons  computer scientists have developed a number of models of concurrent computation which can be used to study these phenomena and to architect tools and components for building distributed systems  there are many theoretical models for concurrent compu  tation  one is the message passing actor model  consisting of computational entities called actors      an actor can send and receive messages  make local decisions  create more actors  and fix the behavior to be used for the next message it receives  these actions may be executed in parallel and in no fixed order  the actor model was devised to study the behavioral properties of parallel computing machines consisting of large numbers of independent processors communicating by passing messages through a network  other well studied models of concurrent computation include petri nets and the process calculi such as pi calculus and mu calculus  many variants of computational models for distributed systems are being devised to study and understand the behaviors of biological systems  for example  dematte et al      describe a language called blenx that is based on a process calculus called beta binders for modeling and simulating biological systems  we do not have the space to describe these concurrent models in any detail  however  it is still an open research area to find practically useful concurrent models of computation that combine control and data for many areas of distributed computing     benefits of models of computation in addition to aiding education and understanding  there are many practical benefits to having appropriate models of computation for the systems we are trying to build  in cloud computing  for example  there are still a host of poorly understood concerns for systems of this scale  we need to better understand the architectural tradeoffs needed to achieve the desired levels of reliability  performance  scalability and adaptivity in the services these systems are expected to provide  we do not have appropriate abstractions to describe these properties in such a way that they can be automatically mapped from a model of computation into an implementation  or the other way around   in cloud computing  there are a host of research challenges for system developers and tool builders  as examples  we need programming languages  compilers  verification tools  defect detection tools  and service management tools that can scale to the huge number of clients and servers involved in the networks and data centers of the future  cloud computing is one important area that can benefit from innovative computational thinking     conclusion mathematical abstractions called models of computation are at the heart of computation and computational thinking  computation is a process that is defined in terms of an underlying model of computation and computational thinking is the thought processes involved in formulating problems so the computer journal  vol     no          downloaded from https   academic oup com comjnl article abstract                 by          user on    january      their solutions can be represented as computational steps and algorithms  useful models of computation for solving problems arising in sequential computation can range from simple finite  state machines to turing complete models such as random access machines  useful models of concurrent computation for solving problems arising in the design and analysis of complex distributed systems are still a subject of current research  about the author alfred v  aho is lawrence gussman professor in the computer science department at columbia university  he served as chair of the department from      to       and in the spring of       acknowledgements the author would like to thank peter denning and jeannette wing for their thoughtful comments on the importance of computational thinking  the author is also grateful to jim larus for his insights into the problems confronting cloud computing and to corrado priami for many stimulating conversations on computational thinking in biology  references     shor p w       algorithmsforquantumcomputation discrete logarithms and factoring  proceedings of the   th annual symposium on foundations of computer science  pp           ieee computer society      priami  c         computational thinking in biology  transac  tions on computational systems biology viii                turing  a         on computable numbers  with an application to the entscheidungsproblem  proceedings of the london mathematical society         pp               goldin  d  q   smolka  s  a   and wegner  p   eds          interactive computation  the new paradigm  springer      hewitt c  bishop p  andsteiger r       auniversalmodular actor formalism for artificial intelligence  proceedings of the  rd international joint conference on artificial intelligence  stanford  usa  pp           morgan kaufmann publishers inc      dematte   l   priami  c   and romanel  a         the blenx language  a tutorial  proceedings of sfm     bertinoro  italy  pp           springer verlag      denning  p  j         beyond computational thinking  commun  acm                 wing  j  m         computational thinking  commun  acm             computation and computational thinking     the computer journal  vol     no          downloaded from https   academic oup com comjnl article abstract                 by          user on    january      
computational thinking by susan german students develop computational thinking by approaching new situations using a variety of computer based methods  including simulation  data mining  networking  automated data collection  gaming  algorithmic reasoning  robotics  and programming  computational thinking is different from mathematical thinking  according to sneider et al          students develop mathematical thinking when they attempt to approach a new situation with their acquired math skills  including counting  arithmetic  algebra  geometry  calculus  set theory  and topology  computational thinking is part of the next generation science standards science and engineering practices  see figure     computational thinking can be used in conjunction with any of the practices  implementing computational thinking computer simulations provide students with the opportunity to model phenomena by changing the input conditions and measuring the outcome  while i firmly believe it is best for students to interact with physical phenomena  a computer simulation can be more time efficient and allows students to try out  what if    scenarios in a safe manner  computer simulations are best used in situations where physical phenomena are difficult to study directly  such as the solar system or molecular motion  however  while electric circuits are directly observable  using a simulation can bring the unobservable parts of the phenomenon to an observable level  i developed an assessment on electric circuits after my students completed a unit on electricity  during which they learned about series and parallel circuits  the assessment used the phet circuit construction kit  dc virtual lab  see resources   which allowed students to virtually construct different types of circuits  adjust the   figure    ngss sep  mathematical and computational thinking  ngss lead states       appendix f  p       mathematical and computational thinking in     builds on k   experiences and progresses to identifying patterns in large data sets and using mathematical concepts to support explanations and arguments    use digital tools  e g   computers  to analyze extensive data sets for patterns and trends    use mathematical representations to describe and support scientific conclusions and design solutions    create algorithms  a series of ordered steps  to solve a problem    apply mathematical concepts and processes  e g   ratio  rate  percent  basic operations  simple algebra  to scientific and engineering questions and problems    use digital tools and mathematical concepts and arguments to test and compare proposed solutions to an engineering design problem     teacher to teacher number of resistors used  and add switches  students studied and measured the current  amps  and voltage  volts  of the following circuits  simple  figure     series  figure     parallel  figure     and complex  figure     while building circuits and measuring current and voltage  students asked   why are the charges moving slower in the series circuit than in the parallel circuit   to determine that the chargers were moving slower  students chose to use an ammeter to measure the current of the circuit  when the ammeter measured lower amperage on wires where the charges moved slower  students were able to observe the current and build a mental model of electric current  alternatively  students could work with a physical circuit and set up the series circuit and parallel circuit with light bulbs  students would be able to observe differences in the brightness of the bulbs and make measurements of the voltage and current in each circuit  however  the actual movement of charge would be based on a student s inference  using a computer simulation as a scientific model allows unseen parts of the circuit to be made visual  to assess student understanding of series  parallel  and complex circuits  i asked them to build models of a circuit of a flashlight with three bulbs and specific design criteria   figure     in the simulation  students had access to a large voltage battery as well as a regular battery  while using a     v battery is beyond the norm of flashlight batteries  allowing students to use the battery forced students to think deeper in constructing a circuit  in order to solve the problem created by using a battery too large for a flashlight  student needed to add resistors in order for the circuit to properly work   students set a lot of simulation circuit fires as they worked on solutions   conclusion computational thinking is more than using a computer simulation to make observations  this lesson required students to  use digital tools and mathematical concepts and arguments to test and compare proposed solutions to an engineering design problem   ngss lead states  appendix f         my students used a simulation to explore their  what if    questions when they integrated the high voltage battery as the energy source for their circuit and created a circuit that meets the requirements of the assessment  furthermore  the problem was engineering in nature  students used a simulation to develop and test ideas for how well they met the defined criteria a process made quicker by using a simulation rather than physical materials  the important step in the lesson is for students to understand that the simulation is programmed with algorithms based on data for how a physical circuit works and abstractions that allow students to visualize   figure    simple circuit   figure    series circuit   figure    parallel circuit   figure    complex circuit july         teacher to teacher   figure    flashlight problem you want to create a flashlight using three bulbs  it will be essential to control which lights are turned on  one light  two lights  or three lights   you can use one or two batteries  no more than three switches  and as much wire as necessary  the flashlight design should maximize the brightness of the bulbs and be on one circuit  use the simulation we have been working with to come up with a circuit design    screenshots of your final design   a written explanation of your final design   claim a statement describing your final design   evidence data from investigation that supports your design   reasoning connect the evidence to claim by describing the science involved   data on your final design  voltage and current  the normally unseen portions of the phenomenon    references ngss lead states        next generation science standards  for states  by states  washington  dc  national academies press  sneider  c   c  stephenson  b  schafer  and l  flick        teachers toolkit  exploring the science framework and ngss  computational thinking in the science classroom  science scope                 yadav  a   h  hong  and c  stephenson        techtrends                 resource circuit simulation https   phet  colorado edu en simulation circuitconstruction kit dc virtual lab susan german  sgerman hallsville org  is a science teacher at hallsville r iv school district in hallsville  missouri  grade level k   simulations   assessments   videos be a sky sleuth helps students fi gure out how patterns can be used to predict the positions of the sun  moon  and stars  thinking beyond english language arts connections mathematics connections differentiated learning use activities in the teacher s guides to implement three dimensional learning in your classrooms  stem for kids  phenomenon based  three dimensional learning content that s designed using the  e model and incorporates the science and engineering practices  seps   crosscutting concepts  cccs   and disciplinary core ideas  dcis   comprehensive teacher s guides are available  each teacher s guide provides connections to the grade level content  including science  ela  and mathematics  plus tips and practical information to enhance the e book experience  use activities in the teacher s guides to implement three dimensional learning in your classroom  lexile level     l visit www nsta org ebooks gradesk   to learn more and order  purchases of     e books of a single title will include a detailed teacher s guide specifi c to that e book     reproduced with permission of copyright owner  further reproduction prohibited without permission  
computational thinking and tinkering  exploration of an early childhood robotics curriculum marina umaschi bers  louise flannery  elizabeth r  kazakoff   amanda sullivan tufts university  medford  ma  usa article info article history  received    january      received in revised form    october      accepted    october      keywords  elementary education interactive learning environments pedagogical issues teaching learning strategies robotics programming early childhood abstract by engaging in construction based robotics activities  children as young as four can play to learn a range of concepts  the tangiblek robotics program paired developmentally appropriate computer programming and robotics tools with a constructionist curriculum designed to engage kindergarten children in learning computational thinking  robotics  programming  and problem solving  this paper documents three kindergarten classrooms  exposure to computer programming concepts and explores learning outcomes  results point to strengths of the curriculum and areas where further redesign of the curriculum and technologies would be appropriate  overall  the study demonstrates that kindergartners were both interested in and able to learn many aspects of robotics  programming  and computational thinking with the tangiblek curriculum design         elsevier ltd  all rights reserved     introduction for decades  early childhood  preschool to grade two  curricula have focused primarily on literacy and math  especially with the educational reforms of no child left behind  zigler   bishop josef         however  there has been some recent attention to science  technology  engineering  and math  stem  learning for young children  gelman   brenneman        sesame workshop        white house         furthermore  new technology learning standards and best practices for integrating technology into early childhood education have been developed  barron et al         international society for technology in education  iste         naeyc   fred rogers center for early learning and children s media        u s  department of education         of note  the technology policy statement from naeyc   fred rogers center for early learning and children s media        provides a guide for early childhood education professionals in using interactive digital technologies in balanced and developmentally appropriate ways  it addresses important issues related to using digital technology with children ages three eight years  including the needs for technology use to serve the needs of the children  and for educators to be able to understand  evaluate  and integrate developmentally appropriate technologies in their classrooms  however  there is little research on computer programming specifically for early childhood  the subject this paper explores  as new devices  from smartphones and tablet computers to electronic learning toys  find new audiences with increasingly young children  challenging question arise about how to define developmentally appropriate activities and content for children of different ages  while the majority of research on robotics and programming in education focuses on later schooling  teaching these subjects during foundational early childhood years can be an engaging and rewarding experience for young learners  bers         previous research has shown that children as young as four six years old can build and program simple robotics projects  bers  ponte  juelich  viera    schenker        pp           cejka  rogers    portsmore        kazakoff  sullivan    bers        perlman        p       wyeth        as well as learn powerful ideas from engineering  technology  and computer programming while also building their computational thinking skills  bers         robotic manipulatives allow children to develop fine motor skills and hand eye coordination while also engaging in collaboration and teamwork  additionally  robotics can provide a fun and playful way for teachers to integrate academic content with the creation of   corresponding author  devtech research group  eliot pearson department of child development      college ave   medford  ma        usa  tel                    e mail address  elizabeth kazakoff tufts edu  e r  kazakoff   contents lists available at sciencedirect computers   education journal homepage  www elsevier com locate compedu               see front matter        elsevier ltd  all rights reserved  http   dx doi org         j compedu             computers   education                   meaningful projects  through robotics  young children can experiment with concepts of engineering as well as storytelling by creating narrative contexts for their projects  bers         by engaging in these types of robotics projects  young children play to learn while learning to play in a creative context  resnick         computers offer new ways of representing and interacting with information and an entirely new category of  objects to think with   papert         in the form of programmable and interactive robots  computers can become powerful learning tools  robotics offers children the opportunity to engage with content from the domain of computer science  practice problem solving skills  and work on fine motor skills and eye hand coordination  the tangiblek robotics program  a design based research initiative now in its fifth year  has paired developmentally appropriate programming and robotics tools with a curriculum to engage kindergartners in learning computational thinking  robotics and programming concepts  as well as problem solving and reasoning  the goal of this paper is to present young children s learning outcomes on computer programming concepts as taught through the tangiblek curriculum in order to highlight the potential for learning of integrating computer programming and robotics into the early childhood classroom       theoretical framework  constructionism and positive technological development the theoretical approach used for designing the educational intervention and curriculum and for integrating the tangiblek robotics program into early childhood classrooms incorporates elements from papert s        constructionist framework  which states that children can learn deeply when they build their own meaningful projects in a community of learners and reflect carefully on the process  papert s        constructionism is rooted in piaget s        constructivism   which conveys the idea that the child actively builds knowledge through experience   and the related  learn by doing  approach to education  while piaget s        theory was developed to explain how knowledge is constructed in an individual s mind  papert        expands on it to focus on the ways that internal constructions are supported by constructions in the world  including through the use of computers and robotics  a constructionist teaching approach provides children the freedom to explore their own interests through technologies  bers        while investigating domain specific content learning and also exercising meta cognitive  problem solving  and reasoning skills  e g   clements   gullo        clements   meredith         papert        discussed that well designed constructionist activities have embedded in them  powerful ideas   central concepts within a domain that are both epistemological and personally useful  interconnected with other disciplines  and have roots in intuitive knowledge that a child has internalized over a long period of time  bers et al         papert         an idea may be considered powerful to the degree that it is useful in building and extending further knowledge  papert         the robotics curriculum described in this paper is composed of powerful ideas from the domains of computer science and engineering  e g   the engineering design process  debugging  robotic motion and sensing  using programming instructions  control flow by sequence  control flow by specific instructions   classroom activities designed to impact learning outcomes and cognitive growth  also have an impact on  and are influenced by  children s social  emotional  and moral development  as a framework to guide the design and implementation of a robotics curriculum that also focuses on these dimensions of the child  bers               positive technological development  ptd  was utilized  ptd takes into consideration the learning environment and pedagogical practices  as well as cultural values and rituals  which mediate teaching and learning  bers        rogoff  goodman turkanis    bartlett         the educational experience proposed by the presented robotics curriculum was structured using the ptd framework to encourage six behaviors  which in turn foster the development of beneficial core cognitive and social traits  specifically  engaging in content generation  creative design and problem solving  collaboration  communication  choices of conduct  and community building may lead to a sense of competence and confidence  the ability to connect with and care about others  contribution to entities outside the self  and moral character  bers               for instance  by iteratively planning and revising a robotics project in a supportive environment  children may gain confidence in their abilities to learn and solve problems  alternatively  discussions of how to share limited resources fairly amongst the class are opportunities for positive moral development       learning through computer programming embedded in the exploration of computer programming and robotics  the tangiblek curriculum also fosters computational thinking  this term has been defined in many ways and encompasses a broad and somewhat debated range of analytic and problem solving skills  dispositions  habits  and approaches used in computer science  barr   stephenson        international society for technology education and the computer science teachers association        lee et al          the tangiblek curriculum specifically fosters computational thinking skills such as  problem representation  systematicity in generating and implementing solutions  exploring multiple possible solutions  problem solving on multiple levels   from approaching the overall challenge to  debugging  or trouble shooting specific difficulties with a given solution s implementation  productive attitudes toward  failure  and misconceptions uncovered along the route to a successful project  and strategies for approaching open ended and often difficult problems  such skills are of general applicability beyond robotics and computational thinking       the tangiblek robotics program the tangiblek robotics program  whose design is informed by the theoretical frameworks of constructionism and ptd  has iteratively implemented and assessed a set of programming and robotics tools  curricula  and pedagogical approaches in close collaboration with hundreds of children and dozens of teachers over the course of five years  the research goals of the tangiblek robotics program are to     provide an evidence based description of young children s learning trajectories in computational thinking and capacity to understanding computer programming and robotics concepts when given developmentally appropriate materials     develop and test an early childhood curriculum to teach developmentally appropriate concepts from computer programming and robotics to children in kindergarten through second grade     investigate the design features of the programming interface and the mediating role interface design plays in learning to program      m u  bers et al    computers   education                   this paper addresses the first of these goals  to describe young children s learning trajectories in computational thinking and capacity to understand computer programming and robotics concepts  this understanding will allow further revision to the tangiblek curriculum  the tangiblek robotics project makes use of commercially available robotics construction kits and the cherp  creative hybrid environment for robotics programming  language to give behaviors to the robotic constructions  bers        bers   horn        horn et al         kazakoff   bers        kazakoff  sullivan    bers         cherp is a hybrid tangible and graphical computer language designed to provide young children with an engaging introduction to computer programming in a developmentally appropriate way  the software allows children to create programs to control their robots from tangible wooden blocks and or graphical  on screen icons  the design of cherp avoids the technical and syntax related challenges of text based programming languages  furthermore  the hybrid interface allows children to choose the interface that best suits their changing preferences as physical abilities  perceived social appeal  and the level of challenge of the activity at hand evolve  horn et al          because both tangible and graphical interfaces can represent the same concepts  the tangiblek curriculum introduces increasingly complex powerful ideas from computer science in a robotics context in a structured  developmentally appropriate way  the powerful ideas from computer science addressed in this curriculum include  the engineering design process and debugging  trouble shooting   robotic motion and sensing  and three aspects of programming  choosing the correct programming instructions  controlling the flow of actions by sequencing the action instructions accordingly  and controlling the flow of actions by using special control flow instructions  section     contains more detailed definitions of each powerful idea  in addition to the concrete robotics and programming concepts and skills introduced in each activity  skills such as observation  reflection  and decomposition of complex processes are interwoven throughout the curriculum  the curriculum  which takes approximately    h of classroom work  includes six structured     to    min activities and a culminating interdisciplinary project  all the activities focus on building and programming a robotic vehicle to accomplish a particular goal  each lesson addresses one or more powerful idea s  within the context of a narrative theme  the six lesson activities and their embedded content are as follows  lesson    the engineering design process children build sturdy  non robotic vehicles to transport toy people on a floor map  children apply the stages of the engineering design process to plan  test  and improve their vehicles  lesson    robotics children share and learn ideas about what robots are and are not  they explore robotic parts by designing and building their own robots  they learn to appropriately connect robotic parts  e g   snap together wires and motors  to make a robot that moves  lesson    choosing and sequencing programming instructions in this activity  children program their robots to dance the  hokey pokey  by choosing relevant instructions and putting them in the correct order or sequence  lesson    looping programs  control flow instructions    children use  repeat  instructions to program their robots to move forward forever  next  they program their robot to move forward only a particular number of times to reach a fixed location  lesson    sensors children use light sensors to program their robots to turn its light on when it is dark out and vice versa  they draw comparisons between robotic sensors and the five human senses  lesson    branching programs  control flow instructions    children are introduced to a pair of conditional control flow instructions   if  and  if not   which are also used with a sensor to make programs that incorporate environmental conditions into the robot s behavior  in addition to the structured activities described above  the tangiblek curriculum includes songs  games  and free play with the robotics and programming materials in order to foster a playful learning environment for children  for example  in lesson    children sing and dance the  robot hokey pokey  and play simon says with the cherp programming commands to recall and apply the programming instructions  throughout the    h curriculum  children have ample opportunity to freely build and design with the robotics materials and to create their own cherp programs  beyond those that are set forth in each of the structured lessons  after completing the six lessons described above  each classroom embarks on a culminating  interdisciplinary project  which invite children to apply the now familiar powerful ideas to a particular theme or context  the teacher decides on a theme drawn from other subjects studied during the year  and each child chooses a challenge within this theme  past classrooms have selected topics such as animal behaviors  vehicles that help the community  or  who am i   children created projects representing snakes that slither  recycling trucks that collect refuse  and sewing needles that travel back and forth through fabric  among many others  the projects allow children to demonstrate the powerful ideas they learned over the six activities as well as to apply them and continue learning about them in a new context  having introduced an overview of the tangiblek robotics program  including its technological  curricular  and theoretical components  we now present a study of three kindergarten classrooms in which the tangiblek robotics program was implemented  the following sections report the distribution of achievement scores children attained on selected computer programming concepts and skills tied to the m u  bers et al    computers   education                       powerful ideas listed above  achievement scores form the basis on which to discuss the curriculum structure and content and consider the implications for understanding children s early learning trajectories of computational concepts and for further adaptation of the curriculum     study design within the design based research tradition of iterative testing  analysis  and refinement of an intervention   see  e g   cobb  confrey  disessa  lehrer    schauble         the tangiblek robotics program has spent five years exploring what children are capable of learning and accomplishing in the domains of robotics and programming  the study described in this paper examines how successfully children learned the core concepts  powerful ideas  of robotics and programming in the tangiblek curriculum  the study took place during the fourth year of the overall project  following piloting and refinement of the software and curriculum in a range of settings  from classrooms and after school summer programs to the research lab  the extensive testing  exploration  and refinement of the preceding study iterations also laid a foundation for understanding how young children learn and think about core concepts of programming and robotics  for instance  several of the curricular activities were simplified to enable better focus on the target concepts  movement games and songs were added to the curriculum to engage children in multiple modes of understanding concepts and to provide reinforcement for basic knowledge  in addition  some of the programming icons were revised to use more familiar imagery for children       participants each of the three teachers involved in this study volunteered to participate following email notification of the opportunity to principals of a limited number of schools in the greater boston area  all children in each classroom participated in the curriculum  but each family had the option to allow or decline data collection  according to school community needs  consent materials were available in english  portuguese  and spanish  children in the study attended one of three greater boston area kindergarten classrooms  two of which were at a public urban school  and one at a private suburban school  from a total of    children enrolled in the three classes during the study     are included in data analysis  children were included in data analysis unless they missed more than one activity or if data was not collectible for more than one activity  attrition was due to typical classroom absences as well as the difficulty of collecting data with limited researchers in a bustling classroom environment  classroom    a kindergarten in an independent  k    religious based  private school in a suburb of boston  ma  had    children     of whom are included in data analysis  the student population at this school was     white     as asian     as black     hispanic  http   nces  ed gov globallocator    of the children in the kindergarten class      were male and     were female  they ranged from ages     to     years at the start of the study  with a median age of     years  the only kindergarten classroom at this school  this class was taught by a male teacher with seven years of teaching experience  who  on a scale from    none  to    expert   rated his computer experience as    programming experience as    and robotics experience as    classrooms   and   were located at the same urban k   school  nclb level     located just outside of boston  ma  the makeup of this school during the           school year was       white        hispanic        african american       asian american  and      multirace  the school was comprised of       english language learners and       of students were classified as low income  massachusetts department of education         a female teacher with six years of teaching experience taught classroom    she rated her computer experience as a    robotics experience as a    and programming experience as a    this classroom had    children enrolled     of whom are included in the data analysis  of those    children      were male and     were female  at the start of the curriculum  the children in this classroom ranged in age from     to     years old  with a median age of     years  a female teacher with    years of teaching experience taught classroom    she also rated her computer experience as a    robotics experience as a    and programming experience as a    the data analysis includes    of    children enrolled in this classroom  of the    participants      were female and     were male  the children s ages at the start of the curriculum in classroom   ranged from     to     years  with a median age of     years old  the overall age range for the    children included in data analysis was         years  and their average age at the start of the curriculum was     years old  over the three classrooms as a whole      of the children were female and     male  the participants in this study are thought to be generally representative of the general kindergartners population  as the sample includes both public and private school students  both male and female teachers  a fairly even proportion of male and female students  and  as described above  a diverse range of ethnic and socioeconomic backgrounds  particularly at to the participating public school       procedure each classroom s head teacher and all research assistants  nearly    research collaborators in total  received training to prepare them for teaching or assisting the robotics curriculum and participating in the research and data collection  the high number of assistants was needed for two reasons  first  a low student to adult ratio in each lesson ensured adequate observation and documentation of students  work  secondly  most research assistants had limited availability across the full set of study sessions  therefore  attention was given to all collaborators  to ensure they received careful and detailed training  the   h introductory training covered technical  curricular  and pedagogical aspects of the program including how to use the cherp programming language and lego robotics kits as well as activity content and training on the structure and the teaching approach framed by the ptd model presented earlier  the training also included explanation and examples of how to score children s work in each activity according to a scale of understanding levels  described below  the teachers then implemented the tangiblek curriculum in their own classrooms with technical support from trained research assistants  two teachers used the curriculum with the whole class working together  the third teacher worked with half of the class at a time  finishing the entire curriculum with one group before starting it with the other  each curricular activity took one to two       min session s   the teacher introduced key concepts and the day s activity in a whole group setting along with a short song or game to reinforce the     m u  bers et al    computers   education                   concepts  as mentioned earlier  in lesson    each class sang and danced the  hokey pokey  before programming their robots to do this dance  additionally  the game  simon says  was often used in lessons     to reinforce the cherp programming instructions and their corresponding robotic actions  after the whole group activities  children built and or programmed their own robotic vehicles  the children worked independently on their projects but sat in groups of four and received support as needed from the research assistant or classroom teacher at their group while also interacting with their peers  with the variety of coders evaluating children s work  we systematically accounted for potential intercoder differences by varying which adult worked with which children during each lesson  each session s work ended with a group discussion for children to share progress  questions  and successful strategies  and for the teacher to help reinforce the core robotics and programming concepts and the engineering design process  to assess learning outcomes after each activity  research assistants evaluated the robot and or program made by each child  they assessed the child s level of understanding of selected core concepts as seen by successful application of the concepts in the robot or program  if needed  they also talked with children to gain more information about their work and understandings  by examining  for instance  the child s program for correct selection and sequencing of action instructions or proper use of the  repeat  instruction  research assistants scored each child s achievement of the core goals of the lesson using the following   point likert scale designed to document the thoroughness of the child s understanding and application of activity specific concepts and skills as well as their use of general problemsolving skills  a score of   or higher was defined as the target level of achievement    complete achievement of the goal  task  or understanding   mostly complete achievement of the goal  task  or understanding    partially complete achievement of the goal  task  or understanding    very incomplete achievement of the goal  task  or understanding    did not complete the goal  task  or understanding    did not attempt other  in each lesson  children were scored on multiple concepts using this likert scale  for example  in lesson    children programmed their robots to dance the  hokey pokey  by    choosing the correct instructions  a skill referred to here as correspondence  and    putting the instructions in the correct order  sequencing   the concepts of sequencing and correspondence are described in more detail in sections       and        as an illustration of the general scale  children received one point on the correspondence scale for each programming instruction that correctly matched a line of the song  below are examples of children s programs that were scored at each level of correspondence in lesson      begin  forward  backward  forward  shake  spin  end  all correct     begin  forward  forward  forward  shake  spin  end  second forward should be backward     begin  forward  backward  shake  end  missing forward and spin     begin  shake  spin  end  missing forward  backward  forward    begin  shake  end  missing forward  backward  forward  and spin     despite assistance and prompting  the child did not attempt hokey pokey task  these same programs also received a     score for sequencing in lesson         variables examined to examine children s growing computational thinking ability throughout implementation of the tangiblek curriculum  four key variables were observed and assessed  debugging  correspondence  sequencing  and control flow         debugging when faced with a difficult problem or task  children  and adults  are often unable to determine a suitable solution on the first attempt  in these situations   debugging  skills can be helpful  debugging  or trouble shooting  is a form of problem solving used in the fields of engineering and computer science  it encompasses four steps     to debug a problem  the child must first recognize that something is not working or not meeting the stated goal  for example  a child programming her robot to dance the hokey pokey in lesson   watches her program running and realizes that the robot does not  shake it all about      in step   of the debugging process  children either decide to keep their original goal or switch to an appropriate alternative  this child might continue to pursue the original plan of making the robot dance all the parts of the hokey pokey  or  as is common at this age  she might come up with an alternative  such as having their robot do a different dance     the third stage of debugging is generating a hypothesis as to the cause of the problem  the child in our example may hypothesize that the program is missing an instruction that would make their robot shake     finally  the last aspect of debugging is attempting to solve the problem  the child might put a  shake  block in different positions in the program until the program fully matches the song  debugging skills are not limited to the arena of engineering and computer science  previous research has found that children can acquire and transfer debugging skills to activities outside of the programming context with appropriate support  including explicit instruction  klahr   carver        salomon   perkins         the steps of the debugging process are a critical component of the engineering design process  which refers to the cyclical or iterative process engineers use to design an artifact in order to meet a need  massachusetts department of education         as defined by the ma curriculum frameworks  its steps include  identifying a problem  looking for ideas for solutions and choosing one  developing a prototype  testing  improving  and sharing solutions with others  see fig      the steps of testing and improving  which require debugging  are particularly important in establishing a learning environment where failure   rather than immediate success   is expected and seen as necessary for learning  with the engineering design process  children are not expected to  get it right  the first time  m u  bers et al    computers   education                       in the tangiblek curriculum  debugging and the engineering design process were first introduced in lesson    and the concepts and skills were applied throughout the rest of the curriculum  children were assessed on their ability to apply the four core aspects of debugging  described above  in each lesson and final project         correspondences between actions and instructions a program is a sequence of instructions that a computer  in this case  a robot  acts out in an order specified by the programmer  stair   reynolds         each instruction has a specific meaning  and the order of the instructions leads to the robot s overall actions  making correspondences between actions and instructions encompasses the understanding that each programming instruction represents a specific action carried out by the robot  another way to understand the process of correspondence is to frame it with the notion of symbols  a core concept that children are learning in kindergarten in both math and literacy  each programming instruction is a symbol for the action the robot will carry out  in order to program a robot s behavior  children must understand in general that people use symbolic language to communicate with computers  and they must select specific instructions to accurately represent their intended outcome for the robot s behavior  correspondence was first introduced in lesson   of the curriculum  when students choose and sequence programming instructions to make a robot dance the hokey pokey  accomplishing this task requires children to identify the corresponding programming instruction for each line of the  robot hokey pokey  verse dance  for example  a child who understands the correspondence between actions and instructions would find the programming instruction block with the  shake  symbol to recreate the line in which the robot  shakes it all about   to measure correspondence  children were assessed on how many of the correct instructions they chose         sequencing instructions sequencing is a component of planning  and involves putting objects or actions in the correct order  zelazo  carter  reznick    frye         to create a successful program  children must use procedural thinking and plan their programs in terms of a sequence of what happens next  before  or until another action  pea   kurland         in both literacy and mathematics  sequencing is essential  for putting phonemes  letters  words  or elements of a formula in the appropriate order  neuman   dickinson         prior research with the tangiblek project showed that children who participated in the program earned significantly higher scores on a test of story sequencing than children who did not  kazakoff   bers        kazakoff  sullivan    bers         in this curriculum  children were first introduced to the idea of sequencing instructions in lesson   s  hokey pokey  challenge  described above   sequencing was also a core component of lessons      in which children had to properly arrange action instructions and increasingly complex control flow instructions in the correct order to achieve particular outcomes in the robot s behavior         use of control flow instructions  control flow  refers to the concept that programmers can control the order in which a robot follows the instructions in its program through various programmatic methods  this curriculum introduced children to control flow instructions and parameters  control flow instructions allow the robot to carry out instructions non sequentially  e g   in a loop  or only under certain conditions  for example  a cherp program can include a  repeat  control flow instruction in the following way   begin  forward  repeat   shake  end repeat  sing  end   to make the robot shake three times and then sing once  with the attachment of a light or touch sensor to the robot  sensor parameters can also be used to qualify the control flow instructions based on environmental stimuli  for instance  a child can program a robot to carry out an action or set of actions only  if  the environment is  dark  or  if light   and another set of actions  if not  light dark    while there are currently no curriculum frameworks explicitly addressing control flow  these activities connect to mathematics  by reinforcing number sense and estimation  or to natural science  by comparing human and animal sensory functions with robot sensors  children are also able to compare and contrast repeating or looping programs to patterns  cyclical events in the natural world  and calendar time  children were assessed on their correct use of control flow structures in lessons     and the final project     results this section presents and compares children s achievement on programming and debugging concepts and other skills taught using the tangiblek robotics curriculum  since the focus of this work is on computational thinking in a robotic context  the assessments presented here evaluate programming concepts instead of robotics knowledge  children s work in each introductory lesson was assessed for two relevant programming concepts  these concepts  seven in total  were reassessed in the final project  additionally  four debugging skills were assessed in all lessons and the final project  each measure uses the likert scale shown above  which ranges from    did not attempt the task  or    did not complete the goal  task  or understanding  to    completely achieved the goal  task  or understanding   analysis was conducted by aggregating scores from all classrooms and using paired sample t tests to compare scores on each concept from one lesson to the next  findings are grouped by the powerful idea to which they relate  note that the teacher in classroom   chose not to formally teach activity    so data for that activity s items come only from two classrooms  a discussion about this choice is provided later in the paper       debugging average scores on the various debugging measures fell in the range of partial to mostly complete understanding and application of the skill  see table     there was little variation in debugging scores between consecutive activities  see fig      with the exception that the average score on keeping the original goal was higher in activity   than in activity    marked in table     in other words  children s ability to keep working on the original goal  or choose an acceptable alternative  was higher in activities that did not require the use of sensors and sensor parameters  scores on the other three components of debugging remained steady in the mid to upper range of the achievement scale across lessons      m u  bers et al    computers   education                   repeated measures anova analyses  see table    were run for the four debugging skill variables across activities  the analyses were run across all seven activities  or in the case of debugging skill    across the four activities where this skill was assessed   in addition  a separate repeated measures anova was run for each debugging skill variable for just activities     since once classroom did not participate in lesson   and the project lesson was unstructured  average debugging score did not vary significantly across activities when all lessons were considered  however  when removing the challenge activity and lesson   where one class did not participate  a repeated measures anova for each debugging variable did show a change across time  meaning there was  perhaps variation in debugging score across the more structure lessons  but  this variation averaged out when children worked on their own projects       powerful ideas of programming in activities   through   and in the culminating project  students completed specific programming challenges and were assessed on their ability to select instructions and put them in the order that would result in the goal behavior for the robot  activities     also used special  control flow  instructions  which can tell the robot to loop through a set of actions repeatedly or to follow one  branch  of instructions or another based on sensor data         choosing the correct programming instructions the overall mean score on students  abilities to choose the correct instructions started off high in activity    scores then dropped  on average  over activities   through    and returned to starting levels in the project  see table   for detailed means   as mean scores fell to statistically significantly lower levels in activity   and again in activity    the percent of students reaching the target level of achievement also dropped  seventy six percent of students achieved in the target range on choosing programming instructions in activity    which used only action instructions  in activity    which introduced the first of the control flow instructions      of children achieved the target level  as did only     in activity    which added the use of sensors and sensor parameters  and     in activity    which used a second  more challenging type of control flow instruction  however      of children reached the target level of achievement on their projects   a similar rate to that in lesson    the first activity to require choosing programming instructions  see fig             control flow by sequencing sequencing ability was also introduced in activity    along with making correspondences between intended robotic actions and programming instructions  when children made their robots dance the  hokey pokey   three quarters of all students achieved in the target range in this first programming activity  sequencing was also a core component of activities      in which children had to properly arrange table   student scores on debugging  debugging step   debugging step   debugging step   debugging step   n mean sd n mean sd n mean sd n mean sd activity                                                       activity                                                       activity                                                       activity                                                        activity                                                         activity                                                       project                                                       note  classroom   did not do activity     denotes significant differences in the mean scores of the paired items at the p        level  for debugging step   between activities   and    t            and p         for debugging step   between activity    the last activity completed by all classes  and the project  t            and p         for debugging step   from activity   to the project  t            and p         fig     mean achievement on debugging across activities  average debugging scores for each activity and project  all four debugging components appear to follow a similar trend  but only the scores for keeping the original goal and attempting to solve the problem had statistically significant changes  m u  bers et al    computers   education                       both actions and increasingly complex control flow instructions in the correct order  in these activities            and     of children  respectively  achieved at the target level  fewer children were able to reach the target level of achievement for sequencing in these activities than in activity    a comparison of mean scores on sequencing from one activity to the next revealed a statistically significant drop between activities   and    differentiating programs with actions only from those requiring two part control instructions as well  see table     as was seen with correspondence scores  the average sequencing score on children s projects was statistically significantly higher than the average score in activity    see fig             control flow by special instructions activities     each introduced a new control flow instruction for creating looping or branching programs  students  on average  achieved a  partially  complete understanding of the concepts  see table   for detailed means   less than     of students reached the target   mostly  complete  level of understanding on all but one of these measures   this degree of understanding was reached by     for looping      for numeric parameters      for sensor parameters      for the first half of the conditional statement  and     for the second half of the conditional statement   there were no differences in average scores found between looping and conditional instructions or comparing the different types of parameters  see fig      the only statistically significant difference in scores was between the two parts of the conditional statement   if  versus  if not    that is  children were  on average  more comfortable making the programming equivalent of the statement  if it s dark out  turn the light on  and less comfortable appending  if not  turn the light off  to that first statement       comparison of concepts between activities and projects differences in children s achievement on each of the above concepts from the introductory activities to the culminating projects were examined in two ways  first  children s scores from activity    the last activity completed by all classes  were compared to children s scores on the final project  this continued the comparison of scores on consecutive activities  secondly  scores from the first activity that introduced a particular concept were compared to corresponding scores from the final project  for example  sequencing scores from activity    the first activity using that concept  were compared to sequencing scores on the final project  this comparison was done to address how children s scores on the same concepts might change with time and exposure  we should note that due to the self selected nature of the final projects  not all children employed every concept to complete them  so n is relatively lower on these comparisons  there were some statistically significant increases in scores from the final introductory activity completed by all classrooms to the culminating projects were seen on two overarching programming concepts  choosing the correct instructions  see table    and sequencing the instructions to accomplish the goal  see table     as well as on two elements of debugging  see table     sticking with the original goal or choosing an acceptable alternative and taking steps to attempt to solve the problem  in fact  after these scores had dropped over the course of the activities  they returned to starting levels in the final projects  as described in the relevant sections above   table   repeated measures anovas by debugging steps  a repeated measures anova was conducted to see if there was a significant difference in means of debugging level over time  all possible activities without lesson   or project df f p df f p debugging step   sphericity assumed                                         debugging step   greenhouse geisser correction                                        debugging step   greenhouse geisser correction                   sphericity assumed                      debugging step   greenhouse geisser correction                   sphericity assumed                      notes  classroom   did not do activity    the project was open ended  children could choose to use less difficult blocks     denotes significance at the p        level  table   student scores on selecting programming instructions  selecting instructions comparison to subsequent activity n mean sd activity df t p activity                       activity                               activity                                activity                               project                              a               note  classroom   did not do activity      denotes significance at the p        level   denotes significance at the p        level  a this comparison was made as an alternative to the activity   to project comparison as it was the last activity completed by all three classrooms prior to the project      m u  bers et al    computers   education                   it was anticipated that the children s scores on the same concepts might increase with exposure  so comparisons were made between children s score on a concept in the activity that introduced it and the score on that same concept in the final project  however  there were no statistically significant differences seen in any such comparisons  see table     in summary  many children in each class reached the target level of achievement on the programming tasks over the course of the curriculum s six activities and culminating project  in the first three activities  which introduced the engineering design process  robotics  and programming  children s levels of achievement were particularly high       on average  reaching target level of achievement   in activities      which introduced more sophisticated concepts and programming instructions  fewer children       on average  attained the same level of understanding  many children achieved high scores on properly selecting and sequencing instructions when the programming activities involved only action instructions  w    for both skills  and in the final projects  achievement was comparatively lower in activities which involved the conceptually and functionally more complicated control flow instructions and or sensors      for both skills   programs that use special control flow instructions visually appear linear  but the robot does not carry out one action per programming block  as it does with a program containing only actions instructions  the logical flow of the program may be a loop or forked path rather than a line  this introduces a conceptual complexity to programming with control flow instructions that does not exist with action instructions alone  similarly  it appears based on relative scores that using the  if  instruction was simpler than using the  if not  instruction      versus     target achievement   the complexity of each programming concept appears to be reflected in the portion of students who reached target levels of understanding     discussion the results provide critical information on the accessibility of selected concepts from the fields of robotics and computer science for kindergarten children  adding clarity to developmentally appropriate learning expectations in order to revise and improve both the curricular activities and design features for early childhood robotics and programming technologies  the results also shed light on some of the challenges of conducting design based research in a classroom setting  one interesting feature of the results is the trend of decreasing achievement scores across lessons      this is possibly related to the amount of time spent on each topic  each activity in the curriculum introduced a progressively more challenging concept than the activity before it  in the later lessons  children were asked to build on concepts they had only recently learned  while each lesson was carefully designed to teach a particular topic and provide a space for exploration of it  these concepts may not have been fully ingrained or mastered yet while new material was introduced  this could also help explain lower scores in the later lessons  another interesting result relates to the several concepts for which children s average achievement scores increased from the final introductory lesson to the culminating project  with statistical significance  children averaged higher scores on choosing and sequencing fig     mean achievement on choosing and sequencing instructions average scores for choosing and sequencing programming instructions according to the goal  the dip on both choosing instructions  marked with    and sequencing them  marked with    at activity   represents significantly lower scores as compared to activity   and the project  the drop in score for choosing instructions at activity   is also statistically significant  table   student scores on using sequencing for control flow  sequencing instructions comparison to subsequent activity n mean sd activity df t p activity                       activity                                activity                               activity                               project                              a              note  classroom   did not do activity      denotes significance at the p        level   denotes significance at the p        level  a this comparison was made as an alternative to the activity   to project comparison as it was the last activity completed by all three classrooms prior to the project  m u  bers et al    computers   education                       instructions during the final project than in any introductory activity except the first  and simplest  programming activity  while assistant from adults remained stable throughout all aspects of the curriculum and final projects  some other circumstances were different in the project compared to the lessons  the improved scores might be attributed to the fact that children had more enthusiasm for these personally selected projects that would soon be part of a show and tell celebration as well as more time to experiment at their own pace than in the lessons  alternatively  assuming children chose projects well matched to their level of expertise  it would be reasonable to expect higher demonstrated levels of achievement as their projects likely focused on concepts children already felt more comfortable using  however  there were no statistically significant differences seen in comparisons of control flow instruction and sensor related measures between the activity that introduced each concept and the culminating project  it is possible that even more time exploring these concepts was needed for significant learning gains to occur  surprisingly  children did not always perform better on simpler concepts than on more complex ones  for example  the lack of statistically significant differences between children s understanding of looping versus conditional programs and between numeric versus sensor parameters is unexpected both theoretically and based on anecdotal observations of these activities by researchers present during the activities  the concepts associated with looping and numeric parameters should  in principle  be more straightforward than those involved in programming with conditional statements and sensor parameters  thus  at least somewhat higher levels of achievement on looping and numeric parameters had been expected compared to conditional statements and sensor parameters  in some of the comparisons described above  the low n  less than half the overall study sample size  may have impacted the results  the statistically significant findings may have varied if  for instance  the students for whom researchers could not collect data tended to have above  or below average achievement levels  as the activities in the curriculum increased in difficulty  the research assistants tended to provide increased support for children with questions  leaving less time to equally observe and assess all children  in fact  it was also observed that some children who perceived an activity to be difficult refrained from attempting it  resulting in no achievement scores for that activity and a lower n on those measures       curriculum discussion while it is beyond the scope of this paper to fully evaluate the tangiblek robotics curriculum  results indicate that the curriculum was generally engaging and developmentally appropriate for kindergarten students  results point to kindergarten teachers being able to effectively implement the curriculum and to kindergartners being both interested in and able to learn and apply many aspects of robotics  programming  and computational thinking  however  the fact that fewer children achieved the target level of understanding on more complex topics than on the introductory concepts might indicate that the curriculum should devote more time for children to build up to and fully explore the complex material in order to fully understand it  in order to test this  a new iteration of the curriculum is currently table   student scores on using special instructions for control flow  control flow instructions comparison to analogous concept n mean sd concept df t p looping instruction                     numeric parameters                     sensor parameters              numeric parameters              conditional  if               looping instruction              conditional  if not               conditional  if               looping instruction              note  classroom   did not use conditional statements   denotes a statistically significant difference at the p        level  fig     mean achievement on control flow concepts  a comparison of average scores for the different types of control flow instructions and parameters  the only significant difference in scores was between the two conditional instructions  marked with         m u  bers et al    computers   education                   being developed that will divide the prior curriculum based on action and sensing  and expand the number of lessons and amount of time spent exploring each topic  particularly the more complex ones  in both structured and free play based formats to provide further opportunities for students  investigation of concepts and to reinforce their learning  additional supporting activities will also be added  kindergarteners vary widely in their levels of cognitive development and learning abilities  and such adaptations to the tangiblek curriculum may address this range even more than the current format already does  the results also demonstrate the complexity of assessing sophisticated learning processes in a classroom setting  there was a necessary trade off built into the study design  gathering an adequately detailed picture of children s learning had to be balanced with keeping data collection feasible given that each adult was working with several children in the context of a full classroom  in some cases  particularly the later activities   a different setting  such as individual child sessions  may have provided a better context for some students to demonstrate their abilities  however  the goal of the study was to examine the tangiblek program in a typical kindergarten classroom  and this endeavor was successful  although ultimately some data could not be collected from every student on every measure  information was gathered about the reality of implementing the curriculum in classroom settings and the supports necessary to meet the needs of all students       limitations of the study and future directions the tangiblek curriculum was taught during regular school hours in three schools in the greater boston area  there were both benefits and drawbacks to conducting research in a school setting rather than an experimental setting  by testing the curriculum as taught by kindergarten teachers  in both public and private schools  we have demonstrated that  given professional development in robotics education  a dedicated teacher can successfully teach this content in her or his own classroom  however  as with any study that takes place in a school setting  the present study faced several environmental limitations  while each of the participating teachers taught the same curriculum  it is impossible to control for all teacher  classroom  and school variations that may have influenced results  for example  the three teachers in this study were very different from one another  while some teachers allowed their class to work through difficult concepts on their own  others gave more step by step instructions  teachers were given leeway to teach the curriculum in whatever way they believed best suited the needs of their classrooms  however  this causes methodological issues for data analysis  further research should be conducted with a focus on how teaching styles and classroom culture serve to enhance or hinder a robotics curriculum  fig     an illustration of the engineering design process  table   students scores on concepts in culmination project  project scores comparison to introductory activity n mean sd   scoring    activity df t p choosing instructions                                  sequencing                                  repeats                                  numeric parameters                                  sensors                                  sensor parameters                                  ifsa                      if               note  classroom   did not do activity    a there was no separate measure for using  if not  instructions in the projects  m u  bers et al    computers   education                       another drawback the study encountered was a fluctuating number of daily participants  children were fairly regularly absent  temporarily out of the classroom  or otherwise unable to participate in the class  other times  the busy classroom and divided adult attention prevented assessments from being collected for all children  particularly if an assessment required long and sustained periods of observation  teacher differences also impacted the low number of participants in some activities  for example  one teacher chose not to teach lesson   in order to have more time to review previous concepts before the final project  drastically lowering the n for that lesson  further research should be done expanding the scope of this study by gathering more participants and  if possible  ensuring more consistent completion of each activity  the present study inspires additional research agendas  while the focus of this work is on kindergartners  further investigations should look at the way younger  prek k  and older   st  nd grade  students are able to learn and apply the same powerful ideas  it would be important to determine whether some of the concepts that were particularly challenging to the kindergartners in this study pose less of a challenge with longer exposure or if introduced when children are older  further research will also expand the overall sample size as well as the age and experience range of the sample  other work should attempt to assess the feasibility of implementing this curriculum for a classroom teacher with typical support staff  that is  with minimal involvement of research assistants except for training teachers and conducting data collection  in the present research  participating teachers each had about three trained assistants in the classroom to help troubleshoot technology issues  assess the children s progress  and provide one on one help as needed  for this curriculum to become widespread  it will be necessary to know more about what supports teachers need  modifications to the curriculum  classroom management alternatives  additional adult support  etc   to successfully implement the curriculum  finally  it is beyond the scope of this current study  but a follow up study could look at longitudinal or transfer effects of the tangiblek curriculum  what concepts do the students retain  how is computational thinking having an impact in other areas of their academic and extra curricular lives  are children able to apply the engineering design process to other subject areas after completing this curriculum  further research should look at the long term benefits of incorporating programming and robotics into early childhood education  it is important to note that many of the challenges that arose as part of the present study were posed by the robotics hardware itself  and not the curricular activities  this highlights the importance of making developmentally appropriate hardware and software specifically designed for young children  results show that for the children in this study  correctly connecting robotic parts proved more challenging than understanding the function of each part or the underlying computational concept  this result is not surprising since the cherp programming interface and the curricular activities introducing the robot s parts and their purposes were specifically developed for kindergartners as part of this research project  while the robotics kit hardware was designed for older children as part of a commercially available lego product  furthermore  children spent a significant amount of time fixing their robots  which came apart frequently  it was challenging for many children to assemble some of the pieces on their own  and they needed adult help  if children had spent the robot repair time working on their computer programs instead  and if teachers were able to spend that time providing support for learning the central concepts rather than helping re build robots   perhaps children would have attained higher levels of achievement in their understanding of complex powerful ideas involved in computational thinking  the findings from this study have informed the tangiblek project  in which early childhood teachers  pre kindergarten through  nd grade  will systematically implement a robotics curriculum revised according to several of the points outlined above  the teachers will document their experiences and their students  learning outcomes over the course of a school year using kiwi  a developmentally appropriate robotics hardware that will replace the lego hardware used in this current study  despite the limitations of the study described in this paper  post study data collected from the teachers speaks to the success of the tangiblek robotics program  all the teachers said they would participate in tangiblek again if given the chance  along with the general success and enthusiasm of the children  this feedback highlights the overall positive and educational nature of the experience     conclusion the early childhood classroom is not typically a place where we expect to find students programming robots  yet  with the availability of developmentally appropriate technologies  this is increasingly possible  and the result may be the advancement of technological fluency in our nation s youth  this paper explored the tangiblek robotics program as a viable option for classroom teachers to integrate developmentally appropriate technology education into the early childhood classroom  with cherp  children spend their time building a robot  planning its actions  using physical wooden block or the computer screen to construct programs  and iteratively improving the robot and programs according to initial goals and subsequent discoveries  because the tangible programs and robots exist off screen  children are drawn to investigate the work of other children  work collaboratively  and negotiate sharing materials  as well as develop their fine motor skills  these artifacts serve as points of discussion and reminders of the activity content even after the computer has been turned off  as the analysis presented in this paper has explored  in this rich process of creation in both the physical and digital worlds  children actively engage in problem solving and learn powerful ideas from computer science and robotics  including core concepts of computational thinking  research is essential to understanding the impact of new technologies on the development of children and how children are using and could be using these tools  as parents  educators  policymakers  and researchers it is our responsibility to ensure our children receive the technological education needed for healthy development and a successful future  the tangiblek robotics program introduced in this paper shows that when given age appropriate technologies  curriculum and pedagogies  young children can actively engage in learning from computer programming as applied to the field of robotics  they can then take their first steps into developing computational thinking  acknowledgments the tangiblek project was supported by national science foundation  nsf  drl          any opinions  findings  and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the national science foundation  the authors would like to thank participating schools and teachers for their commitment to and participation in this project      m u  bers et al    computers   education                   references barron  b   cayton hodges  g   bofferding  l   copple  c   darling hammond  l     levine  m          take a giant step  a blueprint for teaching children in a digital age  new york  the joan ganz cooney center at sesame workshop  barr  v     stephenson  c          bringing computational thinking to k     what is involved and what is the role of the computer science education community  acm inroads               http   dx doi org                          bers  m  u          blocks  robots and computers  learning about technology in early childhood  new york  teacher s college press  bers  m  u          beyond computer literacy  supporting youth s positive development through technology  new directions for youth development              bers  m  u          designing digital experiences for positive youth development  from playpen to playground  oxford university press  bers  m  u     horn  m  s          tangible programming in early childhood  revisiting developmental assumptions through new technologies  in i  r  berson    m  j  berson  eds    high tech tots  childhood in a digital world  pp          greenwich  ct  information age publishing  bers  m  u   ponte  i   juelich  k   viera  a     schenker  j          teachers as designers  integrating robotics into early childhood education  information technology in childhood education  cejka  e   rogers  c     portsmore  m          kindergarten robotics  using robotics to motivate math  science  and engineering literacy in elementary school  international journal of engineering education                  clements  d  h     gullo  d  f          effects of computer programming on young children s cognition  journal of educational psychology                    http   dx doi org                               clements  d  h     meredith  j  s          research on logo  effects and efficacy  retrieved from http   el media mit edu logo foundation pubs papers research logo html  cobb  p   confrey  j   disessa  a   lehrer  r     schauble  l          design experiments in educational research  educational researcher               gelman  r     brenneman  k          science learning pathways for young children  early childhood research quarterly  special issue on early learning in math and science                   horn  m  s   davis  p   hubbard  a   keifert  d   leong  z  a     olson  i  c   june        learning sustainability  children  learning  and the next generation eco feedback technology  in proc    th international conference on interaction design and children  short paper   ann arbor  mi  international society for technology in education          nets for students      profiles  washington  dc  iste  retrieved from www iste org standards nets for students  nets for students      profiles aspx pk    international society for technology in education and the computer science teachers association          operational definition of computational thinking for k    thinkingoperational definition flyer pdf  international society for technology in education and the computer science teachers association  kazakoff  e     bers  m          programming in a robotics context in the kindergarten classroom  the impact on sequencing skills  journal of educational multimedia and hypermedia                  kazakoff  e   sullivan  a     bers  m          the effect of a classroom based intensive robotics and programming workshop on sequencing ability in early childhood  early childhood education journal                  klahr  d     carver  s          cognitive objectives in a logo debugging curriculum  instruction  learning  and transfer  cognitive psychology               lee  i   martin  f   denner  j   coulter  b   allan  w   erickson  j   et al          computational thinking for youth in practice  acm inroads               massachusetts department of education          massachusetts science and technology engineering curriculum framework  retrieved from  massachusetts department of education http   www doe mass edu frameworks scitech      pdf  naeyc   fred rogers center for early learning and children s media          technology and interactive media as tools in early childhood programs serving children from birth through age    joint position statement  washington  dc  naeyc  latrobe  pa  fred rogers center for early learning at saint vincent college  retrieved from www naeyc  org files naeyc file positions ps technology web  pdf  neuman  s  b     dickinson  d  k   eds            handbook of early literacy research  new york  guilford press  papert  s          mindstorms  children  computers and powerful ideas  new york  basic books  papert  s          what s the big idea  toward a pedagogy of idea power  ibm systems journal                      http   dx doi org         sj           pea  r  d     kurland  d  m          on the cognitive effects of learning computer programming  new ideas in psychology                 http   dx doi org                  x             perlman  r          using computer technology to provide a creative learning environment for preschool children  logo memo no     cambridge  ma  mit artificial intelligence laboratory publications  piaget  j          the construction of reality in the child  new york  basic books  resnick  m          playful learning and creative societies  education update        retrieved from http   web media mit edu wmres papers education update pdf  rogoff  b   goodman turkanis  c     bartlett  l          learning together  children and adults in a school community  new york  ny  oxford university press  salomon  g     perkins  d  n          transfer of cognitive skills from programming  when and how  journal of educational computing research              sesame workshop          sesame workshop and the pnc foundation join white house effort on stem education  retrieved from http   www sesameworkshop org  newsandevents pressreleases stemeducation           stair  r  m     reynolds  g  w          principles of information systems   th ed    boston  ma  course technology   itp  u s  department of education  office of educational technology          transforming american education  learning powered by technology  washington  dc  u s  department of education  office of educational technology  retrieved from http   www ed gov technology netp       white house          educate to innovate  retrieved from http   www whitehouse gov issues education educate innovate  wyeth  p          how young children learn to program with sensor  action  and logic blocks  international journal of the learning sciences                  zelazo  p  d   carter  a   reznick  j  s     frye  d          early development of executive function  a problem solving framework  review of general psychology                 zigler  e  f     bishop josef  s  j          the cognitive child vs  the whole child  lessons form    years of head start  in d  g  singer  r  m  golinkoff    k  hirsh pasek  eds    play   learning  how play motivates and enhances children s cognitive and social emotional growth  pp          new york  ny  oxford university press  m u  bers et al    computers   education                       
computers in human behavior xxx  xxxx  xxx please cite this article as  charoula angeli  michail giannakos  computers in human behavior  https   doi org         j chb             available online   november                       elsevier ltd  all rights reserved  computational thinking education  issues and challenges article info keywords computational thinking digital competences coding technological fluency algorithmic thinking robotics abstract computational thinking is a term applied to describe the increasing attention on students  knowledge development about designing computational solutions to problems  algorithmic thinking  and coding  it focuses on skills children develop from practicing programming and algorithms  and enables the development of qualities such as abstract thinking  problem solving  pattern recognition  and logical reasoning  contemporary educational and infrastructural developments  like  cs for all   https   www csforall org    iste s standards for students in computational thinking  https   www iste org explore solutions computational thinking for all article id       computer science teachers association s concepts of computational thinking  http   advocate cst eachers org            computational thinking and beyond    and the appearance of tools such as robotics   d printing  microprocessors  and intuitive programming languages posit computational thinking as a very promising area to support these learning competences  in this special issue of computers in human behavior  the editors report four studies conducted by interdisciplinary teams  the introduction to the special issue also draws attention to the great potential and need for further research in the area of computational thinking education to engage students in meaningful learning so as to develop useful thinking skills and digital competences  finally  the editorspropose directions for future research and practice in computational thinking education     introduction computational thinking  ct   a term used since the     s  describes the notion of using structured thinking or algorithmic thinking to produce appropriate output to a given input  denning         recent efforts to revitalize the importance of ct aim at democratizing computing knowledge as an important body of knowledge that learners need to have in order to cope well with the challenges of the   st century  in       wing relaunched the term and interest in the area by defining ct as a process that involves solving problems  designing systems  and understanding human behavior  by drawing on the concepts fundamental to computer science  wing         this definition has been adopted widely due to its generic nature  but also created a need for a more specific definition that can be used in ct education  csta   iste        selby   woollard         during the last years  there has been an increasing interest about ct education in k    schools  and its role in children s acquisition of thinking skills and digital competences  in accordance with this need  computational thinking and coding have  in recent years  become an integral part of school curricula in many countries  estonia  israel  finland  and the united kingdom are only a few examples of the growing efforts of governments to integrate coding as a new literacy and to support students in creative problem solving tasks  hubwieser  giannakos  berges  brinda  diethelm  magenheim   jasute         in addition  computer science teachers association  csta         international society for technology in education  csta   iste         cyber innovation center  https   cyberinnovationcenter org    and national math and science initiative  https   www nms org   have developed conceptual guidelines for ct education  similarly  organizations such as  codeacademy com  offer learning environments to promote coding activities and ct education  while it is well accepted in the literature that ct involves a number of skills  like problem decomposition  breaking down complex problems to simpler ones   developing algorithms  step by step solutions to problems   and abstraction  there is still limited evidence around the several issues and challenges someone needs to be aware of in order to design appropriate learning experiences for ct competences  in the issue herein  the editors present four research studies covering different aspects of ct research  and  discuss challenges for both research and practice in ct education as well as raising important new research questions for the researchers in the field     the contributions in the special issue while ct is an area of growing significance  scholarly work on ct is emerging  both conceptually and empirically  in response to the need for accelerating research foundations and developments in ct education  computers in human behavior presents a special issue that disseminates the latest research findings  the special issue consists of four contributions addressing the topic of ct from different perspectives and disciplinary backgrounds as well as covering different research areas and needs  the articles provide insights about  a  the importance of metaphors in ct education  b  putting into practice ct activities to empower both girls and boys  c  the importance of employing empirical contents lists available at sciencedirect computers in human behavior journal homepage  http   www elsevier com locate comphumbeh https   doi org         j chb             computers in human behavior xxx  xxxx  xxx   experimentation in furthering ct education research and d  the development of young children s ct skills using scaffolds and educational robotics       embodied metaphors for computing education in the first article  manches  mckenna  rajendran  and robertson        this issue  investigated elementary computing concepts using metaphors through the lens of embodied cognition  a metaphor is a figure of speech that describes an object or action that is not literally true  but helps to explain an idea or make a comparison  conceptual metaphors are extremely important in learning sciences  e g   energy transfer  thermodynamics  and mathematics   as they offer an explanation of our ability to think and reason about abstract concepts  manches et al  s analysis showed that participants drew upon two overarching embodied metaphors in their explanations  namely  a  computing constructs as physical objects  in which participants simulated manipulating physical objects  e g   pinching  when referring to a range of computing concepts  and b  computing processes as motions along a path  whereby participants moved their hands along one of three body based axes when referring to temporal sequences  the authors concluded that embodiment might shape students and teachers  ct understanding and learning  in addition  there may well be other examples of integrated metaphors that can be used to communicate the meaning of the construct of ct  and such representations will allow us to better support ct teaching and learning techniques as well as the development of technologies and interfaces  e g   embodied interfaces and interactions  for the teaching of ct       the use of metaphors to introduce children to programming the second article by p erez mar n  hijon neira    bacelo  and pizarro        this issue  further expanded on this notion of using metaphors to teach ct  within the context of computer programming  the authors put into practice a methodology called mecoprog using metaphors  such as  recipe program  pantry memory  and boxes variables  to teach programming following an empirical experiment with     primary education students between   and    years of age  their findings validated that coupling the use of metaphors with a block based programming environment  e g   scratch  has the potential to improve ct knowledge acquisition in primary education       learning strategies as a pathway for fostering ct in the third study  papavlasopoulou  sharma  and giannakos        this issue  designed and evaluated a workshop for k    students to learn how to code  the design and development of activities that successfully scaffolded ct concepts and motivated both boys and girls proved to be critical for the teaching and learning of ct skills  in this study  the goal was to examine differences between boys and girls  if any  using eye tracking as an objective measure and triangulating the findings with qualitative data coming from children s interviews  the results of their study showed no statistically significant difference between girls  and boys  gaze and learning gain during the ct activity  interestingly  the qualitative data showed differences in the strategies and implemented practices during coding  and in perceptions about those ct activities  the results provided objective evidence that female students did not lack in competences or behavior  based on their gaze data  compared to boys  but simply that they had a different approach strategy during ct activities and different perspectives about coding  thus  it s important if this approach is taken into consideration during the design of ct activities and assist girls in mastering ct concepts       children s computational thinking with educational robotics  an interaction effect between gender and scaffolding strategy the fourth study by angeli and valanides        this issue  examined the effects of learning with bee bot  a floor programmable robot  on young boys  and girls  computational thinking  it was hypothesized that scaffolding would play a significant role in the development of children s computational thinking skills during learning with bee bot  because bee bot does not provide a visual representation of the commands children use to program it  the two scaffolding techniques were designed taking into consideration gender differences  anticipating that both genders would benefit from at least one of the two techniques  the results showed statistically significant learning gains between the initial and final assessment of children s computational thinking skills  also  according to the findings  while both boys and girls benefited from the scaffolding techniques  a statistically significant interaction effect was detected between gender and scaffolding strategy showing that boys benefited more from the individualistic  kinesthetic  spatially oriented  and manipulative based activity with the cards  while girls benefited more from the collaborative writing activity  the research contributes to the body of knowledge that can be used to inform the teaching of computational thinking skills  in addition  the study has practical significance for curriculum developers  instructional leaders  and classroom teachers  as they can use the results of this study to design curricula and classroom activities with a focus on the broader set of computational thinking skills  and not only coding     challenges in computational thinking education  future research directions the findings from the studies suggest that in order to adopt ct as a powerful educational concept  researchers need to invest further systematic research efforts in addressing several issues related to       defining ct competencies for each school grade level or students  developmental level as the contributors in this special issue discussed  efforts have been made to define competencies  guidelines  and curricula for ct  e g   csta  iste   what is currently missing from the literature is how ct skills  such as abstraction  problem decomposition  and data structures  fig     a five step research plan for ct education  c  angeli and m  giannakos computers in human behavior xxx  xxxx  xxx   might map to different abilities  grade level  disciplines  gender  and educational level  thus  further work is needed in order to solve inconsistencies  denning        and to develop and validate a robust theoretical conceptualization about the construct of ct       the use of metaphors in teaching ct concepts efficiently and effectively according to manches et al         this issue  and p erez mar n et al         this issue  the use of learner centered metaphors enhance students  understanding and learning of ct concepts  while this special issue provides preliminary evidence about the importance of metaphors in teaching and understanding ct  more research is needed in order to create more metaphors that can be used effectively in teaching students and teachers about ct concepts       the use of pedagogical strategies and technologies in teaching ct the articles by papavlasopoulou et al         this issue  and angeli and valanides        this issue  point to the need to scaffold students  learning during their engagement with ct activities  and  the importance of alignment between teaching activity and gender  considering the fact that more and more student friendly programming environments  e g   alice  scratch  bluejay  greenfoot  kodu   hardware materials   d printers  educational robotics  and other initiatives  e g   code  org  codeacademy com  appear as means to promote ct education  future research needs to be undertaken to investigate the interrelationship between ct skills and competencies  ct representations  ct activities  ct tools  and ct teaching practices       teacher ct professional development for ct education to further develop  teachers need to be systematically prepared in terms of how to design ct learning activities  how to teach ct  how to assess ct  and how to use technologies to teach ct concepts  thus  teacher professional development programs need to be implemented for in service teachers  while at the same time teacher educators need to find ways to integrate the teaching of ct in their preservice courses for the better preparation of pre service teachers       assessment of ct competencies and skills lastly  as the articles in this special issue mentioned  the assessment of ct skills and competencies is well under developed  thus  there is a need for future research to identify ways about how ct can be assessed either as a holistic measure or as an array of sub skills within the context of authentic problem solving across all subjects and disciplines  accordingly  fig    presents a five step plan about how these five research areas can be addressed in future research studies  the five step plan is presented as a cycle  because it is expected that through intense research and practice progress in each area will inform one another and evolve over time  the first step tackles the definition of ct competencies in order to provide a baseline and common language across different contexts  e g   different countries  educational levels  school subjects  disciplines  etc   about the concept of ct  the next step is that of creating powerful metaphors as a mechanism for transforming abstract ct concepts to more concrete and easier notions to understand  the third step is to research the effectiveness of pedagogies and technologies in enhancing and enabling the development of ct competencies  the fourth step focuses on the crucial issue of preparing teachers and instructors to teach ct as well as integrate appropriate technological tools to enable the teaching of ct in their respective teaching contexts  lastly  the fifth step deals with the measurement and assessment of ct competencies  an area of research that is currently in its infancy  acknowledgements we would like to thank the reviewers of this special issue for their timely reviews  and the commissioning editor of computers in human behavior paul a  kirschner for his ongoing support and guidance during the preparation of the special issue  this work was partly supported by the comnplay science project  under the european commission s horizon      swafs         program  project number           references angeli  c     valanides  n          developing young children s computational thinking with educational robotics  an interaction effect between gender and scaffolding strategy  computers in human behavior  csta   iste          operational definition of computational thinking for k    education  available at  https   id iste org docs ct documents computational thinkingoperational definition flyer pdf  csta          operational definition of computational thinking  available at  http   www csta acm org curriculum sub currfiles compthinkingflyer pdf  denning  p  j          beyond computational thinking  communications of the acm                 denning  p  j          remaining trouble spots with computational thinking  communications of the acm                hubwieser  p   giannakos  m  n   berges  m   brinda  t   diethelm  i   magenheim  j     jasute  e          july   a global snapshot of computer science education in k    schools  in proceedings of the      iticse on working group reports  pp          acm  manches  a   mckenna  p  e   rajendran  g     robertson  j          identifying embodied metaphors for computing education  computers in human behavior  papavlasopoulou  s   sharma  k     giannakos  m          coding activities for children  coupling eye tracking with qualitative data to investigate gender differences  computers in human behavior  p erez mar n  d   hijon neira    r   bacelo  a     pizarro  c          can computational thinking be improved by using a methodology based on metaphors and scratch to teach computer programming to children  computers in human behavior  selby  c     woollard  j          computational thinking  the developing definitions  in proceedings of the   th acm technical symposium on computer science education  sigcse       acm  wing  j  m          computational thinking  communications of the acm                charoula angeli  university of cyprus  cyprus michail giannakos norwegian university of science and technology  norway   corresponding author  e mail address  cangeli ucy ac cy  c  angeli   c  angeli and m  giannakos 
by david barr  john harrison  and leslie conery computational thinking  a digital age the national science foundation has assembled a group of thought leaders to bring the concepts of computational thinking to the k    classroom  agroup of high school students cluster around a computer looking at a series of graphs and charts on the screen and talking quietly but intently  they are col  laborating with a group of students in south america using skype  together they have gathered data and created a model depicting the rate of defores  tation of the rain forests around the world  today they are discussing the changes they need to make to their data representation and algorithm before running their simulation  these students are engaged in what is called computational thinking  what is computational thinking  in a seminal article published in       jeanette wing described computa  tional thinking  ct  as a way of  solv  ing problems  designing systems  and understanding human behavior by drawing on the concepts fundamental to computer science   she noted that computational thinking involves some familiar concepts  such as problem decomposition  data representation  and modeling  as well as less familiar ideas  such as binary search  recur  sion  and parallelization  she also argued that  computational thinking is a fundamental skill for everyone  not just for computer scientists  to reading  writing  and arithmetic  we should add computational thinking to every child s analytical ability   wing s article gave rise to an often controversial discussion and debate among computer scientists  cognitive researchers  and educators regarding the nature  definition  and applica  tion of ct  while many people have proposed revisions and refinements to wing s original description  so far no single  widely accepted defini  tion of computational thinking has emerged  as a result  pk    educa  tors who recognize the importance of ct and want to help students ac  quire these skills have lacked a clear and practical definition to guide their work  how can we make ct accessible  in       the national science foun  dation  nsf  funded a project titled leveraging thought leadership for computational thinking in pk     led jointly by iste and the com  puter science teachers association  csta   the project is intended to make the concepts of computational thinking accessible to educators by providing an operational definition  a shared vocabulary  and relevant  age appropriate examples of com  putational thinking tied to current educational objectives and classroom practices  a year ago  the project convened a di  verse group of educators with an interest in ct from higher education  pk     and industry to help define a common language surrounding computational thinking  articulate the challenges and opportunities of integrating it through  out pk    education  and identify the most promising practices and strategies for moving computational thinking from concept to deep integration  from that meeting a consensus emerged regarding the essential elements of ct  its importance as a learning objec  tive for all students  and how it might be introduced into the pk    educational environment  the outcomes of the meet  ing were summarized and synthesized into a tentative  operational definition  of ct that is  a description of its compo  nents that educators can use to build ct skills across the curriculum through all grade levels and content areas  copyright         iste  international society for technology in education                   u s    canada  or                 int l   iste iste org  www iste org  all rights reserved     learning   leading with technology   march april       istockphoto com drafter    skill for everyone computational thinking is a problem  solving process that includes    formulating problems in a way that enables us to use a computer and other tools to help solve them   logicallyorganizingandanalyzing data   representingdatathroughabstrac  tions  such as models and simulations   automating solutions through algo  rithmic thinking  a series of ordered steps    identifying  analyzing  and imple  menting possible solutions with the goal of achieving the most efficient and effective combination of steps and resources   generalizing and transferring this problem solving process to a wide variety of problems these skills are supported and en  hanced by a number of dispositions or attitudes that are essential dimensions of ct  including    confidenceindealingwithcomplexity   persistence in working with difficult problems   tolerance for ambiguity   the ability to deal with open  ended problems   the ability to communicate and work with others to achieve a common goal or solution more than     of the     respon  dents agreed or strongly agreed that this definition captured the essential elements of ct  an additional    confirmed that the definition would do as a means to build consensus in the pk    community  on the basis of this survey and feedback from educators gathered through confer  ence presentations and other infor  mal data collection  project leaders have begun implementing the next phase of the project  which involves learn more to learn more about how to teach the concepts and vocabulary of computational thinking in pk    classrooms  please visit iste org computational thinking or the csta website at http   csta acm org  check back in a few months to find curriculm resources  vocabulary tools  and a toolkit for leaders  copyright         iste  international society for technology in education                   u s    canada  or                 int l   iste iste org  www iste org  all rights reserved  march april        learning   leading with technology    developing examples of what ct skills look like in the classroom as well as assembling resources to sup  port and guide the implementation of computational thinking concepts in pk    education  how is ct different  many of the concepts  skills  and dispo  sitions listed in this operational defini  tion are not new  so how is computa  tional thinking different from critical thinking or mathematical thinking  this question has given rise to much debate but  as yet  no widely accepted consensus  the participants in the workshops sponsored by the iste  csta project proposed that ct differs from critical thinking and mathemati  cal thinking because  computational thinking in the classroom here are some scenarios  developed by participants in the iste csta practitioners workshop  that illustrate how computational thinking concepts and skills play out in various grade levels and disciplines  in these examples  students are learning computational thinking skills in nontraditional settings so that they become internalized and can be easily transferred from one setting to another  these students are developing skills that can be applied in a variety of situations in other classes  in the workplace  in their hobbies from a variety of perspectives and in an authentic setting  as more and more teachers emphasize these skills  students will begin to apply them naturally in new and exciting ways  mr  davis  ninth grade language arts class is studying various literary elements  such as plot  point of view  irony  and voice  they have read a number of short stories and are wrapping up the unit  they are preparing to write essays that explore how a particular literary device plays a part in the essence and workings of the chosen stories  these students must state their theses clearly and include at least three pieces of evidence to support the theses  the skills of logically organizing and analyzing data necessary for proving a thesis with citations of strong and thorough textual evidence are also essential elements of computational thinking  the ct concept of representing data through abstractions of literary elements  such as plot structure  setting  figurative language  tone  and point of view  is also necessary to writing a coherent essay of literary analysis with a clear thesis statement  the ct ability to communicate and work with others to achieve a common goal or solution facilitates active participation in class discussions  especially those guided by a seminar question  as the students reflect on their unit and the skills that enable them to be effective writers  they begin making connections between the skills they are using in language arts and their application to other subject areas  ms  martinez s sixth grade social studies class is studying the roman empire  students will compare events in an ancient roman child s life to their own life experience by writing responses on the ancient roman life blog  they will also identify the lifestyle of ancient roman children and compare it to their own  the teacher calls attention to the vocabulary of  modeling  and  simulation  and asks students to reflect on other activities in which they have used these concepts and skills  she also asks them to reflect on where they might use them in the future  including their careers  these students are learning the computational thinking concepts of representing data through abstractions  such as models and simulation  and logically organizing and analyzing data  they are also exploring ways of transferring these skills to other contexts  ms  lee s seventh grade class is looking at a series of diagrams her students have created to portray floor plans of their school and homes  in the diagrams  each room is labeled as a node and each pathway out of the building is labeled as a route  students are discussing the options for escape routes in the event of a fire  as the students and ms  lee look over the diagrams  you hear a conversation among the students describing how the diagrams are an abstraction of the actual rooms in a home or school building that enables them to represent all the possible escape routes  the students are preparing to create an algorithm to calculate the safest and fastest routes from the buildings  mr  butler s fifth grade music class has been studying the diatonic scale and the concept of pitch  now the students are using scratch to create a virtual xylophone that will correctly reproduce the scale  through observation  the students recognize that each bar of the xylophone behaves in the same manner  but the pitch varies for each bar  these students are learning the ct concepts of representing data through abstractions as well as identifying  analyzing  and implementing possible solutions  additionally  they are experiencing the ct disposition of persistence in working with difficult problems  istockphoto com ildogesto istockphoto com mstay copyright         iste  international society for technology in education                   u s    canada  or                 int l   iste iste org  www iste org  all rights reserved     learning   leading with technology   march april        it is a unique combination of think  ing skills that  when used together  provide the basis of a new and pow  erful form of problem solving    it is more tool oriented    it makes use of familiar problem  solving skills such as trial and error  iteration  and even guessing in contexts where they were previ  ously impractical but which are now possible because they can be auto  mated and implemented at much higher speeds  why is ct important  the application of computer technolo  gy to virtually every field of study has changed the way work is done today  while the human mind is by far the most powerful problem solving tool we have  the ability to extend the pow  er of human thought with computers and other digital tools has become an essential part of our everyday lives and work  we all need to understand how  when  and where computers and other digital tools can help us solve problems  and we all need to know how to communicate with others who can assist us with computer supported solutions  students already learn many ele  ments of the set of computational thinking skills in a variety of disci  plines  but we need to ensure that all students have the opportunity to learn the complete set of skills so their com  bined power is available to them  the nsf iste csta project has explored how students learn computational thinking at all grade levels and in all disciplines  the long term goal is to recommend ways that all students have the opportunity to learn these skills and to ensure that they can be transferred to different problems and used in different contexts  david barr is a retired k    teacher and administrator who works as an educational tech  nology consultant  he serves on the iste nets leadership team and the steering com  mittee of the nsf iste csta computational thinking project  john harrison has taught math  ematics and computer science at princess anne high school in virginia beach  virginia  since       he sits on the computer science teachers association board and chairs its communi  cations committee  levels and a professional development specialist  leslie conery is deputy ceo of iste  she holds an assortment of degrees and certifications in computer science  education  and association management  she has also been a classroom teacher at the elementary and high school this material is based on work supported by the national science foundation grant cns          new online learning options  in addition to nets t certification  we now offer courses on integration of iste standards and   st century skills in an innovative virtual classroom environment and a convenient asynchronous format     hours a day    days a week  new courses   teaching and learning in an online environment    or    weeks    supporting digital and global citizenship    weeks    technology literacy      utilizing social networking tools in a leadership capacity    weeks    focus on stem  instructional technology strategies for science and math    weeks  upcoming spring courses   survey of emerging technologies    weeks  next session starts may           research and information fluency    weeks  next session starts may         where do you stand  take our free online surveys  jamesmadisoneducation com phone  email                  toll free  info jamesmadisoneducation com all courses are accredited by james madison university  james madison university   jmu  and the james madison logo are registered trade  marks of james madison university used under license  integrating   st century skills through nets t certificationtm copyright         iste  international society for technology in education                   u s    canada  or                 int l   iste iste org  www iste org  all rights reserved  march april        learning   leading with technology    
computational thinking in k     a review of the state of the field author s   shuchi grover and roy pea source  educational researcher  vol      no     jan feb        pp        published by  american educational research association stable url  https   www jstor org stable          accessed                   utc jstor is a not for profit service that helps scholars  researchers  and students discover  use  and build upon a wide range of content in a trusted digital archive  we use information technology and tools to increase productivity and facilitate new forms of scholarship  for more information about jstor  please contact support jstor org  your use of the jstor archive indicates your acceptance of the terms   conditions of use  available at https   about jstor org terms american educational research association is collaborating with jstor to digitize  preserve and extend access to educational researcher this content downloaded from               on wed     jan               utc all use subject to https   about jstor org terms  f reviews essays computational thinking in k     a review of the state of the field shuchi grover  and roy pea    jeannette wing s influential article on computational thinking   years ago argued for adding this new competency t every child s analytical ability as a vital ingredient of science  technology  engineering  and mathematics  stem  learnin what is computational thinking  why did this article resonate with so many and serve as a rallying cry for educator education researchers  and policy makers  how have they interpreted wing s definition  and what advances have been made since wing s article was published  this article frames the current state of discourse on computational thinking k    education by examining mostly recently published academic literature that uses wing s article as a springboard  identifies gaps in research  and articulates priorities for future inquiries  keywords  computational thinking  computing education  computational literacy  computers and learning  k    curricula  learning environments  problem solving  stem learning  student cognition  technology introduction of course  the idea of ct is not new  back in the     s  alan perlis argued for the need for college students of all disciplines to six years ago  jeannette wing s succinct and influential article  learn programming and the  theory of computation   guzdial   computational thinking   appeared in the viewpoint section        however  in the context of k    education  computing of the march      edition of the communications of the acm first gained popular traction around seymour papert s mit work with the pronouncement   it represents a universally applicable in the     s  papert pioneered the idea of children developing attitude and skill set everyone  not just computer scientists  procedural thinking through logo programming  papert  perspective on the topic  and wing s      article forms a logical community  prompted by her article and a growing community of would be eager to learn and use   p                    this recent resurgence takes a fresh     st century  wing s arguments caught the attention of a broad academic starting point for our critical examination of the current state o researchers  educators  and policymakers  computational thinking the field of ct in k    education  the following sections exam  or ct  as a concept and associated research agenda has witnessed ine mostly recently published  salient  academic literature that increasing attention and research  the tailwinds in the larger envi has used wing s article as a springboard  the article will also ronment have fanned this growing interest  the issue of computer report on key efforts around computing education in k     science  cs  education in k    took center stage following a given the definitional confusion that has plagued ct as a stark report titled running on empty  the failure to teach k    phrase and how imperative it is for school education  the next computer science in the digital age  wilson  sudol  stephenson   c section looks deeply at the varied perspectives and evolving defi stehlik        revealed precipitously low numbers for women in nitions of ct  the rationale for building ct among school chi computing and that more than two thirds of the country had few dren  and common criticisms against ct in schools  the article computer science standards at the secondary school level  concerns then surveys recent research investigating ct  including some about these statistics deepen given projections from the bureau of that do not use the phrase computational thinking per se but labor statistics  http   www bls gov ooh   that computing is one nonetheless examine computational competencies in children   of the fastest growing job markets through       this cs educa the various environments and tools that are believed to foster ct tion has dovetailed with the science policy attention to science  development  and studies attempting to assess ct are appraised technology  engineering  and mathematics  stem  learning in the finally  the article lays out priorities for broadening the k    ct united states since the turn of the   st century  with ct being discourse on the basis of the gaps in current research  viewed as at the core of all stem disciplines  henderson  cortina  hazzan    wing        it appears that computing in k    isstanford university school of education  stanford  ca  usa idea whose time has come   h star institute  stanford  ca  usa educational researcher  vol     no     pp        doi                 x                aera  http   er aera net this content downloaded from               on wed     jan               utc all use subject to https   about jstor org terms    educational researcher the what and why of computational thinking according to wing          computational thinking involves solving problems  designing systems  and understanding human behavior  by drawing on the concepts fundamental to computer science   p       ct s essence is thinking like a computer scientist when confronted with a problem  wing s call to action for ct in school education served as the starting point for two national academy of sciences workshops convening leading researchers from education  learning sciences and computer science departments  and leaders from the com puting industry  to explore  the nature of computational think ing and its cognitive and educational implications   national research council  nrc         p  viii  and the pedagogical aspects of computational thinking  nrc         in the first workshop  early notions of ct that focused on procedural thinking and programming  papert               though still considered valid  were revisited and broadened to encompass several core concepts of computer science that take it beyond  just programming   the workshop  however  threw into sharp relief the lack of consensus that seems to have bedeviled this space  some of the central questions left unanswered by the workshop included the following  how can ct be recognized  what is the best pedagogy for promoting ct among children  can programming  computers  and ct be legitimately sepa rated   nrc         some of these questions were reexamined in the follow up workshop that focused on better defining the space by gathering and synthesizing insights from educators addressing ct in their work with k    teachers and learners  the aim of the workshop was to share examples and best prac tices of pedagogies and environments for teaching ct and revealed a plethora of perspectives that reflected several tools and pedagogies that are legitimate candidates for use in developing these competencies  wing        revisited the topic and clarified   computational thinking is the thought processes involved in formulating prob lems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information pro cessing agent   aho        simplified this further by defining ct as the thought processes involved in formulating problems so  their solutions can be represented as computational steps and algorithms   p        recently  the royal society        also offered a succinct and tractable definition that captures the essence of ct   computational thinking is the process of recognising aspects of computation in the world that surrounds us  and applying tools and techniques from computer science to understand and rea son about both natural and artificial systems and processes   p       a valuable perspective that breaks down the meaning of ct  especially for high school curricula  comes from the cs principles course being piloted by the college board and the national science foundation  nsf   http   www csprinciples org    the course focuses on the practices of computational thinking and is based on the seven  big ideas  of computing     computing is a creative human activity    abstraction reduces information and detail to focus on concepts relevant to understanding and solving problems    data and information facilitate the creation of knowledge    algorithms are tools for developing and expressing solu tions to computational problems    programming is a creative process that produces computa tional artifacts    digital devices  systems  and the networks that intercon nect them enable and foster computational approaches to solving problems    computing enables innovation in other fields  including science  social science  humanities  arts  medicine  engi neering  and business  following workshops organized by the computer science teachers association  csta  and the international society for technology in education  iste   barr and stephenson        provided a similar  operational definition of ct  aimed at k    teachers that comprised an explanatory checklist for what ct means along with an enumeration of core ct concepts and capa bilities  and examples of how they might be embedded in activi ties across multiple disciplines  it is worth noting here that the potent idea of  computational literacy   disessa        pre dates wings charter for ct for all  although the essence of both concepts targets this new digital age competency  disessa separates the  material  tools such as pro gramming environments  from the  cognitive  and the  social  aspects of computational literacy  furthermore  disessa under scores the use of  computing as a medium  for exploring other domains such as math and science  much like kay and goldberg        explored math  science  and art via programming in smalltalk  this notion is often neglected in popular definitions of ct  the term computational literacy is perhaps susceptible to con fusion with earlier ones like computer literacy  information literacy  and digital literacy that have assumed various meanings over the years and fall well short of what disessa demands of computational literacy  although the phrase and notion of computational thinking now seems to be preferred over computational literacy  in research and practice today the two phrases are often used interchangeably  procedural literacy is another avatar of ct that was first pro posed in      by b  a  sheil at xerox parc  in our reading  there is little to distinguish between procedural literacy and ct applied mostly to creating video games and other computational media artifacts or  more broadly  the practice of ct in the context of new media art and design  researchers and cs educators for the most part now work broadly with the aforementioned recent descriptions of ct  the value of abstraction as ct s keystone  distinguishing it from other types of thinking  is undisputed  abstraction is  defining patterns  generalizing from specific instances   and a key to deal ing with complexity  wing         the following elements are now widely accepted as comprising ct and form the basis of curricula that aim to support its learning as well as assess its development    abstractions and pattern generalizations  including models and simulations    systematic processing of information   symbol systems and representations   algorithmic notions of flow of control this content downloaded from               on wed     jan               utc all use subject to https   about jstor org terms january february             structured problem decomposition  modularizing    iterative  recursive  and parallel thinking   conditional logic   efficiency and performance constraints   debugging and systematic error detection programming is not only a fundamental skill of cs and a key tool for supporting the cognitive tasks involved in ct but a demonstration of computational competencies as well  noteworthy efforts like cs unplugged  http   csunplugged  org   that introduce computing concepts without the use of a computer  while providing valuable introductory activities for exposing children to the nature of cs  may be keeping learners from the crucial computational experiences involved in ct s common practice  finally  although there is broad acknowledgement that com puting pervades all aspects of the global economy  its place as a mandatory part of the school curriculum is far from secure  many criticisms have revolved around these multiple interpreta tions of ct and a lack of clarity among educators on cs as a discipline  another valid concern is whether there is a compel ling rationale for all children  including those who allege no interest in pursuing cs and stem careers  to develop compu tational competencies in school  in the zero sum school curricu lum map  how should curriculum policymakers make room in already packed school curricula  there is also lack of agreement on whether ct should ultimately be incorporated into educa tion as a general subject  a discipline specific topic  or a multi disciplinary topic  nrc         lastly  there is some question whether ct is distinct enough from other forms of thinking that children are developing  advocates of ct concede that although it shares elements with mathematical  engineering  and even design thinking  and draws on a rich legacy of related frameworks  it also extends each of those thinking skills in a unique way  lee et al          denning and freeman        observe that although the computing paradigm  contains echoes of engineering  science  and mathematics  it is distinctively dif ferent because of its central focus on information processes   p      and that wing s ct interpretation embeds well into this system of practice  we claim that the approach to problem solving generally described as ct is a recognizable and crucial omission from the expertise that children are expected to develop through routine k    science and math education  although ct has finally been mentioned  albeit briefly  in the      nrc k    science education framework   if basic literacy in math and science can be considered essential for all children to understand how our world works  why should school education not lift the hood on all pervasive computing devices as well  we believe that those in possession of computational competencies will be better positioned to take advantage of a world with ubiquitous com puting  early experiences with this way of problem solving will not only alleviate problems in introductory cs courses undergraduates have been known to face but also generate inter est and prime students for success in this growing field rife with opportunity  recent news from media and industry suggest that the move to make programming a more commonplace skill for everyone and introducing  rithms  short for algorithms  as the fourth  r  for    st century literacy is gaining momentum globally  israel has long boasted an exemplary mandatory high school cs curricu lum  countries such as russia  south africa  new zealand  and australia have already made room for cs in the k    curricu lum  more recently  the united kingdom has piloted programs to teach computing to all schoolchildren following a bold      policy charter from the royal society  summary of pertinent research on ct in k    with broadly agreed on definitions of ct in k    education  focus has recently shifted to tackling the more practical questions of how to promote and assess the development of ct  there is extensive literature from the last three decades tackling issues of teaching and learning programming and cs  the bulk of cs education research  however  is set in the context of undergradu ate classrooms  although there is much to learn about ct in k    both from studies of kids and programming in the     s  using languages such as logo and basic  as well as early programming and cs experiences of college students  the space constraints imposed by the essay as well as a focus on the recent resurgence of ct force the review to be limited to recent research involving   st century tools and school age children  environments and tools that foster ct the idea of  low floor  high ceiling  as one of the guiding prin ciples for the creation of programming environments for children has been around since the days of logo  it essentially means that though it should be easy for a beginner to cross the threshold to create working programs  low floor   the tool should also be powerful and extensive enough to satisfy the needs of advanced programmers  high ceiling   computationally rich environments and effective ct tools for school children must have low thresh old and high ceiling  scaffold  enable transfer  support equity  and be systemic and sustainable  repenning  webb    ioannidou         several programming tools fit these criteria to varying degrees  popular among these are graphical programming envi ronments such as scratch  alice  game maker  kodu  and greenfoot  web based simulation authoring tools such as agentsheets and agentcubes  and robotics kits and tangible media such as arduino and gogo boards  graphical program ming environments are relatively easy to use and allow early expe riences to focus on designing and creating  avoiding issues of programming syntax  by allowing novices to build programs by snapping together graphical blocks that control the actions of different dynamic actors on a screen  environments like scratch  mit s popular offering  quite literally make programming a snap  several of these introductory computational experiences use the three stage  use modify create  progression to help the learner go from user to modifier to creator of computational arti facts  lee et al          a progression first broadly used in apples hypercard application in the mid     s to early     s  curricular activities such as game design and robotics have typi cally served well as a means for the iterative exploration of ct  making them ideal not only for motivating and engaging school children but for introducing them to computer science  visual and tangible programming experiences are often followed by    j educational researcher this content downloaded from               on wed     jan               utc all use subject to https   about jstor org terms exposure to high level programming languages such as python  java  and scheme  recommendations for engaging girls through computing in context  margolis  c fisher        also see cooper   cunningham        provide a compelling rationale for tools that strive to bridge the gender gap in the computing field  emerging computational environments are poised to provide more opportunities for engagement in ct in formal and infor mal settings while also engaging girls as well  e textiles and other  computational craft  kits that use small  powerful hardware  such as the lilypad arduino  allow children to combine tradi tional arts and crafts such as sewing and sketching with compu tation and electronics  mit app inventor  a visual programming environment that uses scratch like graphical blocks of code for building android mobile apps  is more gender neutral and com plete than most tools  it sets a low floor for allowing creative app building  something all teens  including girls  are eager to do  while still engaging with complex ct concepts including proce dural and data abstraction  iterative and recursive thinking  structured task breakdown  conditional and logical thinking  and debugging  despite its growing popularity for promoting many   st century competencies in k     nrc         video gaming as a platform for examining ct among children has been underuti lized in recent research  holbert and wilensky        success fully developed and tested a prototype video game  formulat  which aimed to serve as a platform for learning principles of kine matics as well as  systematic computational strategies   formulat used netlogo  a computational environment for agent based modeling  the activities of abstracting pertinent behaviors into agents  applying rules  and evaluating the results via modeling and simulation are key ways of engaging in ct  blikstein        demonstrates leveraging netlogo computational models for sci ence learning in secondary level classrooms  agent based model ing  however  remains relatively underused in ct research  not surprisingly  current computational tools vary in their effectiveness in allowing for engagement with the various compo nent elements of ct  maloney  peppier  kafai  resnick  and rusk        reported demonstration of several ct elements such as conditional logic  iterative and parallel thinking  and data abstraction in scratch programs created by urban youth in after school settings  however scratch lacks the means to abstract functionality into functions and procedures  prompting a version called snap  from berkeley that seeks to address this  perhaps an imperative for cs in k    will fuel the development of new tools built expressly for fostering ct among school age children  these should not only embody all the characteristics of effective ct tools and promote the development of all the competencies now identified as elements of ct but also be guided by recent research on commonsense human understanding of computing and how children explain their approaches to problem solving  pane  ratanamahatana    myers        simon  chen  lewandowski  mccartney    sanders         lastly  despite the variety of environments in which current ct research is situated  many promising spaces are still untapped  fab labs  makerspaces  and diy movements  such as maker faire and instructables  that promote construction of tangible computational artifacts  informal  hacker  events for kids  as well as ubiquitous and powerful smartphones  all present exciting pos sibilities  assessment of ct without attention to assessment  ct can have little hope of mak ing its way successfully into any k    curriculum  furthermore  to judge the effectiveness of any curriculum incorporating ct  measures that would enable educators to assess what the child has learned need to be validated  most recent research addressing questions of ct assessment  such as werner  denner  campe  and kawamotos        fairy assessment in alice  has used either student created  or prede signed programming artifacts to evaluate students  understand ing and use of abstraction  conditional logic  algorithmic thinking  and other ct concepts to solve problems  ideas of deconstruction  reverse engineering  and debugging to assess children s understanding in computational contexts have long enjoyed educational appeal  fields  searle  kafai  and min        evaluated students  engineering and programming skills as they debugged prebuilt faulty e textile projects  han koh  basawapatna  bennett  and repenning        attempted with some success to assess the thorny issue of transfer to answer ques tions like  now that the student can program space invaders  can the student program a science simulation   in the past two decades   academic talk  has been leveraged for promoting and assessing math and science literacy  the devel opment in the student use of the vocabulary and language of cs over the course of engaging in computationally rich activities provides an additional instrument for measuring the growth of ct  grover         computing education in k    wilson and guzdial        maintain that although the national urgency for strengthening stem in k    has translated into billions of dollars in funding  research explicitly in computing education remains underfunded  nsf initiatives such as cpath  bpc  and most recently  ce   have gone a long way in energiz ing projects aimed at bringing ct cs concepts to the secondary level  an additional boost for guiding interested middle and high school students into cs careers comes from darpa s initiatives such as cs stem and carnegie mellon university s fire  fostering innovation through robotics exploration   although ongoing research in development of ct will help inform computing curricula throughout k     preparing teach ers for computing education and ensuring gender equity remain huge challenges  the nsf s cs  k initiative aims to add        new cs teachers in u s  high schools by       the georgia computes  alliance is at the forefront of nationwide efforts for teacher preparation  development of ct cs k    curricula as well as motivating female students in cs  georgia tech s guzdial argues in his blog  http   computinged wordpress com   that challenges to meeting the cs  k deadline include answering questions like the following  what do teachers need in order to develop into successful computer science teachers  what kind of pedagogy will fit into the lives of in service high school teachers  what is computer science pedagogical content knowledge  in terms of curriculum  besides cs principles for ap cs  the exploring cs curriculum  http   www exploringcs org  is this content downloaded from               on wed     jan               utc all use subject to https   about jstor org terms january february         intended to be a    year college preparatory curriculum for high school students  other initiatives aimed at introducing cs into schools include cs hs  http   www cs hs com   and computing in the core  http   www computinginthecore  org   both of which represent collaborations between aca demia  national bodies  and organizations such as microsoft and google  csta s model curriculum for k    computer science provides curricular suggestions to help build interest  engage  and motivate students in cs  in addition  google s exploring computational thinking website  www google com edu  computational thinking  has a wealth of links to ct resources on the web  acm has also recently introduced a new thread  edubits  in its acm inroads quarterly that highlights principal educational activities within acm and affiliated organizations  broadening the scope of the discourse and priorities for empirical inquiry it is thus quite evident that much of the recent work on ct has focused mostly on definitional issues  and tools that foster ct development  some strides have been made in the realm of defin ing curricula for nurturing computational competencies  and assessing their development  large gaps  however  still exist that call out for empirical inquiries  in a view that was echoed by alfred aho  wing argued   an application of the science of learning research in designing grade and age appropriate curricula for computational thinking is nec essary to maximize its impact on and significance for k    students   nrc        p      barring some recent studies  such as fadjo  lu  and black        and berland and lee         few others have taken into account contemporary research in the learning sciences in socio cultural and situated learning  distrib uted and embodied cognition  as well as activity  interaction and discourse analyses  cognitive aspects of children and novices learning computational concepts were studied extensively in the     s issues such as development of thinking skills  kurland  pea  clement    mawby         debugging  pea  soloway    spohrer         problems with transfer  clements   gullo        pea   kurland         use of appropriate scaffolds for successful transfer  klahr   carver         to name a few  that body of literature should be brought to bear on   st century ct research  also underinvestigated is the idea of computing as a medium for teaching other subjects dovetailing the introduction of ct at k    with transfer of problem solving skills in other domains  past work includes demonstrations of children successfully designing logo software to teach fractions  harel   papert        and science  kafai  ching    marshall         and using modeling software in science  metcalf  krajcik    soloway         empirical studies on ct in schoolchildren could leverage extensive research on the types of problems beginner cs under graduates face in their early programming experiences that go beyond syntactical issues  are there well defined hurdles or targets of difficulty that exist in the path of developing some ele ments of ct in children  e g   recursion   if so  what are these and how can they be addressed  also largely untapped is the territory of dispositions for  atti tudes toward  and stereotypes concerning ct and cs  and how they relate to the development of learner identity  mercier  barron    o connor         how crucial are these as we strive to provide both girls and boys with learning experiences that aim to nurture ct competencies  recent incipient work on surveys of student attitudes toward computing represents a start in gain ing a better understanding of this  clearly  much remains to be done to help develop a more lucid theoretical and practical understanding of computational competencies in children  what  for example  can we expect children to know or do better once they ve been participating in a curriculum designed to develop ct and how can this be evalu ated  these are perhaps among the most important questions that need answering before any serious attempt can be made to introduce curricula for ct development in schools at scale  it is time to redress the gaps and broaden the   st century academic discourse on computational thinking  acknowledgment we gratefully acknowledge grant support of the life center from the national science foundation for this work  ns           references aho  a  v          computation and computational thinking  computer journal               barr  v     stephenson  c          bringing computational thinking to k     what is involved and what is the role of the computer science education community  acm inroads            berland  m     lee  v          collaborative strategic board games as a site for distributed computational thinking  international journal of game based learning               blikstein  p          connecting the science classroom and tangible inter faces  the bifocal modeling framework  in proceedings of the  th international conference of the learning sciences  chicago  il           clements  d  h     gullo  d  f          effects of computer program ming on young children s cognitions  journal of educational psychology                 cooper  s     cunningham  s          teaching computer science in context  acm inroads          denning  p     freeman  p          computing s paradigm  communications of the acm                 disessa  a  a          changing minds  computers  learning  and literacy  cambridge  mit press  fadjo  c  l  lu  m     black  j  b         june   instructional embodi ment and video game programming in an afier school program  paper presented at the world conference on educational multimedia  hypermedia   telecommunications  chesapeake  va  fields  d  a   searle  k  a   kafai  y  b     min  h  s          debuggems to assess student learning in e textiles  in proceedings of the   rd sigcse technical symposium on computer science education  new york  ny  acm press  grover  s         april   robotics and engineering for middle and high school students to develop computational thinking  paper presented at the annual meeting of the american educational research association  new orleans  la  guzdial  m          paving the way for computational thinking  communications of the acm                han koh  k   basawapatna  a   bennett v    c repenning  a          towards the automatic recognition of computational thinking for adaptive visual language learning  in proceedings of the      conference educational researcher this content downloaded from               on wed     jan               utc all use subject to https   about jstor org terms on visual languages and human centric computing  vl hcc        pp          madrid  spain  ieee computer  harel  i     papert  s          software design as a learning environ ment  interactive learning environments  i        henderson  p  b   cortina  t  j   hazzan  o   and wing  j  m         computational thinking  in proceedings of the   th acm sigcse technical symposium on computer science education  sigcse                new york  ny  acm press  holbert  n  r     wilensky  u         april   racing games for exploring kinematics  a computational thinking approach  paper presented at the annual meeting of the american educational research association  new orleans  la  kafai  y  b   ching  c  c     marshall  s          children as designers of educational multimedia software  computers   education               pea  r  d     kurland  d  m          on the cognitive effects of learn ing computer programming  new ideas in psychology              pea  r  d   soloway  e     spohrer  j  c          the buggy path to the development of programming expertise  focus on learning problems in mathematics           repenning  a   webb  d     ioannidou  a          scalable game design and the development of a checklist for getting computational thinking into public schools  in proceedings of the   st acm technical symposium on computer science education  sigcse                new york  ny  acm press  royal society          shut down or restart  the way forward for computing in uk schools  retrieved from http   royalsociety org  education policy computing in schools report  simon  b   chen  t   lewandowski  g   mccartney  r     sanders  k         march   commonsense computing  what students know before we kay  a     goldberg  a          personal dynamic media  ieeeteach  episode    sorting   paper presented at the second international computer             workshop on computing education research  canterbury  uk  klahr  d     carver  s  m          cognitive objectives in a logwoerner  l   denner  j   campe  s     kawamoto  d  c          the debugging curriculum  instruction  learning  and transfer  cognitive fairy performance assessment  measuring computational thinking in psychology               middle school  in proceedings of the   rd acm technical symposium kurland  d  m   pea  r  d   clement  c     mawby  r          a study on computer science education  sigcse                new york  of the development of programming ability and thinking skills in highny  acm  school students  journal of educational computing research         wilson  c     guzdial  m          how to make progress in computin      lee  i   martin  e  denner  j   coulter  b   allan  w   erickson  j       werner  l          computational thinking for youth in practice  acminroads          maloney  j   peppier  k  kafai  y  b   resnick  m     rusk  n          programmingbychoice urbanyouthlearningprogrammingwith scratch  in proceedings of sigcse      new york  ny  acm press  margolis  j     fisher  a          unlocking the clubhouse  women in computing  cambridge  mit press  mercier  e  m   barron  b     o connor  k  m          images of self and others as computer users  the role of gender and experience  journal of computer assisted learning               metcalf  j  s  krajcik  j     soloway  e          model it  a design retrospective  in m  j  jacobson   r  b  kozma  eds    innovations in science and mathematics education  pp           mahwah  nj  lawrence erlbaum  national research council          committee for the workshops on computational thinking  report of a workshop on the scope and nature of computational thinking  washington  dc  national academies press  national research council          committee for the workshops on computational thinking  report of a workshop of pedagogical aspects of computational thinking  washington  dc  national academies press  national research council          a framework for k    science educa tion  practices  crosscutting concepts  and core ideas  washington  dc  national academies press  pane  j  e  ratanamahatana  c  a     myers  b  a          studying the language and structure in non programmers  solutions to program ming problems  internationaljournal of human computer studies               papert  s          mindstorms  children  computers  and powerful ideas  new york  ny  basic books  papert  s          situating constructionism  in i  harel   s  papert  eds    constructionism   pp         norwood  nj  ablex  education  communications of the acm                wilson  c   sudol  l  a   stephenson  c    stehlik  m          runnin on empty  the failure to teach k    computer science in the digital ag new york  ny  the association for computing machinery and th computer science teachers association  wing  j          computational thinking  communications of the acm               w ing  j          research notebook  com putational thinking  w h and why  the link magazine  spring  carnegie mellon university pittsburgh  retrieved from http   link cs cmu edu article php a    authors shuchi grover is a doctoral candidate at stanford universi school of education      lasuen mall  stanford  ca           shuchig stanford edu  her research focuses on helping children becom computationally literate studying social  cultural  and cognitive p cesses that help in developing computational competencies and tools and environments that nurture such development  roy pea is the david jacks professor of education   learnin sciences at stanford university  school of education  and compute science  courtesy   and director of the h star institute  wallenber hall      serra mall  bldg       stanford  ca        roypea stanfor edu  his work in the learning sciences focuses on advancing theorie findings  tools  and practices of technology enhanced learning of co plex domains  manuscript received april          revisions received june           and july          accepted september         january february      this content downloaded from               on wed     jan               utc all use subject to https   about jstor org terms 
computational thinking  the developing definition cynthia c  selby university of southampton highfield southampton uk                    c selby soton ac uk abstract since jeanette wing s use of the term computational thinking in       various discussions have arisen seeking a robust definition of the phrase  with little consensus having been found in the intervening years  there are even suggestions that a definition is not important  perhaps focus should be on how computational thinking is taught and how its acquisition might be observed  however  in order to facilitate consistent curriculum design and appropriate assessment  it is argued that a definition should still be sought  in order to contribute to the discussions surrounding a definition of computational thinking  this review of literature spans the years since       the most frequently occurring terms  descriptions  and meanings are identified  consideration is given to the motivation for inclusion or exclusion of a term by each individual author  where possible  if a description has been given  an associated term is supplied  criteria are developed for the objectives of a computational thinking definition  in accordance with the needs identified in the literature  using the criteria as a guide and the collected terms as the vocabulary  a definition of computational thinking is proposed which encompasses the thought processes of abstraction  decomposition  algorithmic design  evaluation  and generalization  categories and subject descriptors k      computers and education   computers and education  curriculum general terms standardization  theory keywords computational thinking  definition  abstraction  decomposition  algorithmic thinking  algorithmic design  generalization  evaluation    introduction the term  computational thinking   when used by jeanette wing      in her call to make thinking like a computer scientist a fundamental skill for everyone  excited educators                                and academics                                    this presented an opportunity to promote computer science to a wider permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page  to copy otherwise  or republish  to post on servers or to redistribute to lists  requires prior specific permission and or a fee  conference     month            city  state  country  copyright      acm x xxxxx xxx x xx xxxx            john woollard university of southampton highfield southampton uk                    j woollard soton ac uk audience  but it also introduced a challenge  wing did not precisely define the term and state exactly what  computational thinking  is for everyone  since then  there have been attempts by authoritative individuals and groups               to derive a definition for computational thinking  the aim of this investigation is to shed new light on the discussions that attempt to develop a definition of computational thinking with the objectives including  to define more narrowly  not more broadly  to bring an order to the criteria not necessarily to accommodate all viewpoints  to refine the definition to facilitate assessment  to retain the validity of work that has been done previously  such as the development of curriculums  to separate a definition from those activities that might promote acquisition of computational thinking skills  and to separate a definition from those artifacts and activities that evidence the use of those skills      method a selection of literature relating to the topic of computational thinking was examined using the following literature analysis method  an internet search engine query using the criteria  jeannette wing  and  computational thinking  was initially executed  the entries of the first four pages were checked for applicabilityoftitle  alldocumentsidentifiedashavingapplicable titles  indicating a focus on computational thinking  were individually inspected  this resulted in six documents  the acm digital library was searched using the term  jeannette wing   the articles were filtered according to the abstract introduction text and being dated post       this led to the identification of thirteen items  in addition  articles describing proposed or current computer science curriculum designs  in israel      germany      new zealand      india       england      and the usa      were identified  this gave   more documents  because of repetition of comments by the same author    of the original    articles were discarded  in an attempt to contribute to the development of a definition  the publications were analyzed in chronological order to discern the development  over time  of the phrase computational thinking  descriptions and suggested definitions of computational thinking were identified in each publication  the terminology  common across descriptions and definitions  was collated  where equivalences allowed  similar terms were grouped together  the most frequently occurring individual terms and groups are presented in the following sections  from this basic collection of terms  a definition of computational thinking is formulated and proposed  justification for the inclusion or exclusion of terms is presented on a term by term basis  justification is based on consistency of usage andconsistencyofinterpretationacrosstheliterature  theresulting definition reflects much of the consensus found in the literature while removing the less well defined terms     evidencefromliterature some authors papers commentaries may assert that a precise definition of computational thinking is not required           however  the discussion presented in this paper is driven by a perceived need to support professionals working in the field of computer science education and the developing computing curriculums  this need for definition is supported in the literature                  guzdial      has suggested that a very broad definition is acceptable  such acceptance could shift the focus away from what computational thinking is to how computational thinking should be taught and how evidence of its acquisition might be observed in learners  professor of computer science  chenglie hu       supports this by citing that teachers are confident that the teaching of computer science does promote computational thinking  even though they may not know exactly how this mechanism works  teachers recognize that the more learners practice computation  in terms of computer science  the better at computational thinking they become  this same argument is expressed by some of those who design or influence the design of computer science curriculums  several curriculums               while acknowledging the vagueness of a computational thinking definition  continue to include a focus on concepts and techniques from computer science  in presenting these concepts and techniques  the curriculums include terminology often found in descriptions of computational thinking  some of this terminology will be explored in more detail below  jan cuny suggests that if computational thinking is included in a curriculum  it requires assessment  without agreement on a common definition of computational thinking  it will be difficult  if not impossible  to develop appropriate assessment tools that actually measure the ability to think computationally       so  a rigorous and agreed definition might ensure that computational thinking in these new curriculums for the k    years will be more than  as joyce malyn smith argued       just a bunch of examples that are placed into the curriculum at the discretion of individual teachers       p      the balance of argument is still in favor of searching for a robust definitionofcomputationalthinking  althoughitmaybepossible  without a robust definition  to identify examples of the practice of computational thinking  the ability to measure computational thinking may be hampered by that same lack     consensusterms three terms appear consistently throughout the literature reviewed here  there appears to be a consensus that a definition of computational thinking should include the idea of a thought process  the concept of abstraction  and the concept of decomposition      athoughtprocess when introducing the term  computational thinking  wing      described it as a way that humans think about solving problems  it incorporates the set of mental tools used in computer science  these tools are used to transform a difficult problem into one that can be solved more easily  in adding his voice to wing s  calling for the explicit teaching of computational thinking  guzdial     refers to computational thinking as a way of thinking about computing  participants in the workshop on the scope and nature of computational thinking       although not tasked with defining computational thinking  nevertheless agreed that it incorporates a range of mental tools and concepts from computer science  this idea is extended to represent problems as information processes and solutions as algorithms      al aho     picks up the idea of problem transformation when he describes computational thinking as the thought processes in formulating problems and solutions that can be expressed as algorithms  these thought processes do have focus  frequently that focus is described as problem solving  finally  wing expresses these refinements by defining computational thinking as      the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information processing agent   cuny  snyder  wing        cited in       p      because of this consensus  a definition of computational thinking should include the concept of a thought process      abstraction although the idea of abstraction  hiding complexity  as being part of computational thinking is introduced by wing in her original article       the definition develops over the subsequent years  she amends the definition to include simultaneous consideration for multiple layers of abstraction and consideration for defining the interfaces between the layers       even peter denning      acknowledges that abstraction plays an important part in computing  including programming  however  he points out that the act of abstracting is not unique to computer science  the next year  wing      defines abstraction as the cornerstone of computational thinking  several participants in the workshop on the scope and nature of computational thinking  nrc  concur that computational thinking has a focus around the process of abstraction  creating them and defining the relationships between them       more recently  in their report on workshops sponsored by the computer science teachers association  csta  and the international society for technology in education  iste  to incorporate computational thinking into the k    curriculum  barr and stephenson     also include the ability to abstract in a definition of computational thinking  the concept of abstraction is explored by l heureux et al       where it is one of six aspects of their information technology approach to computational thinking  because of this consensus  a definition of computational thinking should include the concept of abstraction      decomposition breaking problems down by functionality is identified by wing          as part of computational thinking  decomposition is required when dealing with large problems  complex systems  or complex tasks  the participants in the first nrc workshop also identify the need for problem decomposition       in the next workshop  focusing on pedagogy  participants extend this idea  robert tinker views the core of computational thinking as breaking down big problems       danny edelson points out that the creation of solutions requires breaking problems down into chunks of particular functionality and sequencing the chunks       most recently  in refining his own definition of computational thinking  guzdial      includes the use of tools including abstraction and decomposition  in light of this consensus  a definition of computational thinking should include the concept of decomposition  three terms are proposed for inclusion in the definition of computational thinking  inclusion of a thought process  abstraction  and decomposition is supported by a consensus found in the reviewed literature  these terms are used consistently across the literature  their use does not reflect any discrepancy in perceived meaning of the terms  although consensus has been demonstrated for these terms  others receive less support and more varied interpretation  some of these additional terms and their applicability for inclusion in a definition of computational thinking are discussed below     possibleterms although less consistently than the terms above  several different termsandideasdorecuracrosstheliteraturereviewedhere  even if a term or idea recurs  its interpretation is not always consistent across articles  several ideas proposed as part of a definition for computational thinking are broad and high level  a lack of specific interpretation may make inclusion of these terms in a definition difficult  the terms identified fall into these four areas  thinking  problem solving  computer science and imitation terms there are two descriptions of thinking  three general terms associated with problem solving  three terms associated with computer science concepts  and three terms associated with the concept of imitation or representation  the specific terms are  logical thinking and algorithmic thinking  problem solving  analysis  and generalization  systems design  automation  and more general computer science concepts  and modeling  simulation  and visualization  support for inclusion or exclusion of these terms in a definition of computational thinking is presented in this section  justification is based on consistency of usage and consistency of interpretation across the literature      thinkingterms although the idea that computational thinking represents a cognitive process attracts consensus  there are suggestions that severalspecifictypesofthinkingshouldalsobeincluded  these specific types of thinking are logical thinking  algorithmic thinking  engineering thinking  and mathematical thinking  this section explores the viability of incorporating these types of thinking into the definition of computational thinking  the concept of logical thinking  although not specifically defined  occurs several times in the literature spanning these years  albeit not perceived exactly as equivalent  terms to describe similar types of thinking are grouped into this category  these include mathematical thinking  engineering thinking  and heuristic thinking  in her original article  wing      indicates that computational thinking incorporates heuristic reasoning to devise a solution  in addition to abstraction and decomposition  guzdial      also includes heuristic reasoning as an appropriate tool to use when engaging in computational thinking  computational thinking is equivalent to the logical reasoning used by people       logical reasoning is included by iyer et al       in their model computer science curriculum in order to promote high level thinking skills that are not necessarily subject specific  l heureux et al        in detailing an aspect of their information technology approach to computational thinking  define logical thinking as the ability to develop and test hypotheses  computational thinking also intersects with engineering because computer systems interact with the real world  however  computational thinkers can design and create virtual worlds  not limited by physical reality       although wing      states that computer science relies on mathematics as a foundation  gerald sussman      affirms that mathematical thinking revolves around abstract structures while computational thinking revolves around abstract methodology  computational thinking could be viewed as bringing science and engineering together  it could be viewed as a meta science concerned with studying methods of thinking that are applicable to many different disciplines       while the ability to think logically  mathematically  heuristically  and from an engineering perspective are certainly capabilities that a computational thinker may exhibit  references to these terms in this literature are not well expanded  although the term logical thinking  as described above  may not be suitable to include in a definition of computational thinking  the potentially analogous term  algorithmic thinking  requires further investigation  in her original article  wing      does not use the term algorithmic thinking  preferring the word heuristic instead  however  by       she extends her definition of computational thinking to include algorithmic and parallel thinking       david moursund      suggests that computational thinking is related to the idea of procedural thinking  as proposed by seymour papert in mindstorms  he defines a procedure as a step by step set of instructions that can be carried out by a device  the same theme is continued by gerald sussman       who defines computational thinking as a way of devising explicit instructions for accomplishing tasks  inclusion of algorithmic thinking in a curriculum for high schools appears prior to wing s contribution  in the israeli computer science curriculum  gal ezer et al      placed an emphasis on inclusion of the study of algorithmic processes  there appears to be a consensus that computational thinking incorporates aspects of algorithmic thinking and algorithmic design  the term algorithm is interpreted as a step by  step procedure for accomplishing tasks  not just in computer science  but in other disciplines  it is evidenced through the creation of algorithms   algorithmic design  because of its wide acceptance and appropriate definition  algorithmic thinking may be applicable for inclusion in a definition of computational thinking  not all of the types of thinking proposed for inclusion in the definition of computational thinking bring further refinement to the term  tying a definition of computational thinking to other terms such as logically or heuristically  with their open ended interpretation  or to specific disciplines such as mathematics or engineering may not help advance the development of k    curriculums and may not aid in the development of computational thinking assessment instruments  for these reasons  terms expressing the idea of logical thinking or equivalence may dilute a definition of computational thinking  on the other hand  algorithmic thinking is represented consistently in literature and its interpretation does not vary  of all the potential terms associated with thinking  algorithmic thinking is the only possible term which may be suitable for inclusion in a definition for computational thinking      problemsolvingterms the idea that computational thinking has some relationship to problem solving appears frequently in the cited literature  the specific terms problem solving  analysis  and generalization are most frequently employed in discussions of general problem  solving skills  this section explores the interpretation of these terms and the viability of incorporating them into the definition of computational thinking  problem solving  in one form or another  appears frequently in the literature presented here  there is agreement for describing computational thinking as a problem solving activity  however  the literature does not illuminate problem solving in detail  wing           of course  incorporates solving problems using computer science concepts in her definition of computational thinking  the broadness of the problem solving skills employed in computational thinking  in opposition to specific technical skills  is pointed out by larry snyder       a requirement for a computing device is introduced by barr and stephenson      who state that the essence of computational thinking is solving problems in a way that can be implemented with a computer  peter henderson      concisely describes computational thinking as a type of generalized problem solvingwithconstraints  problemsolvingisemphasizedbymarcia linn      who includes in the qualities of a successful computational thinker  the ability to engage in sustained investigative processes to generate problem solutions  although there appears to be a consensus that computational thinking is a type of problem solving  the term may not be sufficiently specific to define it  due to the broadness of the term  problem solving may not be suitable for inclusion in a definition of computational thinking  the term analysis is included by some commentators in the definition of computational thinking  interestingly  the term appears in relation to both problems and solutions  as in analyze a problem and analyze a solution  analyze  in the context of problems  fits the category of problem solving  as defined above  however  analyze  in the context of solutions  could be interpreted as the comparable term evaluate  in her initial article  wing      expresses the need for a computational thinker to make trade offs  by evaluating the use of time and space  power and storage  this evaluation of algorithmic processes  including their power and limitations  is foreshadowed by gal ezer et al       application of the term to user interfaces is evidenced in the second objective of the new zealand proposed curriculum  as part of designing programs      in their it approach  l heureux et al       include the ability to evaluate processes  in terms of efficiency and resource utilization  and the ability to recognize and evaluate outcomes  although the term analyze attracts some agreement for inclusion in a definition of computational thinking  descriptions of the term found in this literature imply an evaluative process  therefore  because of interpretative consensus in the description  the term evaluate may be suitable for inclusion in a definition of computational thinking  a specific term that appears sparingly in the literature definitions is generalization  it is the ability to move from specific to broader applicability  for example  understanding how to draw a square by defining internal angles  then applying the same algorithm to produce an approximation of a circle  the ability to recognize parts of solutions that have been used in previous situations or that might be used in future situations is included by kolodner in a definition of computational thinking       these parts  or functional pieces  can be used to solve the current problem or combined in different ways to solve new problems       the term generalization  itself  is described in a proposed curriculum as recognizing common patterns and by sharing common features      the idea moves forward from decomposition  described above  generalization is the step of recognizing how small pieces may be reused and reapplied to similar or unique problems  although the exact term  generalization  is used sparingly in the literature  the idea of recognizing and reusing common parts of a solution is a possibility for inclusion in a definition of computational thinking  possible terms examined in this section include problem solving  analysis  and generalization  problem solving is a broad term which  although used consistently throughout the literature  is not well defined  analysis  used in the context of a problem  is also a broad term  often incorporating the ideas of abstraction and decomposition  as discussed above  analysis  used in the context of a solution  is analogous to evaluation and is used consistently in the literature  although the term generalization is used infrequently in the literature  there are descriptions of analogous processes  therefore  from this set of possible terms  the ones used most consistently  with the least disparity of interpretation  and which may be suitable for inclusion in a definition of computational thinking are evaluation and generalization      computerscienceterms the authors cited here concede that computational thinking has a deep relationship with computer science  some suggest specific computer science terminology to be included in a definition of computer science  the specific terms include systems design  automation  and more general computer science concepts such as recursionandrecoverythroughredundancy  thissectionexplores the viability of incorporating these terms into the definition of computational thinking  systems design  although not mentioned frequently  is still used to describe computational thinking  designing systems based on concepts used in computer science is mentioned by wing       again  this inclusion is foreshadowed by gal ezer et al      who incorporates the study of the design and implementation of computing systems in their curriculum  one of peter denning s great principles of computing includes a category based on the design and building of software systems      he goes further in describing systems as one of the four core practices  in which computing professionals engage  along with programming  modeling  and innovating       the focus in each of these cases is systems design as a product oriented process  it is evidence of the ability to think computationally  not necessarily a definition of it  therefore  the term systems design may not be suitable for inclusion in a definition of computational thinking  another term  popularized by wing in defining computational thinking  is automation  she connects the term to that of abstraction when discussing the mechanization of abstraction layers and the relationships between them       even denning acknowledges that this is what happens when programming       later  a stronger connection is made by wing      when defining computing as the  automation of our abstractions   p         this introduces the need for a computational device to interpret the abstractions  the need for a computer to execute a program  the process or processes required in the creation of these automations may be possible terms for defining computational thinking  on the other hand  a program artifact  similar to system design as discussed above  is only evidence that computational thinking has taken place  previously  a consensus was presented that emphasized the thought process aspect of computational thinking  based on that consensus  automation  interpreted as a program artifact  may not be a useful addition to the definition of computational thinking  throughout the literature  terms closely related to the general content of computer science studies appear in descriptions of computational thinking  wing      herself introduces computer science concepts such as thinking recursively  interpreting code as data and data as code  type checking  prevention  detection  recovery through redundancy  damage containment  error correction  prefetching  and caching  additional concepts such as parallel processing  testing  debugging  search strategies  algorithmic complexity  and pattern matching are recognized in the nrc report       barr and stephenson     include the abilities to think iteratively and recursively  closer analysis reveals that not all of these concepts are unique to the field of computer science  for example  mathematicians think iteratively and engineers plan for recovery through redundancy  while each of these concepts may be mastered by computational thinkers  none of them uniquely defines or helps narrow a definition of computational thinking  therefore  terms interpretable as computer science content may not be helpful in defining computational thinking  a thought process include consensus found in the literature abstraction include consensus found in the literature decomposition include consensus found in the literature logical thinking exclude broad term  not well defined algorithmic thinking include well defined across multiple disciplines problem solving exclude broad term  evidences the use of skills  develops acquisition of skills evaluation include well defined across multiple disciplines generalization include well defined concept  although the term may not be familiar systems design exclude evidences the use of skills automation exclude evidences the use of skills computer science content exclude evidences the use of skills modeling  simulation  and exclude evidences the use of skills in their creation  manipulation develops acquisition of skills possible terms examined in this section include systems design  automation  and more general computer science concepts such as recursion and recovery through redundancy  systems design  resulting in a product  is evidence of the use of computational thinking skills  not a definition of it  again  automation  as a product or program  evidences the use of computational thinking skills  finally  those terms that are interpretable as computer science content do not bring focus to the definition of computational thinking  therefore  none of the suggested terms discussed in this section appears suitable to be included in a definition of computational thinking      imitationterms three additional terms  also used in discussions of computational thinking  are modeling  simulation  and visualization  these terms appear frequently in the cited literature  this section explores the viability of including these terms in a definition of computational thinking  wing      began by defining computational thinking as modeling the appropriate parts of a problem to facilitate a solution  later  brian blake      insists that the definition of computational thinking should include modeling and visualizations  brinda  puhlmann  and schulte     have identified  as one achievable curriculumstandard theprocessesinvolvedinmodelingdata  on the other hand  edward fox and janet kolodner      point out that it is the manipulation of abstractions  models  simulations  and visualizations  that contribute to the development of computational thinking skills  observing the results of changing variable values  forming hypotheses  finding anomalies in data  and identifying invariants can all be achieved by interacting with models  simulations  and visualizations  the manipulation of these representations are agreed to enhance the development of computational thinking skills  but do not necessarily define it  although these tools are effective aids in developing computational thinking skills  they may not be suitable for inclusion in a definition of computational thinking    the following section  based on the term s consistency of use and consistency of interpretation across the literature  summarizes the arguments presented above and suggests a definition of computational thinking     proposeddefinition the intent of this investigation is to shed new light on the discussions that attempt to develop a definition of computational thinking  the objectives for such a definition  as stated above  are  to define more narrowly  not more broadly  to bring an order to the criteria not necessarily to accommodate all viewpoints  to refine the definition to facilitate assessment  to retain the validity of work that has been done previously  such as the development of curriculums  to separate a definition from those activities that might promote acquisition of computational thinking skills  and to separate a definition from those artifacts and activities that evidence the use of computational thinking skills  justification for inclusion or exclusion is based on consistency of usage and consistency of meaning across the literature  the resulting definition reflects much of the consensus found in the literature while removing the less well defined terms  table   summarizes the justification for each prospective term s inclusion in or exclusion from a proposed definition of computational thinking  table    computational thinking definition terminology as supported by the preceding arguments  computational thinking is an activity  often product oriented  associated with  but not limited to  problem solving  it is a cognitive or thought process that reflects   the ability to think in abstractions    the ability to think in terms of decomposition    the ability to think algorithmically    the ability to think in terms of evaluations  and   the ability to think in generalizations  this proposed definition attempts to incorporate only those terms for which there is a consensus in the literature or those terms that are well defined across disciplines  the intent is to focus on the thinking aspect of the original phrase  in other words  computational thinking is a focused approach to problem solving  incorporating thought processes that utilize abstraction  decomposition  algorithmic design  evaluation  and generalizations     conclusion there is a genuine need for a robust and agreed definition of computational thinking  the definition can facilitate the development of computer science curriculums in line with wing s original vision to encourage computational thinking for all  the definition may also ensure that the k    curriculums will not become just a collection of interesting resources presented at teachers  discretions  the definition may ensure that appropriate assessment tools can be developed which measure computational thinking skills  the description narrows the definition by excluding some proposed terms  it separates the practice of skills and the results or evidence of the application of skills from the activity of thinking  however  it does not invalidate the curriculum designs  especially as they often focus on the doing or evidence of doing term status justification computational thinking  it leaves open the possibilities to develop assessment tools to measure the ability to think computationally  of course  the discussions of a definition for computational thinking are not yet concluded  it may well be that the definition changes as understanding of computational thinking develops over the coming years  this is especially true as younger learners are exposed to the concepts in fulfillment of wing s original vision of computational thinking for all  this review of the literature simply attempts to inform these discussions     references     barr  v    stephenson  c        bringing computational thinking to k     what is involved and what is the role of the computer science education community  acm inroads                bell  t   andreae  p    lambert  l        computer science in new zealand high schools  proceedings of the twelfth australasian conference on computing education   volume      brisbane  australia  australian computer society  inc      brinda  t   puhlmann  h    schulte  c        bridging ict and cs  educational standards for computer science in lower secondary education  proceedings of the   th annual acm sigcse conference on innovation and technology in computer science education  paris  france  acm      computer science teachers association task force        k    computer science standards  new york  acm      computing at school working group        computer science  a curriculum for schools  available  http   www computingatschool org uk data uploads computi ngcurric pdf  accessed                  denning  p  j        computing is a natural science  commun  acm                 denning  p  j        ubiquity symposium  what have we said about computation   closing statement  ubiquity                 gal ezer  j   beeri  c   harel  d    yehudai  a        a high school program in computer science  computer                 guzdial  m        education  paving the way for computational thinking  commun  acm                  guzdial  m        a definition of computational thinking from jeannette wing  computing education blog  online   available from  http   computinged wordpress com            a definition  of computational thinking from jeanette wing   accessed                 guzdial  m        a nice definition of computational thinking  including risks and cyber security  computing                                                        education blog  online   available from  http   computinged wordpress com            a nice  definition of computational thinking including risks and  cyber security   accessed            henderson  p  b   cortina  t  j    wing  j  m        computational thinking  proceedings of the   th sigcse technical symposium on computer science education  covington  kentucky  usa  acm  hu  c        computational thinking  what it might mean and what we might do about it  proceedings of the   th annual joint conference on innovation and technology in computer science education  darmstadt  germany  acm  iyer  s   baru  m   chita  v   khan  f    vishwanathan  u        model computer science curriculum for schools  available  http   www cse iitb ac in  sri papers csc  april     pdf  accessed              l heureux  j   boisvert  d   cohen  r    sanghera  k        it problem solving  an implementation of computational thinking in information technology  proceedings of the   th annual conference on information technology education  calgary  alberta  canada  acm  national research council        report of a workshop on the scope and nature of computational thinking  available  http   www nap edu catalog php record id        accessed              national research council        report of a workshop of pedagogical aspects of computational thinking  available  http   www nap edu catalog php record id        accessed              ubiquity        an interview with peter denning on the great principles of computing  ubiquity             wing  j        computational thinking  commun  acm             wing  j        computational thinking  online   available  http   www cs cmu edu afs cs usr wing www computational  thinking pdf  accessed            wing  j        computational thinking and thinking about computing  philosophical transactions of the royal society a                  wing  j        research notebook  computational thinking   what and why  the link  pittsburgh  pa  carneige mellon  
review demystifying computational thinking valerie j  shute a     chen sun a  jodi asbell clarke b a florida state university  usa b terc  usa articleinfo abstract educational research review              e    contents lists available at sciencedirect educational research review journal homepage  www elsevier com locate edurev article history  received   march      received in revised form    july      accepted    september      available online    september      keywords  computational thinking computational literacy problem solving programming contents this paper examines the growing field of computational thinking  ct  in education  a review of the relevant literature shows a diversity in definitions  interventions  assess  ments  and models  after synthesizing various approaches used to develop the construct in k    settings  we have created the following working definition of ct  the conceptual foundation required to solve problems effectively and efficiently  i e   algorithmically  with or without the assistance of computers  with solutions that are reusable in different contexts  this definition highlights that ct is primarily a way of thinking and acting  which can be exhibited through the use particular skills  which then can become the basis for performance based assessments of ct skills  based on the literature  we categorized ct into six main facets  decomposition  abstraction  algorithm design  debugging  iteration  and generalization  this paper shows examples of ct definitions  interventions  assess  ments  and models across a variety of disciplines  with a call for more extensive research in this area         elsevier ltd  all rights reserved     introduction                                                                                                                 definitionsofcomputationalthinking                                                                                      goalsandfocus                                                                                                       method                                                                                                                      procedure                                                                                                              inclusionandexclusioncriteria                                                                                          resultsfromtheliteraturereview                                                                                                characteristicsofcomputationalthinking                                                                                    componentsofct                                                                                                  differencesbetweenctandothertypesofthinkingskills                                                               relationshipofctwithcomputerscienceandprogramming                                                          interventionstodevelopcomputationalthinking                                                                              researchonctusingprogrammingtools                                                                             researchusingrobotics                                                                                             research using game design and other intervention tools                                                                                     ctskillsundergirdingprogramming robotics andgamedesign                                                     corresponding author  e mail address  vshute fsu edu  v j  shute   https   doi org         j edurev                      x        elsevier ltd  all rights reserved  v j  shute et al    educational research review              e             assessmentofcomputationalthinking                                                                                       scratch basedassessments                                                                                          game simulation basedassessment                                                                                 validatedctscalesforgenericusage                                                                               computationalthinkingmodels                                                                                          ourcomputationalthinkingdefinitionandframework                                                                              comparisonwithothermodels                                                                                            examplesofemergingmodelsofk   ct                                                                                discussion                                                                                                              acknowledgements                                                                                                      references                                                                                                                 introduction in the middle ages  only select groups of people  e g   priests and scribes  could read and write  but as the world evolved  increasingly more people needed these skills  today  the rapid onset of computers in the   th century is forcing an analogous revolution where digital literacy is now an essential skill to succeed in our complex  digital   st century world  and although we don t all need to become software engineers  the majority of us do use computers daily and need to understand how to communicate with them to most effectively harness their computing power  successful communication along these lines is called computational thinking  ct   over the past decade  ct has become a very hot topic in educational research and practice  thousands of entries appear on a general google search regarding its definition  instructional interventions  and assessment  many of these entries suggest that ct relates to coding or programming  but considering ct as knowing how to program may be too limiting  according to the national research council         everyone should acquire ct  not only programmers  ct skills include managing infor  mation effectively and efficiently with technologies in our data driven era  burke  o byrne    kafai        kim  kwon    lee        lu   fletcher        sanford   naidu        wing         a workforce with individuals possessing ct skills increases the competitiveness of the united states in the world economic market  nrc         although many programs claim to teach coding skills  rarely do they look deeply at the ways of thinking used in ct  analogous to inquiry as a way of thinking scientifically  ct is a set of practices that are entwined with ways of looking at problems that result in ct skills and understandings  yet  there is no existing curriculum building a ct foundation of un  derstanding for young learners  as there is in math or science  models are needed that help highlight ct within current classroom practices  because there are too few opportunities to fit new content within existing school curricula  many problems presented in current curricula  however  can be approached with ct  possessing good ct skills may be a motivator for students to pursue computer science  allan  barr  brylow    hambrusch        and other stem related majors  sneider  stephenson  schafer    flick         ct has also been linked to creativity and innovation  mishra  yadav    the deep play research group        repenning et al          and it has important applications in other stem areas  barr   stephenson        sengupta  kinnebrew  basu  biswas    clark         an exact definition of ct  however  remains elusive  barr  harrison    conery        grover   pea         in this paper  we discuss the various definitions of ct emerging from different disciplines  and we present a definition of ct in terms of how k    educators might think of building a solid foundation for ct in young learners  we break down ct into the components most often cited in the literature and propose a model for embedding ct learning and assessment within k    curricula       definitions of computational thinking computational thinking  ct  stems back to the constructionist work of seymour papert  papert              and was first coined as a term in a seminal article by wing         she explained that ct entails  solving problems  designing systems  and understanding human behavior  by drawing on the concepts fundamental to computer science   wing        p       as such  it represents an ability to analyze and then solve various problems  her arguments provided a fresh perspective on the re  lationship s  between humans and computers  and gave rise to a wave of research on ct  the most oft cited definition of ct comes from cuny  snyder  and wing         noting that ct is a thinking process where      solutions are represented in a form that can be effectively carried out by an information processing agent   as cited in wing        p      this relates not only to well structured problems  but also ill structured problems  i e   complicated real life problems whose solutions are neither definite nor measurable   other researchers have come up with their own definitions relative to their particular research areas  for instance  barr et al         concluded that in k     ct involves problem solving skills and particular dispositions  such as confidence and persistence  when confronting particular problems  berland and wilensky        defined ct as  the ability to think with the computer as tool   p       and suggested using  computa  tional perspectives  as an alternative to  computational thinking  to emphasize that ct can be constrained by contexts      v j  shute et al    educational research review              e    additionally  ct has been defined as      students using computers to model their ideas and develop programs   israel  pearson  tapia  wherfel    reese        p        explicitly linking ct to programming skills  as described above  ct definitions vary in their operationalization of ct in certain studies  and are not particularly generalizable  e g   berland   wilensky        ioannidou  bennett  repenning  koh    basawapatna        israel et al          the definition of ct is evolving as researchers begin to aggregate knowledge about ct       goals and focus in this paper  we intend to explore the scope and complexity of ct  and establish a clear definition and framework that will aid in the development of ct pedagogy and assessment  particularly for k     at the end  we provide current research examples and ideas for future research  our review addresses the following questions      what are the major charac  teristics and components of ct      what interventions are  or may be  used to train enhance ct      what types of measures are used to assess ct  and     what are the main theoretical frameworks models of ct  again  our main goal is to derive a general model of ct that may be used as a framework towards assessing and supporting ct  our model is derived from an extensive literature review and serves to guide the development of ct pedagogy and assessment in educational settings     method      procedure we began by collecting research papers relevant to ct  including peer reviewed publications and proceedings  plus one academic report from a national workshop on ct  we searched various databases using the keywords  computational thinking   quotation marks included   and specified that the term occurred either in the title or in the abstract  the following online databases and web sites were employed in this search collection effort  o eric  the educational resources information center  eric  consists of resources in education index  and current index to journals in education  eric is a broad and popular database containing educational reports  evaluations  and research  o psycinfo  this site is hosted by the american psychological association  which carries citations and summaries of scholarly journal articles  book chapters  books  and dissertations  in psychology and related disciplines  o jstor  a database of back issues of core journals in the humanities  social sciences  and sciences  the gap between the most recently published issue of any journal and the date of the most recent issue available in jstor is from   to   years  o google scholar  this web site was employed to search for and acquire specific references  google scholar is a web site providing peer reviewed papers  theses  books  abstracts  and articles from academic publishers  professional societies  preprint repositories  universities  and other scholarly organizations  we started the timeline in       when wing published her seminal article on ct  signaling the beginning of a corpus of research and projects on the topic  after collecting relevant papers  we screened the articles again  sorting them into con  ceptual papers and empirical studies  conceptual papers discussed the general features of ct  providing a theoretical framework or suggesting instructional practices to integrate ct into education  empirical studies tended to test and justify specific interventions and measure s  of ct via qualitative and quantitative research designs  finally  we integrated the findings from the literature review with empirical research to create our competency model  for ct  aiming to facilitate and assess ct in educational settings       inclusion and exclusion criteria in all  approximately    documents e empirical as well as theoretical papers e were initially collected  from this set  a total of more than    documents met the criteria for inclusion in the literature review  the inclusion criteria consisted of relevancy of the documents to the research topics in this article  e g   computational thinking skills characteristics and processes  models  assessments  and interventions   both experimental and non experimental studies were included  we created a table summarizing the full set of    papers collected  then deleted papers from the list for the following reasons   a  poor quality research described in the paper  e g   excessive statements and assumptions presented with inadequate support    b  tangential or no focus specifically on ct   c  empirical papers that measured something other than ct as the outcome  and  d  pilot studies that were low quality and or reported a small sample size    a competency model refers to a collection of knowledge  skills  and other attributes that comprise a particular construct  such as ct   it answers the question  what do you want to say about the person at the end of the assessment  variables in the competency model are usually called  nodes  and describe the set of variables on which inferences are based  v j  shute et al    educational research review              e           results from the literature review our review consists of four main parts  we begin by addressing the distinct characteristics of ct  next  we examine in  terventions to support ct followed by ct assessments used in k    and higher education  we end with a summary of ct research models       characteristics of computational thinking in this section  we define ct and distinguish it from other types of thinking  e g   systems thinking and mathematical thinking   we also discuss ct s relationship with computer science         components of ct wing        argued that ct does not mean to think like a computer  but rather to engage in five cognitive processes with the goal of solving problems efficiently and creatively  these include     problem reformulation e reframe a problem into a solvable and familiar one     recursion e construct a system incrementally based on preceding information     problem decomposition e break the problem down into manageable units     abstraction e model the core aspects of complex problems or systems     systematic testing e take purposeful actions to derive solutions  abstraction is the main element undergirding ct  wing         where people glean relevant information  and discard irrelevant data  from complex systems to generate patterns and find commonalities among different representations  wing         abstraction has layers  so one must define each layer and clarify the relationships between layers  this involves   a  abstraction in each layer   b  abstraction as a whole  and  c  interconnection among layers  for instance  defining an algorithm is one kind of abstractiondthe  abstraction of a step by step procedure for taking input and producing some desired output   wing        p         in addition to abstraction and problem reformulation  barr et al         argued that ct also consists of data organization and analysis  automation  efficiency  and generalization  automation is making a process or system operate automatically  efficiency means creating optimal solutions  and generalization involves applying ct strategies to solve new problems  barr and colleagues also included certain dispositions important to ct  such as confidence  persistence in relation to solving complex tasks  and the ability to work well in teams  similarly  ct described by bers  flannery  kazakoff  and sullivan        includes abstraction  generalization  and trial and error activities  they particularly emphasize the importance of debugging  i e   identifying and fixing errors when solutions do not work as expected   in a comprehensive report by the national research council  ct consists of five elements essential and universal across domains  nrc             hypothesis testing      data management      parallelism      abstraction  and     debugging  when solving a complex problem in any domain  one should generate and test hypotheses systematically to understand how the system works  it is impossible to test all possibilities  so selecting the right parameters to test is important  data management involves gathering data from various sources  processing data patterns  and representing data in a meaningful way  paral  lelism refers to simultaneously processing information from multiple sources or dimensions  abstraction focuses on modeling the workings of a complex problem system  finally  debugging refers to finding and fixing errors after building up particular models  recently  anderson        explicated five ct components      problem decomposition      pattern recognition      abstraction  i e   generalization of repeated patterns       algorithm design for solutions  and     evaluation of solutions  i e   debugging   based on the foregoing review  researchers have come up with similar ct constituent skills  the components common among researchers are  decomposition  abstraction  algorithms  and debugging  in our competency model  ct similarly consists of decomposition  abstraction  algorithms  debugging  as well as iteration and generalization  see detailed defini  tions  subcategorizations  and justifications in section            differences between ct and other types of thinking skills researchers are also studying the differences and similarities between ct and other types of thinking  e g   barr et al         grover   pea         in this section  we compare ct with mathematical  engineering  design  and systems thinking  mathematical thinking involves the application of math skills to solve math problems  such as equations and functions  sneider et al          harel and sowder        defined mathematical thinking as global across many problems and      governs one s ways of understanding   p       mathematical thinking consists of three parts  beliefs about math  problem solving processes  and justification for solutions  the main commonality between ct and mathematical thinking is problem solving processes  wing         fig    shows the full set of shared concepts of computational and mathematical thinking  problem solving  modeling  data analysis and interpretation  and statistics and probability  engineering involves skills needed to build or transform things in the world in order to construct better lives  bagiati   evangelou        as well as  applied science and math  solving problems  and making things   pawley        p        the     v j  shute et al    educational research review              e    fig     similarities and differences between ct and mathematical thinking  adapted from sneider et al          overlap between ct and engineering includes problem solving  along with understanding how complex systems work in the real world  wing         however  unlike engineering  ct is intended to help humans understand complex phenomena through simulations and modeling  which can transcend physical constraints  wing         to summarize  ct  mathematical thinking  and engineering stem from different disciplines  their differences lie in specific applications in their own domain  design thinking requires one to solve problems by thinking as a designer  razzouk   shute         computational thinking and design thinking both focus on problem solving  design thinking  like engineering  focuses on product specification and the requirements imposed by both the human and the environment  i e   practical problems   again  ct is not limited by physical constraints  enabling people to solve theoretical as well as practical problems  systems thinking refers to the ability to understand various relationships among elements in a given environment  shute  masduki    donmez         according to the competency model developed by shute et al          people with system thinking skills should be able to   a  define the boundaries of a problem system   b  model simulate how the system works conceptually   c  represent and test the system model using computational tools  and  d  make decisions based on the model  although ct and systems thinking both involve understanding and modeling systems  ct is broader than systems thinking  which focuses on identifying and understanding the workings of a system as a whole  ct aims to solve problems efficiently and effectively  going beyond modeling and understanding to include algorithmic design  automation  and generalization to other systems problems  in conclusion  ct is an umbrella term containing design thinking and engineering  i e   efficient solution design   systems thinking  i e   system understanding and modeling   and mathematical thinking as applied to solving various problems         relationship of ct with computer science and programming another area in need of clarification involves the relationships among ct  computer science  and programming  czerkawski   lyman         and although ct originates from computer science  wing         it differs from computer science because it enables people to transfer ct skills to domains other than programming  berland   wilensky         ct skills are not the same as programming skills  ioannidou et al          but being able to program is one benefit of being able to think computationally  israel et al          for instance  shute        examined the relationships among programming skills  prior knowledge  and problem solving skills  within     college and technical school students  participants who had no prior programming experience learned programming skills via an intelligent tutoring system  several assessments were administered to measure learners  incoming knowledge  i e   math and word knowledge   cognitive skills  i e   working memory and information processing speed   and particular aspects of problem solving skills  e g   problem identification  sequencing  and decomposition   in addition  a criterion test was used to measure learners  programming skills and knowledge after the intervention  results from a factor analysis and hierarchical regression showed that working memory  problem identification  and sequencing solutions are the best predictors of programming skill acquisition  thus  ct and programming skills as well as problem solving are closely related  in general  the field of computer science is broader than just learning about programming  and ct is broader than com  puter science  nrc        wing        in that ct includes a way of thinking about everyday activities and problems  in line with this perspective  lu and fletcher        proposed that teaching ct should not even use programming languages  instead the language should be based on notions that are familiar to most students to engender the acquisition of concepts like v j  shute et al    educational research review              e        abstraction and algorithms  like with most of the research targeting ct  its particular relationship to computer programming is evolving       interventions to develop computational thinking researchers have attempted to leverage programming tools  robotics  games simulations  and non digital interventions to teach ct knowledge and skills in various educational contexts  the target population ranges from kindergarten to un  dergraduates  table   summarizes all of the research studies we reviewed  arrayed by intervention tools         research on ct using programming tools due to its close relationship with computing and programming  ct skills appear to be improved via computational tools  such as scratch  mit         regarding the equivalence of programming skills to ct skills  cetin        compared the effects of employing scratch  experimental group  with c language  control group  to teach programming concepts to pre service it teachers  this experiment lasted for six weeks  and the participants  n         completed pre  and posttests relative to their achievement on and attitudes toward programming  additionally  nine participants per group were randomly selected to attend semi structured interviews  results showed the experimental group performed significantly better than the control group in terms of programming knowledge and skills  but there were no between group attitudinal differences  to promote algorithmic thinking via scratch  grover  pea  and cooper        designed a seven week scratch based ct course for  th and  th graders  n          similar to cetin s        study  ct gain was measured as pretest to posttest improvement on programming skills  the aim of this quasi experiment was to see which approach  face to face instruction vs  face to face plus online  supported deep learning relative to computational concepts  such as algorithms  loops  condi  tionals  and decomposition  the two conditions were matched in terms of receiving comparable instruction for the same duration of time  i e   four days per week     min per day  across seven weeks   findings revealed that both approaches lead to significantly higher ct gains  and students in the face to face plus online group performed significantly better than those in the face to face group  moreover  both groups successfully transferred their programming knowledge and skills to text based programming tasks  the strength of scratch is to help young people learn to think creatively  reason systematically  and work collaboratively  and thus is suitable to facilitate ct  it is easy to use with its drag and drop programming method  and provides a meaningful learning environment where learners engage in specific contexts  alice  carnegie mellon university        functions similarly  equipped with ready made code blocks  compared with scratch  it focuses on creating  d programming projects  it also can be utilized to train ct  for example  denner  werner  campe  and ortiz        randomly assigned     middle school students to either a dyadic work group or individual programming  students  ct skills were measured by their ability to accomplish alice tasks during one semester s course  results demonstrated that students working collaboratively achieved significantly higher ct scores than students working alone  and collaboration was especially beneficial to students with minimal table   articles reviewed sorted by intervention tools  study cetin       grover et al        denner et al        werner et al        atmatzidou   demetriadis       berland   wilensky       basu et al         bers et al        kim et al        yadav et al        setting higher education middle school middle school middle school high school middle school middle school kindergarten middle school higher education higher education participants    undergrads  pre service teachers      th and  th graders     students     students     students     th graders     th graders    students    students     sophomores  pre service elementary teachers      undergrads intervention program scratch  c language scratch alice  solo vs  pairs  alice  solo vs  pairs  lego mindstorms robotics lego vs  virtual robotics ctsim platform tangiblek robotics snap  small basic pps ct module duration   weeks   weeks one semester one semester one year   days    days    h  h    weeks one week content computer science ct course programming programming ct course science ecology  ct ct course poem computer science educational psychology measures multiple choice  open  ended questions  surveys  interviews multiple choice  quizzes  assignments  text based coding  projects surveys  tasks surveys  tasks questionnaires  think  aloud  interviews log files  tests  questionnaires questions  explanations  constructing algorithms questionnaires fill in the blanks  questions  multiple choice  surveys questionnaires     v j  shute et al    educational research review              e    programming experience  these findings are consistent with those reported in an earlier experiment conducted by werner  denner  campe  and kawamoto        testing     middle school students  basu  biswas  and kinnebrew        similarly viewed ct constructs as programming related concepts  such as sequencing  loops  and variables  and they considered iteration  problem decomposition  abstraction  and debugging as ct practices  they designed the ctsim platform to integrate ecology and ct learning for  th graders  basu et al  employed a pretest posttest design to test the effectiveness of scaffolding provided by a virtual agent embedded in ctsim  both the experimental  n         and control  n         groups learned ct and ecology via ctsim  but only the experimental group received scaffolding  that is  when students failed a given task  e  times  scaffolding was triggered  in that case  the virtual agent provided conversation prompts  and the students answered by choosing one of the options  which in turn triggered a response from agent  agent  student conversations were pre programmed to help struggling students  in the control group  such functionality was disabled  the ecology tests required students to choose correct answers and provide rationales for their answers  the ct tests required students to predict outcomes after reading program segments  and build algorithms with ct constructs to model scenarios  pre  and posttests showed significant gains in both groups on ecology and ct  and when pretest scores were used as a covariate  the experimental group  with scaffolding  significantly outperformed the control group in ecology learning gains and ct skills  with effect sizes of      and       respectively         research using robotics another fruitful area in which to develop ct skills is robotics  which is also closely related to programming  lego robotics is particularly popular  for example  lego mindstorms  http   www lego com en us mindstorms  was used to improve high school students   n          ct skills for a year  atmatzidou   demetriadis         the    two hour sessions focused on developing the following ct skills  decomposing problems  abstracting essential information  generalizing the solution to different problems  creating algorithms  and automating procedures  solving robot programming problems revealed students  ct skills  which were measured via rubrics related to the quality of problem solving performance  quantitative data showed that all participants  regardless of their age or gender  improved similarly on their ct skills following the intervention  qualitative data generated from interviews and think aloud protocols confirmed the effectiveness of robotics to develop ct concepts and solve problems effectively  lego robotics is a physical activity  berland and wilensky        compared the effects of lego robotics  n         versus virtual robotics  n         among  th graders  pre  and posttests on pseudo code programming measured ct gains  both groups of students significantly improved their ct skills  and there was no significant posttest difference between the two groups  it is interesting to note that the two groups perceived the problems differently  that is  the virtual robotics group tended to perceive the problem as a whole and then attempt to decompose the problem down to its details  while the physical robotics group initially focused on the constituent parts  how early can children learn ct skills  one study looked at teaching kindergarten students  n         ct skills  bers et al          these researchers developed the tangiblek robotics curriculum  http   ase tufts edu devtech tangiblek   which included    h of instruction and one final project to measure students  development of ct in terms of debugging  sequencing  loops  and conditionals  however  repeated measures between tasks did not reveal any linear ct development in kindergarten students  the researchers speculated that either  a  kindergarten students are simply too young to develop ct skills  or  b  the robotics intervention was too difficult for them  bers et al          therefore  it is important to teach ct concepts in a way suitable for students  developmental stages         research using game design and other intervention tools agentsheets is an authoring tool that uses game design to teach ct  as well as to promote students  interest and skills in computer science  see ioannidou et al        for details   agentsheets provides a low entry bar for inexperienced students  yet does not restrain students with advanced abilities from creating complex game systems  in one study  teachers and com  munity college students in two summer workshops learned how to animate interactions among objects via programming  using five agentsheets design tasks  basawapatna  koh  repenning  webb    marshall         unlike other studies  this research measured ct based on students  knowledge of relevant patterns  defined as object interactions  such as collision and absorption  these ct patterns represent the intersection of games and science simulations  after two weeks of intervention  the authors tested the participants  ct skills with eight questions  each representing a phenomenon sharing ct patterns across the five games  e g   sledding collision   participants needed to identify and justify usage of the ct patterns to create simulations of the phenomena  generally  all participants did very well in correctly identifying ct patterns  as indicated by the percent correct of their responses  however  the authors noted that the results do not necessarily mean that students could transfer ct knowledge from game design to simulations of scientific phenomena  teaching ct does not necessarily require digital tools  a paper and pencil programming strategy  pps  was created for non computer science majors  n           kim  kim    kim         it enabled participants  n         in one group to choose their preferred way to visualize and represent programming ideas  e g   via concept maps  tables  words  or symbols   its effects were compared to another group  who engaged in typical course instruction  n         for    weeks  typical instruction in this case refers to the regular programming course  using logo  softronics  inc          pre  and posttests revealed that students using the paper and pencil programming strategy showed significantly better understanding of ct and more interest in cs  than those learning via typical course instruction  the authors therefore argued that teaching ct without computers might be effective and efficient for non computer science majors  v j  shute et al    educational research review              e        a lecture based ct instructional module could also change pre service teachers  understanding of and attitudes toward integrating ct in their classrooms  yadav  mayfield  zhou  hambrusch    korb         the researchers tested a     min module focused on ct concepts such as decomposition  abstraction  algorithms  and debugging  after training  participants completed questionnaires with open ended questions related to ct and its connections with various disciplines  compared to the no treatment control group  n           a higher percentage of those in the experimental group  n          who received the ct training considered ct a way of thinking to solve problems  with or without the help of computers  moreover  they realized that ct was not restricted within the field of computer science  conversely  the control group viewed ct narrowlydas using computers to complete specific computing tasks and restricted to subjects involving computers  like computer science and math         ct skills undergirding programming  robotics  and game design the rationale for using programming  robotics  and game design to improve ct skills is because each one of these areas emphasizes various ct components  for instance  writing computer programs requires the analysis of the problem  e g   determining the goal to achieve   and then breaking the problem down to its constituent processes  e g   identifying sub goals and associated steps to achieve the goal   writing efficient programs requires abstraction and generalization  for instance  if one step needs to be repeated four times  an efficient solution involves looping the step rather than writing the same code four times  additionally  part of the programming code may be reused within similar problems  with minor adjustments  rather than rewriting a new program from scratch  and to test the correctness and efficiency of a program  debugging is necessary  that is why programming is frequently used to promote ct skills  similarly  robotics provides learners with tactile experiences to solve problems via ct skills  learners need to identify the general problem goal for the robot  then decompose the problem  e g   figuring out the number of steps or sub goals to accomplish the goal   towards this end  learners develop algorithms for the robot so that it can follow the instructions and act accordingly  when the robot does not act as expected  debugging comes into play  debugging requires the iterative processes of systematic testing and modifying  finally  as with programming and robotics  game design and gameplay entail various goals for players to solve  these can be smaller goals represented within levels of the game  and larger goals represented by boss levels and or part of the narrative  to succeed  players need to derive solution plans  and if a plan fails  then a modified plan is developed  by sys  tematically testing various plans  players find the most effective strategy to overcome challenges in the game  moreover  skillful players are able to adopt strategies used before to solve new problems  thus  problem decomposition  systemic testing and debugging  generalization  and iteration are skills required in gaming and are important components of ct       assessment of computational thinking because of the variety of ct definitions and conceptualizations  it s not surprising that accurately assessing ct remains a major weakness in this area  there is currently no widely accepted assessment of ct  this makes it difficult to measure the effectiveness of interventions in a reliable and valid way  grover   pea        kim et al         settle et al          having no standard ct assessment also makes it very difficult to compare results across various ct studies  researchers tend to develop and apply their own ct measures in various studies  depending on their particular operationalization of ct  kim et al          questionnaires and surveys are the most commonly used measure for knowledge of and or attitudes towards ct  e g   atmatzidou   demetriadis        denner et al         yadav et al          for instance  cetin        used surveys to measure preservice teachers  conceptual understanding of programming constructs  like arrays and loops  as well as attitudes towards computer science  yadav et al         similarly used surveys to examine pre service teachers  understanding of ct and their attitudes toward integrating ct into their teaching in the future  kim et al         designed questionnaire items to specifically measure college sophomores  logical thinking  as well as conceptual understanding of  and interest in computer science  viewing ct as the core of computational literacy  jun  han  kim  and lee        administered questionnaires on computational literacy among elementary school students  other researchers have conducted interviews and observations with participants to understand the development of ct skills  e g   cetin        israel et al          some of the researchers assessed ct skills through projects and related tasks  for instance  denner et al         and werner et al         developed a performance based assessment to measure ct by letting middle schoolers complete projects  such as a three stage task designed with alice  students needed to solve particular problems  e g   saving a fairy from a magic forest   other researchers tested learning gains of subject area knowledge  after incorporating ct into disciplinary instruction  e g   cetin        sengupta et al                 scratch based assessments several groups of researchers have used scratch to develop systematic ct assessments  brennan and resnick        claimed that scratch based projects could support long term learning by making learning meaningful within a particular context  they also argued for a dynamic measure to assess scratch users    e   years old  ct abilities over time  revealing the progression of learning and measuring both conceptual understanding and application of ct skills  their ct assessment included formative analysis  interviews  and design projects  the formative analysis involved evaluating users  portfolios to see the development of ct via projects completed over time  interviews allowed the researchers to dig deeper into the thinking processes of users  there were also three sets of design projects  varying in difficulty  which were employed as     v j  shute et al    educational research review              e    performance measures  each set included two tasks of the same difficulty level but with different representations  users had to choose one task from each set to describe and debug  to align with a particular scratch based ct course for middle schoolers  grover et al         designed a system of formative and summative assessments to support and measure ct skills  multiple choice items and quizzes throughout the course resembled the pseudo code in scratch  the items were used to consolidate students  knowledge of programming concepts  with timely feedback serving to explain various ideas and procedures  course assignments were completed using scratch and were evaluated by specific rubrics  the summative measure was a final test with multiple choice items plus open ended questions  along with a final project that was completed with a partner  in addition  the researchers developed a test based on ap programming exams to test whether students could transfer what they had learned to real text based pro  gramming code  another scratch based assessment is called pect  progression of early computational thinking   designed for elementary school students  seiter   foreman         this represents a guideline to measure three facets of ct  the first facet included evidence variables  which were collected directly from the command categories embedded in scratch  e g   operators and conditionals   the second facet was pattern variables  e g   motion and interactivity   which are broader than the specific evidence from the pseudo code library in scratch  the last facet was ct concepts  such as decomposition  abstraction  and algorithms  students  proficiency levels  i e   basic  developing  and proficient  per facet were measured according to rubrics         game simulation based assessment other researchers have proposed assessing ct via ct pattern analysis  ctpa  in k    schools  ct patterns are abstract programming concepts related to object interactions that students use to develop games and simulations  basawapatna et al         ioannidou et al          building object interactions in games required    ct patterns  defined by ioannidou et al          repenning et al         subsequently refined those    patterns to nine aspects  to measure transfer of ct from gaming to modeling scientific phenomena in stem courses  ctpa is used to generate spider web like graphic reports of the nine pat  terns  by comparing students  products with exemplars  this type of report provides visual information about the nature and degree of students  abilities  and which aspects need improvement  reports over time can demonstrate students  progression of ct skills  thus  teachers could provide instructional support given access to such graphic reports         validated ct scales for generic usage the aforementioned assessments were designed solely for the purpose of a particular study based on a specific inter  vention  recently  researchers have developed a scale to measure ct  rom an gonza lez  pe rez gonz alez    jime nez  ferna ndez         this scale includes    items and takes about    min to complete  it focuses on computational concepts  like directions and sequences  loops  if conditionals  and simple functions  the reliability of this scale is       the authors tested its validity among      spanish students from  th to   th grades  the results showed significant correlations with other standardized tests on mental abilities and problem solving skills  the problem solving test explained       of the variance in the ct scale  while the mental ability test explained      thus  the authors concluded that ct is more similar to problem solving skills and less aligned with reasoning  spatial  and verbal abilities  similar efforts have been conducted and reported by korkmaz  c akir  and o zden         the researchers developed a ct scale comprised of    items  measuring five factors  i e   creativity  cooperation  algorithmic thinking  critical thinking  and problem solving   they first conducted exploratory factor analysis  n          and then confirmatory factor analysis  n          among turkish college students  the results showed good data fit indices and evidence that the items measured targeted constructs  the reliabilities for the five factors ranged from      to       this scale measures ct differently from the previous one because the researchers operationalized ct differently  based on their own ct framework  described in section        in conclusion  this review of ct assessments showcases the pressing need for a reliable and valid assessment of ct skills across educational settings  so that researchers can determine whether their ct interventions are effective or not  rather than just looking at learning gains or attitudinal changes via homegrown measures  the assessment of ct also calls for dynamic information that can reflect learners  abilities and progression over time       computational thinking models having reviewed ct components  interventions  and assessments  this section examines theoretical frameworks of ct  as with ct definitions and assessments  there are no agreed upon models or frameworks for ct  atmatzidou   demetriadis         in this section  we examine four ct models proposed by researchers  first  atmatzidou and demetriadis        presented a simple  descriptive ct model  based on their operationalization of ct in previous studies  the model consists of five facets  abstraction  generalization  algorithms  modularity  and decom  position  it also provides examples of behaviors that students should demonstrate as evidence for each facet  see atmatzidou   demetriadis        p      for details   briefly  abstraction means distilling the core patterns from complicated systems  generalization involves applying problem solving strategies to different contexts  algorithms refer to ordered steps in  structions to implement solutions  modularity means the automation of problem solving solutions  and decomposition entails the breakdown of complex systems things into manageable pieces  the second model consists of ct concepts and abilities that should be incorporated into k    courses like math  science  social studies  and language arts  see barr   stephenson        p       it defines core ct facets  i e   data collection  data v j  shute et al    educational research review              e        analysis  data representation  decomposition  abstraction  algorithms  automation  parallelism  and simulation  across various disciplines  these ct facets should have different representations in different subjects  e g   representing data with charts or tables in math  and representing linguistic patterns in language arts   however  the specific demonstrations of ct facets within particular disciplines are not clearly stated in the paper  moreover  the provided examples of teaching practices are too vague for teachers to actually employ them  for example  abstraction in science class is described only as modeling a physical entity  the weakness of this model stems from  a  no clear definitions per ct facet making operationalization very difficult  and  b  failure to distinguish concepts from abilities  e g   abstraction is both a concept and an ability   thus  this model has room for improvement before serving as a guideline for teachers in k    education  brennan and resnick        presented a ct framework within the context of using scratch to facilitate ct  they catego  rized ct into three areasdconcepts  practices  and perspectives  table   shows our summary of their framework  a review paper on integrating ct in k    settings by lye and koh        was based on the brennan and resnick framework  later  zhong  wang  chen  and li        revised that model  see p      for details  by adding instruction into the ct concepts  and iteration into the ct practices  they also rephrased ct perspectives to emphasize creativity and collaboration  however  they did not elaborate on those modifications  which makes it hard to interpret the revised model  a fourth recent model aims to merge ct and regular classroom instruction  weintrop et al          the researchers analyzed    lesson plans for high school math and science courses by coding teaching practices that related to ct facets  then they categorized the specific facets into broader ct practices  and refined the categorization after consulting with lesson plan designers  in service high school teachers  and experts in ct and curriculum design  finally  they came up with a taxonomy containing four ct categories with    ct practices  see table     their taxonomy is based on specific classroom activities and presented concrete examples of ct classroom activities  showing how lesson plans can be designed by following the tax  onomy  this model is tailored to stem courses in high school  and shows promise with regard to integrating ct in secondary education  however  more research is needed to validate this model  lacking a consistent model might cause problems in designing interventions to support ct learning and in assessing ct knowledge and skills in various educational settings  this leads to the next part of this paper  namely  our proposed com  petency model of ct  which can be used to guide assessment and support of ct skills     our computational thinking definition and framework drawing from the aforementioned definitions and models  we define ct as the conceptual foundation required to solve problems effectively and efficiently  i e   algorithmically  with or without the assistance of computers  with solutions that are reusable in different contexts  as stated earlier  the components of ct that arise most often in the literature are  abstraction  decomposition  algorithms  and debugging  our model attempts to understand the cognitive processes underlying each of these ct facets and the associated behaviors that can help us develop a competency model that can be used for the assessment of ct  we additionally identify iteration and generalization as two more skills that are important in the devel  opment of ct  our model of ct emphasizes the importance of approaching problems in a systematic way  problem decomposition involves breaking a complex problem into smaller parts and using systematic processes to tackle each of those smaller problems  iterative  systematic debugging ensures that each part of the smaller problems is solved efficiently and with no loose ends  abstraction is the act of finding patterns within problems and solutions  and thus being in a position to generalize solutions for sets of similar problems  finally  algorithm design allows the development of re usable tools procedures for solving classes of problems  based on prior research  we have categorized ct into six main facets  decomposition  abstraction  algorithms  debugging  iteration  and generalization  the six facets of our ct model are described in table    this framing of ct underpins  and may be evidenced through  a variety of k    subject areas including mathematics  science  and even english language arts  table   summary of ct framework proposed by brennan and resnick         ct concepts ct practices ct perspectives sequences  instructions for computer to execute behaviors loops  repeat the same instruction for a specified number of times parallelism  concurrence of multiple instructions events  triggers for certain actions to happen to create interactive environments conditionals  constraints on execution of instructions  allowing for different outcomes operators  mathematical and string operations data  data storage  retrieval  and update being incremental and iterative  iterative processes to design and implement solutions  step by step testing and debugging  trial and error processes to test and remove malfunctions as warranted reuse and remix  building reusable instructions  building new products on others  work abstraction and modularity  modeling complex systems with basic elements expressing  perception of computation as a way of expression and creation connecting  perception of computation as a way of interacting and working with others questioning  raising questions and using technology to solve real life problems     v j  shute et al    educational research review              e    table   taxonomy of ct in stem courses  adapted from weintrop et al          ct category data practices modeling and simulation computational problem solving systems thinking      comparison with other models ct practice data collection data creation data manipulation data analysis data visualization conceptual understanding testing solutions model assessment model design model construction solution preparation programming tools selection solution evaluation solution development abstraction debugging system investigation understanding relationships multilayered thinking communication system management definition gather data using multiple computational tools generate data for large and complex systems reorganize data in a meaningful way use computational tools to analyze data and draw valid conclusions communicate and present data in multiple ways understand concepts deeply through modeling solve problems through hypothesis testing evaluate the effectiveness of models select essential elements for models implement new models or extend existing models decompose and reframe problems using suitable computational tools possess basic programming knowledge and skills evaluate pros and cons of plausible computational tools assess pros and cons of possible solutions develop solutions that can be applied to a wide range of problems distill the most relevant information from a problem identify and fix errors understand system functions as a whole understand the operation and interrelationship of elements in a system think from multiple perspectives and levels convey information effectively and efficiently define scope of systems and manage complexity our model focuses on the underlying conceptual foundation required to approach problems via a ct perspective and how that kind of ct perspective can be highlighted and supported in current k    subjects  this is in contrast to models that focus on just one specific subject area  such as brennan and resnick        who limit their model of ct to concepts related to coding  the three facets in their model are hierarchical with the foundation comprised of programming concepts  like loops and conditionals  their next layer relates to computing practices built on the conceptual knowledge  whereas the highest layer represents perspectives on computing  e g   a way of expression  creation  and communication   weintrop et al    s      model is derived from high school teaching practices that occur in stem courses  the four facets in their model represent a collection of possible classroom activities from which teachers can select the most relevant ones to facilitate ct acquisition  thus  their model is restricted to high school stem course settings  where we feel that a foundational basis for ct starts much earlier  analogous to scientific inquiry or mathematic reasoning       examples of emerging models of k    ct our competency based model of ct knowledge and skills strives to inform assessment methods to measure the foun  dational understandings of ct in k    learners  several research groups are just starting attempts to measure ct in k    settings  here we present several examples  ending with an illustration of the co authors  assessment related work on the conceptual foundation of several important ct facets  namely problem decomposition  abstraction  and algorithm design  as noted earlier  several research groups are studying learners  coding in scratch  a tool called dr  scratch  http   www  drscratch org   is currently in beta test  and used as the basis to analyze scratch code by quantifying the usage of loops  sequences  and other logistical facets of coding outlined by brennan and resnick         researchers at sri  grover et al         designed and implemented a middle school curriculum called foundations for advancing computational thinking  fact   fact strives to get a comprehensive picture of students  ct skills by examining cognitive  interpersonal  and intrapersonal variables  fact uses pedagogical strategies to support transfer from block based to text based programming  along with formative and summative assessments  including quizzes and tests as well as open  ended programming assignments  related to the acquisition of computational thinking skills  their findings show that stu  dents ages   e   using the fact curriculum experience improved algorithmic learning  understanding of computing  and transfer of skills from scratch to a text based programming context  building on this research  grover        see http    stemforall     videohall com presentations      suggests a framing of variables  expressions  loops  and algorithms  vela  to prepare young learners for ct  research underway by edge at terc  involves studying the development of ct within the logic puzzle game  zoombinis  edge studies how game based behavior can predict implicit knowledge and help teachers support explicit stem learning in   terc is a non profit studying math and science education innovations since       in       the educational gaming environments group  edge  was founded to study stem learning in digital games  table   summary of our ct facets and their definitions  v j  shute et al    educational research review              e        facet decomposition abstraction algorithms debugging iteration generalization definition dissect a complex problem system into manageable parts  the divided parts are not random pieces  but functional elements that collectively comprise the whole system problem  extract the essence of a  complex  system  abstraction has three subcategories   a  datacollectionandanalysis collectthemostrelevantandimportantinformationfrommultiplesourcesandunderstandthe relationships among multilayered datasets   b  pattern recognition  identify patterns rules underlying the data information structure   c  modeling  build models or simulations to represent how a system operates  and or how a system will function in the future  design logical and ordered instructions for rendering a solution to a problem  the instructions can be carried out by a human or computer  there are four sub categories   a  algorithm design  create a series of ordered steps to solve a problem   b  parallelism  carry out a certain number of steps at the same time   c  efficiency  design the fewest number of steps to solve a problem  removing redundant and unnecessary steps   d  automation  automate the execution of the procedure when required to solve similar problems  detect and identify errors  and then fix the errors  when a solution does not work as it should  repeat design processes to refine solutions  until the ideal result is achieved  transfer ct skills to a wide range of situations domains to solve problems effectively and efficiently  the classroom  rowe  asbell clarke    baker         implicit knowledge refers to knowledge that may not yet be formalized or expressed by a learner  but may be evident through actions and behaviors  in zoombinis  players engage in many cycles of ct strategy development that can be evidenced by their patterns of activity in the game  in the game  players are challenged to sort zoombinis according to underlying logic rules  e g   the puzzle named allergic cliffs will reject zoombinis with certain features  or a combination of features in upper levelsdsee fig      players typically move from trial and error  testing arbitrary zoombinis  to a systematic testing pattern  where they use problem solving strategies  some of which researchers can identify as evidence of ct  for instance  players may consistently test if zoombinis with one or more common features  e g   those with glasses  help the student identify a pattern to solve the fig     screen capture of the  allergic cliffs  level in zoombinis      v j  shute et al    educational research review              e    puzzle  this change  from trial and error to systematic testing provides evidence of problem decomposition  as players accumulate evidence  they may see common patterns and start testing towards a partial solution  eventually demonstrating their ability to abstract the patterns into an underlying rule of the puzzle  successful players exhibit repeated strategies  or algorithms  implemented over a collection of puzzles  for example  once players adopt the strategy of trying one variable at a time  and then implementing singular pieces of information into a final solution  that pattern can be observed across multiple puzzles  and other problem solving situations   to validate student learning of these facets of ct as a function of playing zoombinis  edge and empirical games have designed a set of online assessment items that focus on several of the fundamental facets of ct  problem decomposition  abstraction  and algorithm design  researchers are currently completing a validation study with     elementary and middle school learners  the assessments were conceptually and structurally the same for both elementary and middle school stu  dents  but differed in terms of difficulty  e g   based on number of variables to consider in a pattern and size of the array for abstraction problems   the example items shown in this paper are from the elementary school version of the assessment  the assessment for problem decomposition uses a series of progressively harder puzzles  similar to the game called mastermind  the board game developed by meirowitz in       see https   boardgamegeek com boardgame       mastermind  where learners must use feedback from the game to figure out which values per graphical feature  color and or shape and or pattern  are required to solve a puzzle  see fig     left side is the initial problem  and right side is receiving feedback on the current test   the learner needs to drag one object at a time into the test box to find the correct color  and in more difficult levelsdalso shape and pattern  in as few tries as possible  incorrect choices are placed in the  not solutions  box  feedback per object is represented by a green check per correct color shape pattern  and a red x for an incorrect attribute  for abstraction  pattern matching puzzles require learners to identify an underlying rule  the learners drag objects from a pool on the right into the gray cells on the left to complete the pattern  and thus applying the inferred rule  each colored shape can only appear once in the solution  see fig     for algorithm design  players must align a sequence of arrows  in advance  to guide a character along a path in a maze that fits specified criteria  in fig     the sequencing task requires the learner to insert directional arrows  along with the number of iterations as warranted  to guide a leprechaun to a pot of gold  in the fewest steps possible  while avoiding certain obstacles  finally  the ct assessment for the zoombinis study includes a set of general pattern recognition items  raven s progressive matrices  rpm  raven        as a baseline of learners  ability to infer and apply different patterns in increasingly complex situations  raven        pointed out that the rpm focuses on two components of general cognitive abilityeeductive and reproductive ability  eductive ability involves making sense out of chaos and generating high level schema to handle complexity  reproductive ability is the ability to recall and reproduce information that has been explicated  rule application in general is the behavior of following the basic rules of a problem in order to solve the problem  it is an outward expression of the solvers  perception of the problems  features  via both eductive and reproductive abilities  an example is shown in fig     for each item  learners click and drag the correct option among the eight possible options at the bottom to complete the pattern at the topdwhere the solution applies horizontally  vertically  and diagonally  these assessments strive to examine the fundamental cognitive underpinnings of ct in an abstract and non contextual manner  edge is using these assessments in combination with educational data mining of game behaviors in zoombinis  and observations of classroom ct learning to get a full picture of ct learning of students in grades  e      discussion in this review  we analyzed existing definitions of ct  with a focus on literature that could help describe the conceptual foundation of ct that should guide learning and assessment in k    settings  we discussed how ct is similar to  and distinct from other ways of thinking  e g   mathematical thinking and systems thinking   and described the relationships between ct fig     simple item in ct assessment for problem decomposition  v j  shute et al    educational research review              e        fig     example item in ct assessment for abstraction  fig     simple sequencing algorithmic design item in ct assessment  and computer science  we reviewed interventions and assessments used to develop and measure learners  ct skills  ranging from kindergarten to college level  finally  we presented examples of research striving to measure the development ct in experiences for k    learners  our goal with this review paper was to synthesize the literature in order to provide a general framework of ct  including its definition  facets  and elaboration per facet  to develop a model of ct that guides k    ct learning and assessment      v j  shute et al    educational research review              e    fig     example ct assessment item from raven s for pattern identification  this review of the literature has shed light on a number of gaps in ct research  for instance  a generally agreed upon definition of ct is missing in the literature  along with a specification of its components  wing         inconsistent term usage occurs in many papers  such as conflating computer science  computer programming  and ct  czerkawski   lyman        israel et al          the immaturity of the field that results in this ambiguity is compounded when looking at education  teachers are generally unfamiliar with ct and have difficulty finding connections between ct and their current curricula  designing and developing a reliable and valid ct assessment is key to successful education of ct embedded in multiple disciplines  grover   pea         but lacking a standard definition to operationalize ct consequently leads to research where measurements vary greatly across studies  which makes the results less convincing and certainly difficult to compare  another issue that needs to be resolved concerns the difficulty in judging whether in class ct interventions actually achieve their desired results  settle et al          again  researchers have pointed out the difficulty of assessing ct in class  rooms  and have called for real time assessment to provide learning progression data per student to support teachers  in  struction  bers et al         wolz  stone  pearson  pulimood    switzer         the framework we have proposed can be a guideline to develop assessment tasks that elicit evidence for specific ct skills  the examples we present of how ct is being measured in scratch  zoombinis  and fact are intended to highlight these possibilities  studies on transfer of ct are also needed  bers et al          one problem is how to identify the application of ct in other domains  czerkawski   lyman         efforts have been made by a few researchers  such as ioannidou et al          who tried to examine the transfer of ct acquired from games to math and science courses  similarly  repenning et al         aimed to investigate transferred ct skills from games to the creation of simulations of scientific phenomena  grover et al         found that students could apply computational concepts learned from scratch to specific text based programming languages  which is quite promising  in any case  the long term retention of ct skills  along with the application of ct skills to other contexts and domains  is under researched  a final area deserving research attention involves gender differences in the development of ct  females are often un  derrepresented in stem related subjects  particularly once they reach college  researchers may consider utilizing ct to motivate learners  especially females  to major in science fields  e g   grover   pea        kazimoglu  kiernan  bacon    mackinnon        repenning et al          however  the results of studies examining gender differences are inconsistent  atmatzidou and demetriadis        reported that girls  ct skills improved significantly after intervention  and that ultimately girls and boys reached the same skill level  girls tend to spend significantly more time learning online after school  resulting in v j  shute et al    educational research review              e        better performance than boys  grover et al          however  no gender differences were reported by werner et al         and yadav et al          computational thinking needs to be demystified  e g   barr   stephenson         towards this end  we have developed a definition and shown examples of a model that   a  considers ct as a logical way of thinking  not simply knowing a pro  gramming language   b  particularly focuses on conceptual development required to engage in problem decomposition  abstraction  algorithmic design  debugging  iteration  and generalization   c  examines performance based competencies related to each of these facets of ct  and  d  can be strengthened and emphasized within existing  e g  stem  curricula  our ct model presented in this paper is intended to be broadly applicable  while specific enough to inform measurement of ct learningdoverall and at the facet level  for diagnostic purposes   current research is in progress to validate this claim  we anticipate the next few years will bring many empirical studies to help refine this model for use across wide ranging contexts  acknowledgements this research did not receive any specific grant from funding agencies in the public  commercial  or not for profit sectors  co author xxx gratefully acknowledges funding from the us national science foundation  and intellectual support from the edge at terc team  this work is most closely related to grant nsf drl drk             references allan  v   barr  v   brylow  d     hambrusch  s         march   computational thinking in high school courses  in proceedings of the   st acm technical symposium on computer science education  pp     e      acm  anderson  n  d          a call for computational thinking in undergraduate psychology  psychology learning   teaching         e     http   dx doi org                            atmatzidou  s     demetriadis  s          advancing students  computational thinking skills through educational robotics  a study on age and gender relevant differences  robotics and autonomous systems         e     http   dx doi org         j robot              bagiati  a     evangelou  d          practicing engineering while building with blocks  identifying engineering thinking  european early childhood education research journal           e    http   dx doi org                x               barr  d   harrison  j     conery  l          computational thinking  a digital age skill for everyone  learning   leading with technology           e    barr  v     stephenson  c          bringing computational thinking to k     what is involved and what is the role of the computer science education community  acm inroads       e    http   dx doi org                          basawapatna  a   koh  k  h   repenning  a   webb  d  c     marshall  k  s         march   recognizing computational thinking patterns  in proceedings of the   nd acm technical symposium on computer science education  pp     e      acm  basu  s   biswas  g     kinnebrew  j  s          learner modeling for adaptive scaffolding in a computational thinking based science learning environment  user modeling and user adapted interaction          e    berland  m     wilensky  u          comparing virtual and physical robotics environments for supporting complex systems and computational thinking  journal of science education and technology         e     http   dx doi org         s               x  bers  m   flannery  l   kazakoff  e     sullivan  a          computational thinking and tinkering  exploration of an early childhood robotics curriculum  computers   education         e     http   dx doi org         j compedu             brennan  k     resnick  m         april   new frameworks for studying and assessing the development of computational thinking  in proceedings of the      annual meeting of the american educational research association  vancouver  canada   burke  q   o byrne  w  i     kafai  y  b          computational participation  understanding coding as an extension of literacy instruction  journal of adolescent   adult literacy         e     http   dx doi org         jaal      cetin  i          preservice teachers  introduction to computing  exploring utilization of scratch  journal of educational computing research  http   dx doi org                            advance online publication  cuny  j   snyder  l     wing  j  m          demystifying computational thinking for non computer scientists  unpublished manuscript  referenced in http   www  cs cmu edu  compthink resources thelinkwing pdf  czerkawski  b  c     lyman  e  w   iii         exploring issues about computational thinking in higher education  techtrends           e    http   dx doi org          s                  denner  j   werner  l   campe  s     ortiz  e          pair programming  under what conditions is it advantageous for middle school students  journal of research on technology in education         e     http   dx doi org                               grover  s         april   robotics and engineering for middle and high school students to develop computational thinking  in paper presented at the annual meeting of the american educational research association  new orleans  la  grover  s     pea  r          computational thinking in ke    a review of the state of the field  educational researcher           e    http   dx doi org                 x          grover  s   pea  r     cooper  s          designing for deeper learning in a blended computer science course for middle school students  computer science education         e     http   dx doi org                                harel  g     sowder  l          advanced mathematical thinking at any age  its nature and its development  mathematical thinking and learning          e    http   dx doi org         s        mtl        ioannidou  a   bennett  v   repenning  a   koh  k  h     basawapatna  a         april   computational thinking patterns  in paper presented at the annual meeting of the american educational research association  new orleans  la  israel  m   pearson  j   tapia  t   wherfel  q     reese  g          supporting all learners in school wide computational thinking  a cross case qualitative analysis  computers   education         e     http   dx doi org         j compedu              jun  s   han  s   kim  h     lee  w          assessing the computational literacy of elementary students on a national level in korea  educational assessment  evaluation and accountability         e     http   dx doi org         s                  kazimoglu  c   kiernan  m   bacon  l     mackinnon  l          a serious game for developing computational thinking and learning introductory computer programming  procedia social and behavioral sciences          e      kim  b   kim  t     kim  j          paper and pencil programming strategy toward computational thinking for non majors  design your solution  journal of educational computing research         e     http   dx doi org         ec      b  kim  y  c   kwon  d  y     lee  w  g          computational modeling and simulation for learning an automation concept in programming course  inter  national journal of computer theory and engineering        e     http   dx doi org         ijcte      v       korkmaz  o    c akir  r     o zden  m  y          a validity and reliability study of the computational thinking scales  cts   computers in human behavior         e     lu  j  j     fletcher  g  h         march   thinking about computational thinking  acm sigcse bulletin            e         v j  shute et al    educational research review              e    lye  s     koh  j          review on teaching and learning of computational thinking through programming  what is next for k     computers in human behavior        e    http   dx doi org         j chb              mishra  p     yadav  a          of art and algorithms  rethinking technology   creativity in the   st century  techtrends           e    national research council          committee for the workshops on computational thinking  report of a workshop on the scope and nature of computational thinking  washington  d c  national academies press  papert  s          mindstorms  children  computers and powerful ideas  new york  basic books  papert  s          situating constructionism  in s  papert    i  harel  eds    constructionism  cambridge  ma  mit press  pawley  a          universalized narratives  patterns in how faculty members define  engineering   journal of engineering education         e     raven  j  c          manual for raven s progressive matrices and vocabulary scales  research supplement no    the      british standardisation of the standard progressive matrices and mill hill vocabulary scales  together with comparative data from earlier studies in the uk  us  canada  germany and ireland  san antonio  tx  harcourt assessment  raven  j  c          the raven s progressive matrices  change and stability over culture and time  cognitive psychology       e    razzouk  r     shute  v          what is design thinking and why is it important  review of educational research         e     repenning  a   webb  d  c   koh  k  h   nickerson  h   miller  s  b   brand  c       repenning  n          scalable game design  a strategy to bring systemic computer science education to schools through game design and simulation creation  acm transactions on computing education  toce           e    http   dx doi org                  rom an gonz alez  m   pe rez gonz alez  j  c     jime nez ferna ndez  c          which cognitive abilities underlie computational thinking  criterion validity of the computational thinking test  computers in human behavior         e     rowe  e   asbell clarke  j     baker  r  s          serious games analytics to measure implicit science learning  in c  s  loh  y  sheng    d  ifenthaler  eds    serious games analytics  methodologies for performance measurement  assessment  and improvement  pp     e      switzerland  springer international publishing  sanford  j  f     naidu  j  t          computational thinking concepts for grade school  contemporary issues in education research  cier           e    http    dx doi org          cier v i        seiter  l     foreman  b         august   modeling the learning progressions of computational thinking of primary grade students  in proceedings of the ninth annual international acm conference on international computing education research  pp    e     acm  sengupta  p   kinnebrew  j  s   basu  s   biswas  g     clark  d          integrating computational thinking with k    science education using agent based computation  a theoretical framework  education and information technologies         e     http   dx doi org         s               x  settle  a   franke  b   hansen  r   spaltro  f   jurisson  c   rennert may  c   et al         july   infusing computational thinking into the middle and high school curriculum  in proceedings of the   th acm annual conference on innovation and technology in computer science education  pp    e     acm  shute  v  j          who is likely to acquire programming skills  journal of educational computing research         e    shute  v  j   masduki  i     donmez  o          conceptual framework for modeling  assessing  and supporting competencies within game environments  technology  instruction  cognition  and learning        e     sneider  c   stephenson  c   schafer  b     flick  l          computational thinking in high school science classrooms  the science teacher           e    weintrop  d   beheshti  e   horn  m   orton  k   jona  k   trouille  l   et al          defining computational thinking for mathematics and science classrooms  journal of science education and technology            e     http   dx doi org         s                  werner  l   denner  j   campe  s     kawamoto  d  c         february   the fairy performance assessment  measuring computational thinking in middle school  in proceedings of the   rd acm technical symposium on computer science education  pp     e      acm  wing  j  m          computational thinking  communications of the acm           e    wing  j  m          computational thinking and thinking about computing  philosophical transactions of the royal society a  mathematical  physical and engineering sciences           e      http   dx doi org         rsta            wing  j  m          computational thinking  what and why   unpublished manuscript  pittsburgh  pa  computer science department  carnegie mellon university  retrieved from https   www cs cmu edu  compthink resources thelinkwing pdf  wolz  u   stone  m   pearson  k   pulimood  s  m     switzer  m          computational thinking and expository writing in the middle school  acm transactions on computing education  toce           e    yadav  a   mayfield  c   zhou  n   hambrusch  s     korb  j  t          computational thinking in elementary and secondary teacher education  acm trans  actions on computing education  toce           e    http   dx doi org                  zhong  b   wang  q   chen  j     li  y          an exploration of three dimensional integrated assessment for computational thinking  journal of educational computing research         e     http   dx doi org                           
developing computational thinking in the classroom  a framework june      working group of authors  prof  paul curzon queen mary university of london  school of electronic engineering and computer science teaching london computing project  http   www teachinglondoncomputing org    funded by the mayor of london and department of education through the london school s excellence fund mark dorling bcs  the chartered institute for it and computing at school network of excellence project  http   www computingatschool org uk   funded by the department for education  industry partners and awarding bodies digital schoolhouse london project  http   www digitalschoolhouse org uk   funded by the mayor of london and department of education through the london school s excellence fund thomas ng west berkshire council school improvement adviser  ict   assessment  dr  cynthia selby bay house school and sixth form  gosport  hampshire southampton education school  university of southampton dr  john woollard southampton education school  university of southampton bcs  chartered institute for it barefoot computing project  http   www barefootcas org uk   funded by the department for education   copyright      computing at school this work is licensed under the creative commons attribution non commercial license  see http   creativecommons org licenses by nc      for details  introduction computational thinking sits at the heart of the new statutory programme of study for computing   a high quality computing education equips pupils to use computational thinking and creativity to understand and change the world   department for education        p        this document aims to support teachers to teach computational thinking  it describes a framework that helps explain what computational thinking is  describes pedagogic approaches for teaching it and gives ways to assess it  pupil progression with the previous ict curriculum was often demonstrated through  how   for example  a software usage skill  or  what  the pupil produced  for example  a poster   this was partly due to the needs of the business world for office skills  such use of precious curriculum time however has several weaknesses  firstly  the country s economy depends on technological innovation not just on effective use of technology  secondly  the pace of technology and organisational change is fast in that the ict skills learnt are out of date before a pupil leaves school  thirdly  technology invades all aspects of our life and the typically taught office practice is only a small part of technology use today  in contrast  the new computing curriculum has an enriched computer science element  computer science is an academic discipline with its own body of knowledge that can equip pupils to become independent learners  evaluators and potentially designers of new technologies  in studying computer science  pupils gain not only knowledge but also a unique way of thinking about and solving problems  computational thinking  it allows the pupils to understand the digital world in a deeper way  just as physics equips pupils to better understand the physical world and biology the biological world  simon peyton jones gives an account of why learning computer science and computational thinking is a core life and transferable skill in a talk filmed at tedxexeter  peyton jones         to prepare our pupils to understand the consequences of technological change  adapt when using technologies  develop new technologies or even to work in jobs that haven t yet been invented  not only does the  what   and  how   of the subject need to be taught  pupils also need to develop techniques to ask and be able to answer the question  why    computational thinking supports doing so  computational thinking skills are the set of mental skills that convert  complex  messy  partially defined  real world problems into a form that a mindless computer can tackle without further assistance from a human    bcs        today  however  there is an interpretation  led by the popular media  implying that the new computing curriculum focuses on  coding   crow        nettleford         this gives a misleading message  especially to those new to the discipline  in contrast  our framework presented below aims to support teachers  understanding of computational thinking across the full breadth and depth of the subject of computing and offers a way to easily and effectively integrate it into classroom practice  the framework there are four interconnected stages of development to our computational thinking framework  stage    definition stage    concepts stage    classroom techniques stage    assessment we overview each in the subsequent sections  stage    definition to support the sharing of curriculum materials and classroom practices  an agreed definition that is suitable for the classroom is needed  we use the interpretation forwarded by professor jeannette wing  who originally popularised the idea of computational thinking  she defines it as     the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information processing agent   cuny  snyder  wing        cited in wing        p          these solutions can be carried out by any processing agent  whether human  computer  or a combination of both   wing         we chose this definition because it is based on wing s original definition and has gained consensus amongst academics  its emphasis is on pupils performing a thought process  not on the production of artefacts or evidence  it therefore fits the direction of change in the current curriculum development  stage    concepts the next stage is to define the core concepts involved in computational thinking  based on a review of academic references  selby and woollard        suggest the following are key    algorithmic thinking   evaluation   decomposition   abstraction   generalisation we outline these concepts with examples below  giving linked classroom techniques in the next section  algorithmic thinking is a way of getting to a solution through clear definition of the steps   nothing happens by magic  rather than coming up with a single answer  like     the pupils develop a set of instructions or rules that if followed precisely  whether by a person or a computer  leads to answers to that and similar problems  for example  we all learn algorithms for doing multiplication at school  if we  or a computer  follow the rules we were taught precisely we can get the answer to any multiplication problem  once we have the algorithm we don t have to work out how to do multiplication from scratch every time we are faced with a new problem  evaluation is the process of ensuring an algorithmic solution is a good one  that it is fit for purpose  various properties of algorithms need to be evaluated including whether they are correct  are fast enough  are economic in the use of resources  are easy for people to use and promote an appropriate experience  trade offs need to be made as there is rarely a single ideal solution for all situations  there is a specific and often extreme focus on attention to detail in computational thinking based evaluation  for example  if we are developing a medical device to deliver drugs to patients in hospital we need to be sure that it always delivers the amount of drug set and that it does so quickly enough once start is pressed  however  we also need to be sure that nurses will be able to set the dose quickly and easily without making mistakes and that it won t be frustrating or irritating for patients and nurses to use  there is likely to be a trade off to be made between speed of entering numbers and helping avoid mistakes being made when doing so  the judgement about it being quick and easy has to be made systematically and rigorously  decomposition is a way of thinking about problems  algorithms  artefacts  processes and systems in terms of their parts  the separate parts can then be understood  solved  developed and evaluated separately  this makes complex problems easier to solve and large systems easier to design  for example  if we are developing a game  different people can design and create the different levels independently provided key aspects are agreed in advance  through decomposition of the original task each part can be developed and integrated later in the process  a simple arcade level might also be decomposed into several parts  such as the life like motion of a character  scrolling the background and setting the rules about how characters interact  abstraction is another way to make problems or systems easier to think about  it simply involves hiding detail   removing unnecessary complexity  the skill is in choosing the right detail to hide so that the problem becomes easier without losing anything that is important  it is used as a way to make it easier to create complex algorithms  as well as whole systems  a key part of it is in choosing a good representation of a system  different representations make different things easy to do  for example  when we play cards  we use the word  shuffle   every player understands that  shuffle  means putting the cards in a random order  the word is an abstraction  the same type of abstraction works when programming  implementing  shuffle  in a computer game means giving a way to randomise the cards  we can refer to shuffling throughout the program and understand what is meant without having to think about how it is actually done by the program  all that is needed is that the program does include a description somewhere of how shuffling is to be done  as an example illustrating the difference the representation can make  consider an art project  pupils studying monet could take a digital picture of a haystack painting in a gallery  in doing so they have created a representation of it on the computer as pixels  they can then easily manipulate this digital representation in ways that would be very hard with a different representation or in the real world  for example  the colours could be changed by an algorithm  in this way a series of different but related versions of the painting could be created  generalisation is a way of quickly solving new problems based on previous problems we have solved  we can take an algorithm that solves some specific problem and adapt it so that it solves a whole class of similar problems  then whenever we have to solve a new problem of that kind we just apply this general solution  for example  a pupil uses a floor turtle to draw a series of shapes  such as a square and a triangle  the pupil writes a computer program to draw the two shapes  they then want to draw an octagon and a    sided shape  from the work with the square and triangle  they spot that there is a relationship between the number of sides in the shape and the angles involved  they can then write an algorithm that expresses this relationship and uses it to draw any regular polygon  in summary  each of the above techniques fits into the well established system design life cycle of computing projects in the business  academic and scientific communities  in practice they are used together in a rich and interdependent way to solve problems  the emphasis in these concepts is on practical techniques or thought processes  not on the production of artefacts or evidence  stage    classroom techniques the descriptions of the concepts above are high level  although important  on their own they don t explain how computational thinking can be embedded into the classroom and integrated into pedagogy  therefore  our next step  table    is to identify learner behaviours associated with each  concept examples of techniques algorithmic thinking writing instructions that if followed in a given order  sequences  achieve a desired effect  writing instructions that use arithmetic and logical operations to achieve a desired effect  writing instructions that store  move and manipulate data to achieve a desired effect   variables and assignment  writing instructions that choose between different constituent instructions  selection  to achieve a desired effect  writing instructions that repeat groups of constituent instructions  loops  iteration  to achieve a desired effect  grouping and naming a collection of instructions that do a well defined task to make a new instruction  subroutines  procedures  functions  methods   writing instructions that involve subroutines use copies of themselves to achieve a desired effect  recursion   writing sets of instructions that can be followed at the same time by different agents  computers or people  to achieve a desired effect  parallel thinking and processing  concurrency   writing a set of rules to achieve a desired effect  declarative languages   using a standard notation to represent each of the above  creating algorithms to test a hypothesis  creating algorithms that give good  though not always the best  solutions  heuristics   creating algorithmic descriptions of real world processes so as to better understand them  computational modelling   designing algorithmic solutions that take into account the abilities  limitations and desires of the people who will use them  evaluation assessing that an algorithm is fit for purpose  assessing whether an algorithm does the right thing  functional correctness   designing and running test plans and interpreting the results  testing   assessment whether the performance of an algorithm is good enough  comparing the performance of algorithms that do the same thing  making trade offs between conflicting demands  assessment of whether a system is easy for people to use  usability   assessment of whether a system gives an appropriately positive experience when used  user experience   assessment of any of the above against set criteria  stepping through algorithms code step by step to work out what they do  dry run   tracing   using rigorous argument to justify that an algorithm works  proof   using rigorous argument to check the usability or performance of an algorithm  analytical evaluation   using methods involving observing a system in use to assess its usability or performance  empirical evaluation   judging when an algorithmic solution is good enough even if it is not perfect  assessing whether a solution meets the specification  criteria   assessing whether a product meets general performance criteria  heuristics  decomposition breaking down artefacts  whether objects  problems  processes  solutions  systems or abstractions  into constituent parts to make them easier to work with  breaking down a problem into simpler but otherwise identical versions of the same problem that can be solved in the same way  recursive and divide and conquer strategies  table    computational thinking concepts and associated techniques  examples of algorithmic thinking  evaluation  decomposition  generalisation and abstraction  are found at all stages  it is the context that determines the relevance and challenge of the activity  we have therefore tried not to attribute computational concepts and learner behaviours to particular key stages  phases of education  because doing so would imply that they are age dependent in a way that they are not  they are capability dependent  it is also important to emphasise that computational thinking concepts are not the content for the subject of  computing   the subject content is set out in the national curriculum programme of study  computational thinking skills enable learners to access parts of that subject content  stage    assessment the final stage needed is a way to assess the increasing competence of pupils in computational thinking  this can be done using an adapted version of the existing subject framework for the computing subject itself  to support classroom teachers  computing at school published an assessment framework called  computing progression pathways   dorling and walker      a   it sets out the major knowledge areas of computing and gives specific indicators of increasing levels of mastery of the subject in those areas  this assessment framework was produced by a small team of authors and reviewers  all teachers and academics  based on their classroom experiences  it is an interpretation of the breadth and depth of the content in the      national curriculum for the computing programme of study  this breadth affords an opportunity to view the subject of computing as a whole  rather than the separate subject strands of computer science  digital literacy and information technology proposed by the royal society         the assessment framework identifies the dependencies and interdependencies between concepts and principles as well as between the three subject strands  abstraction reducing complexity by removing unnecessary detail  choosing a way to represent artefacts  whether objects  problems  processes or systems  to allow it to be manipulated in useful ways  hiding the full complexity of an artefact  whether objects  problems  processes  solutions  systems  hiding functional complexity   hiding complexity in data  for example by using data structures  identifying relationships between abstractions  filtering information when developing solutions  generalisation identifying patterns and commonalities in problems  processes  solutions  or data  adapting solutions or parts of solutions so they apply to a whole class of similar problems  transferring ideas and solutions from one problem area to another separate pathways are given for the areas of algorithms  programming   development  data and data representation  hardware   processing  communication   networks and information technology  for example  the pathway around the subject area of algorithms at its lowest level involves understanding of what an algorithm is and an ability to express simple linear algorithms with care and precision  it then moves through levels of being able to express more complicated algorithms using selection and loops  to at the highest level being able to design algorithms that make use of recursion as well as having an understanding that not all problems can be solved computationally  the assessment framework is also presented where the learning outcomes are organised by the separate subject strands of computer science  digital literacy and information technology  dorling and walker      b   a further version has been developed to incorporate provision for the concepts of computational thinking  selby  dorling and woollard         it now includes a description of how it can be used to acknowledge progression and reward performance in mastering both the content of the computing programme of study and the ideas of computational thinking  dorling  walker      c   for example  algorithmic thinking is demonstrated not just in the algorithms and programming   development pathways  but also in constructing appropriate search filters  data   data representation  and in demonstrating understanding of the fetch execute cycle  hardware   processing   see figure   as an example of what you can expect to see in computing progression pathways with computational thinking  figure    mapping the learning outcomes from computing progression pathways to the concepts  from stage    of computational thinking  using the framework to plan lessons when planning and teaching a scheme of work in any subject  teachers refer to the planning teaching evaluating cycle  computational thinking can be included in the planning stage in four steps within the planning phase of each lesson in the planning teaching evaluating cycle  see figure    step    determine the  why  at the start of the unit of study  stage    as well as the possible topics  the column header names from the progression pathways assessment framework  that the scheme of work will be covering  repeat steps       when planning each lesson in a unit of study step    decide  what  the learning outcomes are for the lesson from the computing progression pathways assessment framework  stage     which enable the pupils to move closer to completing or achieving the  why   step    use the predefined mapping in the computing progression pathways assessment framework to identify the possible associated computational thinking concepts  stage     step    use the computational thinking concepts to identify possible techniques  how  to incorporate into and highlight as part of the chosen classroom activities  stage     figure    mapping the   stages of the framework to  why    how  and  what   it is important to note that the most important step in this process is the last step  step     just because pupils can evidence learning in the computing progression pathways assessment framework and that the learning outcome is mapped to computational thinking  it does not necessarily mean that the pupils will have performed computational thinking  completion of an activity  in itself  is not evidence that computational thinking has occurred  a case study below  we illustrate the application of the above framework with a case study  based around a lesson one of the authors  dorling  has used in his classroom  in the sub section of each activity  we highlight how different parts of the activity draw on the computational thinking concepts  ct   in the classroom  these concepts could be drawn out explicitly in  for example  a discussion at the end where the pupils reflect on the computational thinking skills they have used through the activity  topic networking   communications   using a binary protocol to transfer information why i first lead a group discussion aiming to draw out why networks are important  we discuss the applications pupils use on a regular basis  such as a search engine or network file shares and how these applications have completely changed the way we do things  i lead pupils to ask  what actually happens in the wire to make information go back and forth   how activity    recap   i remind the pupils that they have previously studied and understood the different layers involved in computer architecture  applications  the operating system and the hardware     ct  abstraction of functionality   as we move from hardware to operating system to applications we move through increasing layers of system abstraction as each hides the messy details of the level below  activity    i introduce the pupils to the layers of network architecture  application  transport and network and point out the similarity to the computer architecture layers     ct  abstraction of functionality   in a similar way we move up through similar layers of abstraction from the network to transport layer to applications as each hides the messy details of the level below     ct  generalisation of solution  applying the same technique to a similar problem    we have transferred the technique of analysis by layers from computer architecture to network architecture  activity    i remind pupils of their understanding of denary  decimal  numbers stored as binary numbers  that is denary numbers are an abstraction of the binary code  they hide the detail of how the numbers are actually stored  i suggest that they could use this knowledge to invent their own transportation layer protocol     ct  abstraction of data   denary numbers conceal the complexity of the binary representation activity    i give the pupils a simple circuit  i e  a battery  wires and a lamp  and ask them to transfer a decimal number across the room to a friend using the lamp  it is up to the learners to perform the conversion into binary and transfer it across the room  i encourage them to think of the different tasks involved  the sender and receiver do different though related things  the recipient will receive the number  assemble the string of binary and convert the binary back into a denary number     ct  decomposition of a problem   identification of the high level steps necessary to accomplish the whole task    ct  algorithmic thinking   development of the ordering of the high level steps necessary to accomplish whole task and working out the detailed steps for each  obviously without an agreed protocol there is complete mayhem  pupils have to work together to agree a protocol for    light on  and    light off   the confusion continues until the pupils realise the time or clock element that is needed so the start point is known and the light is either on or off for two seconds with a one second pause between each on or off     ct  evaluation of functional correctness   pupils reflect on the problems  even mayhem  of initial solutions and realise the need to improve them    ct  algorithmic thinking   the trial and feedback development loop used between pupils is the heuristic development of an algorithm an alternative activity for pupils who have not yet fully grasped binary is to have them look at historical communication methods they have heard of such as morse code or smoke signals with a view to identifying similarities between them and the current challenge     ct  generalising a solution from one problem to another   identifying that in each case one representation  a letter  is transformed into another  morse code   recognising a pattern in the solutions  activity    a standard protocol is agreed amongst the whole class  this was achieved through a discussion of the problems of interoperability if every pair has chosen a different way of communicating  they are then given a series of numbers the first two identifying the person  e g  table individual  and the next two being the message to that person  rather than an actual ip address at this stage of learning     ct  abstraction of data   understanding that an ip address is a name for a machine pupils again struggle with this as it can be difficult with a long string of binary  so they are likely to come up with an idea to chunk or group the binary  this is analogous to a packet     ct  abstraction of data   inventing the concept of a chunk or packet  with chunks being sent  received and reassembled     ct  algorithmic thinking   working out the detailed instructions to make the chunking work  activity    having mastered these concepts  we discuss ip addressing as analogous to the uk post code system     ct  generalising a solution from one problem area to another   recognising a pattern in the solutions to network packet sending and sending a letter by post future learning opportunities can be built on these foundations  for example  visual packet tracing tools can be used to consider the location of web servers around the world  digital literacy questions can be posed about breaking the law when using the internet and considering in which country a crime may have been committed  what from the activities discussed here  the pupils have had opportunities to use techniques associated with computational thinking concepts as indicated in order to demonstrate their understanding of the programme of study content  depending upon the level of understanding expressed or observed in the pupil behaviours  it is possible to award progress in the subject content from the computing pathways at the following levels  pink level   algorithms  understands what an algorithm is and is able to express simple linear  non branching  algorithms symbolically  demonstrates care and precision to avoid errors    information technology  talks about their work and makes changes to improve it  yellow level   algorithms  designs simple algorithms using loops and selection i e  if statements  uses logical reasoning to predict outcomes  detects and corrects errors i e  debugging  in algorithms    information technology  talks about their work and makes improvements to solutions based on feedback received orange level   algorithms  recognises that some problems share the same characteristics and use the same algorithm to solve both    data   data representation  understands the difference between data and information    communications   networks  understands the difference between the internet and internet service  for example  world wide web    information technology  makes appropriate improvements to solutions based on feedback received and can comment on the success of the solution  blue level   algorithms  designs solutions by decomposing a problem and creates a sub solution for each of these parts  purple level   data   data representation  understands how bit patterns represent numbers and images  knows that computers transfer data in binary    communications   networks  understands data transmission between digital computers over networks  including the internet i e  ip addresses and packet switching   algorithms  can identify similarities and differences in situations and can use these to solve problems    information technology  uses criteria to evaluate the quality of solutions  can identify improvements making some refinements to the solution and future solutions  summary to engage pupils in lessons and so get the best out of them  it is important that they understand why they are learning topics  some materials supporting the previous ict curriculum focused on what was being taught   perhaps a skill  and what the pupils produced  perhaps a spreadsheet model   thinking about  what  and  how  the pupils were producing an artefact but  why  they were learning a given skill were secondary considerations  the  why  was often an assessment objective or a qualification examination instead of a real world reason  criticism of this approach identified a lack of focus on understanding the deeper  how  and  why   problems are solved  systems are made      royal society         the four step framework we have set out gives a practical way to both understand computational thinking and introduce the ideas into the classroom context  it can be used both to support the planning of activities to increase the opportunities for pupils to develop computational thinking skills and to assess their progress in doing so  this can be achieved by considering the  why  of the challenge they are setting for the learners at the outset  pupils should then employ a variety of their computational thinking abilities as described in table    the  how   to develop understanding or solve the problem in hand  the  what  is expressed in the evidence of the actual subject learning  this could be what the pupils produce  artefact   what the pupils understand or express  write  test  verbalise   or what behaviour is observed  generalising   the  what  matches the learning outcome statements from the computing progression pathways assessment framework  figure   maps the four stages of development described above to the notion of focusing on the  why    how  and  what   figure    mapping the   stages of the framework to  why    how  and  what   references bcs  the chartered institute for it        call for evidence   uk digital skills taskforce  available  http   policy bcs org sites policy bcs org files bcs   response   to   ukdst   call   for   evidence   final pdf  accessed              department for education        the national curriculum in england  framework document  available  http    www education gov uk nationalcurriculum  accessed              dorling  m    walker  m      a  computing progression pathways  available  http   community computingatschool org uk resources       accessed              dorling  m    walker  m      b  computing progression pathways grouped by cs  it and dl  available  http    community computingatschool org uk resources       accessed              dorling  m    walker  m      c  computing progression pathways with computational thinking  available  http   community computingatschool org uk resources        accessed             nettleford  w        primary school children learn to write computer code  available  http   www bbc co uk  news uk england london           accessed              peyton jones  s        teaching creative computer science  available  http   tedxexeter com            simon peyton jones teaching creative computer science  accessed              royal society        shut down or restart  the way forwards for computing in uk schools  available  https    royalsociety org   media education computing in schools            computing in schools pdf  accessed               selby  c   dorling  m    woollard  j        evidence of assessing computational thinking  https   eprints soton ac uk         accessed              selby  c    woollard  j        computational thinking  the developing definition  available  http   eprints soton ac uk         accessed              wing  j        computational thinking  commun  acm                available  http   dl acm org citation cfm  id          accessed              wing  j        research notebook  computational thinking   what and why  the link  pittsburgh  pa  carneige mellon  available  http   www cs cmu edu link research notebook computational thinking what andwhy  accessed              
how kids code and how we know  an exploratory study on the scratch repository efthimia aivaloglou felienne hermans e aivaloglou tudelft nl f f j hermans tudelft nl abstract block based programming languages like scratch  alice and blockly are becoming increasingly common as introductory languages in programming education  there is substantial research showing that these visual programming environ  ments are suitable for teaching programming concepts  but  what do people do when they use scratch  in this paper we explore the characteristics of scratch programs  to this end we have scraped the scratch public repository and retrieved         projects  we present an analysis of these projects in three different dimensions  initially  we look at the types of blocks used and the size of the projects  we then investigate complexity  used abstractions and programming concepts  finally we detect code smells such as large scripts  dead code and duplicated code blocks  our results show that    most scratch programs are small  however scratch programs consisting of over     sprites exist     programming abstrac  tion concepts like procedures are not commonly used and    scratch programs do suffer from code smells including large scripts and unmatched broadcast signals  keywords scratch  block based languages  programming practices  code smells  static analysis    introduction scratch      is a programming language developed to teach children programming by enabling them to create games and interactive animations  the public repository of scratch programs contains over    million projects  scratch is a block based language  users manipulate blocks to program  block based languages have existed since the eighties      but have recently found adoption as tools for programming education  in addition to scratch  also alice      blockly    https   developers google com blockly  permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full cita  tion on the first page  copyrights for components of this work owned by others than acm must be honored  abstracting with credit is permitted  to copy otherwise  or re  publish  to post on servers or to redistribute to lists  requires prior specific permission and or a fee  request permissions from permissions acm org  icer      september              melbourne  vic  australia  c     acm isbn                                 doi  http   dx doi org                         and app inventor      are block based and aimed at novice programmers  several studies have shown that block based languages are powerful as tools for teaching programming                  previous works involving static analysis of scratch programs have evaluated the application of various programming con  cepts in scratch projects           recent works have focused on bad programming practices within scratch programs       and automated quality assessment tools have been proposed for identifying code smells     and bad programming prac  tices          in a recent controlled experiment we found that long scripts and code duplication decrease a novice program  mer s ability to understand and modify scratch programs       the goal of this paper is to obtain an understanding of how people program in scratch by analyzing their program  ming artifacts  i e   the saved and shared scratch projects  with this we aim to quantitatively evaluate the use of pro  gramming abstractions and concepts  moreover  knowing that bad programming habits and code smells can be harm  ful       we also want to explore whether they are common  to address this goal  we answer the following research ques  tions  rq  what are the size and complexity characteristics of scratch programs  rq  which coding abstractions and programming concepts and features are commonly used when programming in the scratch environment  rq  how common are code smells in scratch programs  our study is based on data from the scratch project repos  itory  by scraping the list of recent projects   we have ob  tained         public scratch projects and performed source code analysis on them  to the best of our knowledge  this is the first large scale exploratory study of scratch programs  the contributions of this paper are as follows    apublicdatasetof       non emptyscratchprojects  section        an evaluation of the data set in terms of size  com  plexity  programming concepts and smells  section      a discussion of the implications of our findings for ed  ucational programming language designers  section     https   scratch mit edu explore projects all  software engineering research group delft university of technology mekelweg         cd  delft  the netherlands raloecwtamiontshaaecrknsnotonowedxloecdlsugose isvfoet rhragotoytvahelitrsyn cmforennetrtripibguhrtitpotnosepwsuaobsnlilasyuh thoorredprorduccoe atuhtihsoaretidclbey  oarntoemal  ployee  contractor or affiliate of a national government  as such  the government       relevant scratch concepts scratch is a block based programming language aimed at children  developed by mit  scratch can be used to create games and interactive animations  and is available both as a stand alone and as a web application  the main concepts in the scratch programming environment are  we refer the reader to     for an extensive overview   sprites scratch code is organized by  sprites   two dimen  sional pictures each having their own associated code  scratch allows users to bring their sprites to life in var  ious ways  for example by moving them in the plane  having them say or think words or sentences via text balloons  but also by having them make sounds  grow  shrink and switch costumes  scripts sprites can have multiple code blocks  called scripts  it is possible for a single sprite to have multiple scripts initiated by the same event  in that case  all scripts will be executed simultaneously  events scratch is event driven  all motions  sounds and changes in the looks of sprites are initiated by events called hat blocks    the canonical event is the when green flag clicked  activated by clicking the green flag at the top of the user interface  in addition to the green flag  there are a number of other events possible  including key presses  mouse clicks and input from a computer s microphone or webcam  signals events within scratch can be user generated too  users can broadcast a message  for example when two sprites touch each other  all other sprites can then react by using the when i receive hat block  custom blocks scratch users can define their own blocks  which users can name themselves  called custom blocks  the creation of custom blocks in scratch is the equiv  alent of defining procedures in other languages       because the term  procedures  is common in related work  we will refer to custom blocks as  procedures  in the remainder of this paper  procedure parameters can be textual  numeric or boolean  when a user defines a procedure  a new hat block called define appears  which users can fill with the implementation of their procedure     research design and dataset the main focus of this study is to understand how peo  ple program in scratch  by analyzing the characteristics of scratch projects  to answer our three research questions  we conducted an empirical quantitative evaluation of project data we collected from the scratch project repository  in the following paragraphs we describe the dataset  the pro  cess and the tools we used for analyzing it  and the methods we followed for detecting code smells      dataset in order to collect the set of scratch projects in the dataset we built a web scraping program  the scraping program  called kragle  starts by reading the scratch projects page  and thus obtains the project identifiers of projects that were  http   wiki scratch mit edu wiki hat block most recently shared  subsequently  kragle retrieves the json code for each of the listed projects  we ran kragle on march  nd      for    hours and  during that time  it obtained a little over         projects  out of the          we failed to parse and further analyze       projects due to technical difficulties with the json files  kragle  as well as all scraped projects and our analysis files are available   once we obtained the scratch projects  we parsed the json files according to the specification of the format   this resulted in a list of used blocks per project  with the sprites and the stage of the project  we also cross referenced all blocks with the scratch wiki to determine the shapes and the category of all blocks  for example  when green flag clicked is a hat block from the events category      data analysis all scraped project data  including the list of used blocks and parameters  were imported in a relational database  we used sql queries  which are also made available   for filter  ing  aggregating and extracting all statistical data required to address our three research questions  we also randomly sampled and manually inspected edge cases in the results  for example empty or overly complex projects  data for these cases are provided as part of the dataset   to answer rq   we measured the size of projects based on the number of blocks in scripts and sprites and we cal  culated descriptive statistics  which are presented in section      for measuring the complexity of the scripts we used the mccabe cyclomatic complexity metric       a quantita  tive measure of the number of independent paths through a program s source code  this is commonly calculated per script by counting the number of decision points in the script plus one  the decision points that scratch supports are the if and the if else blocks  for rq   we used the data on the code blocks and their categories to perform statistical analysis of applied program  ming abstractions and concepts  similarly to     and       we consider the use of certain blocks to indicate that a pro  gramming abstraction or concept is being used in a certain project  in section     we present the results related to the utilization of procedures  variables  loops  conditional state  ments  user interactivity and synchronization  for rq   we focused on four types of code smells  dupli  cated code  dead code  large script and large sprite  in the duplicated code smell analysis  our first step was to define what we consider a code clone in the context of scratch pro  gramming  a script that is composed of a set of blocks of the same type connected in the same way and is repeated within or across sprites of the same project  for the identi  fication of clones we did not take into account the values of the parameters that may be used in the blocks  so that two blocks that only differ in the values of parameters are con  sidered to be equal  we also investigated the case of clones with the same parameter values  and we refer to them as ex  act clones  the next step in the analysis was to determine the minimum size of the scripts that are considered clones instead of incidentally similar  we examined the number of detected clones for different script sizes and present the results in figure    based on this distribution  we opted to   https   github com tudelftscratchlab scratchdataset  http   wiki scratch mit edu wiki scratch file format                                                                                                                                                                                                                      clones across sprites clones within sprites figure    number of cloned scripts of different block sizes across and within sprites number of cloned scripts number of sprites with code figure    number of sprites in the analyzed projects    number of sprites number of scripts                figure    size of sprites and scripts in number of blocks adopt the number also used by the authors in       which is a minimum size of five blocks per script  in the context of scratch  we consider the long method and the large class smells as large script and large sprite smells respectively  for these two smells we use the number of blocks as the size metric  figure   presents the number of blocks in scripts and sprites of our dataset  we used these statistics to split the dataset and retrieve the top     largest scripts and sprites  as is commonly done in both source code analysis     and analysis of end user programming artifacts like spreadsheets       using that strategy  we set the thresh  olds for the calculation of the large script and large sprite     blocks and    blocks respectively  the results we obtained using these thresholds are presented in section         results in the following sections  for each of the research ques  tions  we describe the results obtained through the analysis of the         scratch projects in our dataset      program size and complexity the dataset contains a relatively small number of projects without any code                  through random man  ual sampling we found that in some cases these projects con  tains only sprites and costumes  but no code  while other projects were entirely empty apart from the scratch cat added by default  since these projects are empty in terms of code  we excluded them from further analysis  leaving the final number of analyzed non empty projects to                            number of blocks number of scripts  in all sprites  figure    number of scripts in the analyzed projects                                                                number of blocks figure    number of blocks in the analyzed projects                                                    figure    mccabe cyclomatic complexity of the           analyzed scripts                  scripts projects projects projects                                 more                           number of blocks in script                          more cyclomatic complexity mean min q  median q  max size complexity procedures programming concepts sprites with code per project scripts per project number of blocks per project blocks in stage per project blocks in sprites per project blocks in procedures per project mccabe cyclomatic complexity  cc  per script mccabe cc per procedure script procedures per project with procedures arguments per procedure numerical arguments per procedure with arguments text arguments per procedure with arguments boolean arguments per procedure with arguments calls per procedure scripts with calls per procedure variables per project scripts utilizing variable lists per project conditional statements per project loop statements per project user input blocks per project broadcast receive statements per project                                                                                                                                                                                                                                                                                                                                                                                                                        table    summary statistics of the dataset of         non empty scratch projects in table   we summarize the statistics for the analyzed metrics  we use the mean value and the five number sum  mary to describe the dataset in terms of the number of sprites with code per project  including the stage sprite  and the number of scripts and blocks per project  figures      and   plot the distribution of these size metrics  we find that the majority of scratch projects are small      of the projects have up to   sprites     scripts and    blocks  while one fourth of the projects have up to    blocks  on the other end     of the projects          have more than    sprites and               consist of more than     blocks  the analysis also highlighted some surprisingly large projects      with more than     sprites and even    projects with more than        blocks  whose scratch identifiers are made available for further inspection   the number of blocks metric was further analyzed to un  derstand code organization in more depth  the majority of scratch code        out of            blocks is written within sprites  an additional      of the total blocks are found in the stage class  more interestingly  the remain  ing        are blocks within defined procedures  which are found in only               of the pro jects  the pro jects that contain procedures use them a lot  almost half of their total blocks          are within procedures  we further analyzed the utilization frequency of the dif  ferent block shapes and categories  as defined in the scratch documentation  figures   and   present the results in terms of number of blocks from the total            blocks in the dataset projects  the most commonly used blocks are from the control and data categories  the others category in  cludes the blocks related to procedure calls and arguments  to understand the complexity of the scratch projects in our dataset  we use the mccabe cyclomatic complexity  the results of this metric per script are plotted in figure    the majority          of           scripts contain no decision points  while        have a cyclomatic complexity of    con  figure    number of blocks from each category in the analyzed projects figure    number of blocks of each shape in the analyzed projects                                                                                   stack reporter hat cap c boolean                                                                                                                          more number of procedures retrieved analyzed non empty  used for statistics  projects with  procedures        recursive procedures       variables        lists       number of pro jects                                                                                                                                                    conditional statements user input blocks loop statements repeat until  condition  broadcast   receive cloned scripts across sprites cloned scripts within sprites cloned procedures cloned blocks across sprites exact clones across sprites exact clones within sprites dead code large scripts large sprites                                                                                                   figure    number of procedures for the        projects that include at least one procedure                                                            more number of arguments table    elements and characteristics of the projects in the dataset taining exactly one decision point  the complexity is higher  over    for       of the scripts  the analysis also highlighted     scripts with a cyclomatic complexity over     and up to       cyclomatic complexity was greater  mean value of       in defined procedures  with        of the procedures having at least one decision point      programming abstractions and concepts the first method for abstraction that we investigate are procedures  in the dataset we found         procedures in               projects  as summarized in table    the projects that contain procedures have an average of      procedures  with        of these projects having up to    figure   shows the distribution of procedures in projects  regarding procedure arguments  we found that        have no arguments and        have only one  shown in figure      the majority of procedure arguments          are nu  meric  and the least used argument type is the boolean one        of the total procedure arguments  found in       of the procedures  the use of procedures in projects was further investigated through the use of procedure calls  summarized in figure     most procedures are called exactly once         of them  or twice          and from exactly one script         of them   examining the origin of procedure calls  we ob  served that most of the calls          originate from other procedures  and       even originate from the same proce  dure  making them recursive calls  these recursive proce  figure     number of arguments of the procedures in the dataset dures are found in       projects  whose identifiers are made available   as shown in table    almost one third of the projects use variables and a small number         use lists  the num  ber of variables that is being used is also limited  with only       of the projects having five or more variables  the distribution of variable and list utilization is shown in fig  ure     exceptional cases exist  the analysis highlighted     projects with more than     variables and with a maximum of      examining the initialization of variables through the set  variable  to  value  blocks  we found that for       of all variables this was missing  while failing to ini  tialize a variable in scratch will not result in a runtime error as in some other programming languages  correctly setting the initial state of the program is important      regardingprogramcontrolfeatures conditionals if  con  rq   the majority of scratch projects are small and sim  ple      of the projects have up to   sprites     scripts and    blocks  the majority       of scripts contain no decision points  most code is written in sprites  there exist surprisingly large and complex projects                                          procedure calls    figure     number of calls of each procedure in the dataset procedures  log scale  procedures  logarithmic scale  projects                                         number of variables and lists                                                                    more number of cloned scripts across sprites exact clones across sprites within sprites figure     number of used variables and lists figure     cloned scripts in the dataset projects                                                              more number of copies of cloned scripts across sprites exact clones across sprites within sprites block when    key pressed when this sprite clicked  sensing  key    pressed   sensing  ask    and wait  sensing  mouse down   sensing   attrib  of     sensing  mouse x  sensing  mouse y when  sensor     value   sensing  video    on    projects occurrences                                                                                                                                     figure     number of copies of the identified clones rq   a small number of projects      use procedures  but they use them a lot and for more complex code  most procedures are called once or twice  from a single script which  in more than half of the cases  is another proce  dure  recursive procedure calls exist in             of the total  pro jects  one third of the pro jects use vari  ables  sometimes without initializing them      of the projects contain conditional statements and     contain loops  but conditional loops are rarely used  more than half of the pro jects are interactive      of the pro jects use broadcast and receive blocks  table    frequency of use of user input blocks in the         projects of the dataset dition  then and if  condition  then else blocks  are used by        of the projects  loops  blocks repeat  tim  es  foreverandrepeat until  condition  aremorecom  mon  used by        of the projects  the most common of the three is the forever block  accounting for        of all loops and the least common one is the repeat until  con  dition  block  accounting for        of all loops and used in        of the total projects  investigating user interactivity functionality  we found that        of the projects in the dataset contain user input blocks an average of      blocks per such project  table   lists the frequency of use of user input controls  we do not include the when green flag pressed block here  as this is just used to start a scratch program and hence cannot be considered input into the program  the most commonly used user input block is the when key pressed  found in                of the total  projects  the most frequently used parameter for the key attribute is the space key  fol  lowed by the arrows and then the letters and numbers  as detailed in section    users can define their own events  using the blocks broadcast  broadcast and wait and when i receive  these blocks are used in        of the projects  broadcast and wait is rarely used  in       of the projects      code smells the duplicated code smell is the first smell that we exam  ine  as explained in section      we use   as the minimum number of blocks for the identified clones  in total  in the dataset we found         scripts cloned across sprites in                of the total non empty  projects          copies of these scripts were found  making each clone being copied an average of      times  figure    plots the distri  bution of clones across pro jects  the ma jority of pro jects contain up to two cloned scripts  figure    plots the num  ber of copies of the identified clones  it is of interest that                 of the identified clones are copied three or more times  and even in     cases from     projects they are copied more than    times and up to       we further inspected which of the identified clones were duplicated within the same sprite                 of the total  clones  in        of all pro jects        of the pro jects contain cloned procedure definitions  which were measured to               of the total  clones  exact clones were found in        of the total projects  their total number    clones  log scale  projects projects  log scale  was                of the total  clones  exact clones in the same sprite were rare  found in       of the projects  apart from whole scripts  we also examined cases where scripts differ only in the first  hat  block  this way we exam  ine if scratch programmers assign the same functionality to handle different types of events  cloned functionality blocks are found to be rare  without considering the first block  only       additional clones were found in     projects  the second smell that we examine is the dead code smell  we identify four types of dead code      procedures that are not invoked      unmatched broadcast receive messages      code that is not invoked and     empty event scripts  i e   scripts that contain an event block alone  investigat  ing the first type  we find that a significant number of the defined procedures         or        are not called in the projects  this is also shown in figure    and it occurs in       projects  for the second type  we examined the broadcast receive messages and found that they are not al  ways synchronized        of the when i receive blocks were found to wait for a message that is never being broad  casted  while      of the broadcast blocks broadcast a mes  sage that is not being received  this lack of syncronization occurs in               of the total  projects  the third and fourth cases are incomplete scripts  those are either never invoked due to the lack of a starting when  trigger  block from the scratch events or control cat  egory  or are comprised of only a when  trigger  block without any functionality  a total of         scripts like that were found in                of the total  projects  the majority of these scripts         are scripts missing a hat block  examining the size of these dead scripts         are composed of a single block  however  some dead scripts are considerably large        dead scripts in       different projects have more than    blocks and up to         the number of projects exhibiting the dead code smell  considering all four types of dead code combined  is                of the total projects   finally  we examine the large script and the large sprite smells  the thresholds we use for the identification of large scripts and large sprites are    blocks and    blocks respec  tively  as explained in section      the number of projects exhibiting the large script smell  i e   containing at least one script with    or more blocks  is                of the total projects  and the number of projects with the large sprite smell is                     discussion     implications we believe a large scale study of programs like the cur  rent can help language designers to tailor their language  in this section we highlight directions in which our study could support language design  there are many other implications to be considered  which is why we have made our dataset public        popularity of different block types our analysis shows that some categories of blocks are rarely used  like the  pen  blocks  of which only         oc  cur within               of the total  programs  hence  in future changes to the language   pen  blocks might be less important to users to support or maintain        dead code in our analysis  we find that more than one quarter of the scratch projects contain dead scripts  in a sense  the dead scripts are harmless  as they are not executed  how  ever  they do cause  visual clutter  and might be distracting to novice programmers  as it might be hard to see which scripts are dead  in contrast to other visual educational languages  scratch does not indicate scripts that are dead  lego mindstorms  for example  does give the user feedback on dead blocks by making them gray  looking at the number of unconnected blocks  we hypoth  esize that scratch programmers have a need for a separate workspace to store unconnected blocks temporarily  we en  vision that would be like the  backpack   a scratch feature meant to move scripts across sprites  in order to help novice programmers keep their code clean  the programming inter  face could actively encourage users to move unconnected blocks to that workspace when they exit the environment        exact clones between sprites with occurrences in     of the scratch projects in our dataset  the use of exactly identical clones between sprites is relatively common  in a sense  the scratch users are not to blame for that  as scratch does not support procedure calls between sprites  only within them  so in many cases there is no way to share the functionality other than by making a copy  we are not aware of the underlying rationale of the scratch team that lead to this decision  however it seems that a large part of the scratch users would use the functionality to call procedures between sprites        sharing of scripts and procedures investigating the use of clones between projects  we ob  serve that there are       scripts that are used in multiple projects  sometimes as often as in       different projects  this seems to indicate that there are common patterns in scratch projects  which means it might be very beneficial to scratch programmers if they could not only share their projects  but also share some of their functionality  for others to use  like a library  an example of such a library could be  functions for platforming games  including the movement of sprites  collision detection and the implementation of  lives   this might empower new scratch users to get started faster      insights for computing education our findings confirm that scratch is mainly used for its intended purpose as a first exposure programming environ  ment for creating simple programs and interactive anima  tions  the majority of programs are small and more than half are interactive and contain no conditional statements  the analysis also indicates that computational concepts like conditionals and variables are being applied  conditional statements are found in     of the projects and variables in      the same does not hold for loops  even though     of the projects contain loops  only     contains conditional loops  we attribute the increased use of the forever loop rq   code clones are found in     of the projects  with almost half of the clones copied three or more times  in the same or across sprites      of the projects contain code that is never invoked  and thus exhibit the dead code smell  in some cases these scripts are large  the large script smell is found in     of the projects and the large sprite one in         to the scratch language design and we are skeptical over whether it indicates an understanding of loop concepts  only    of the projects contain procedures  and those use them a lot and for more complex code  which is an indication of use by more experienced programmers  this very essential programming concept is therefore not suffi  ciently applied  which can be attributed both to limitations imposed by the scratch environment  like the local scope of procedures  and to the difficulty for internalizing certain computational thinking concepts before a certain age       the high occurrence of cloned scripts  in     of the proj  ects  could be the result of the limited use of procedures  other code smells are also frequently found      of the projects include dead code and     have large scripts  know  ing from prior research that long scripts and code duplica  tion decreases ability to understand and modify scratch pro  grams       and that scratch programmers tend to exhibit certain bad programming habits       we believe educating novice programmers on code quality concepts is an issue that should be further researched  it must be noted that the scope of this study includes the programming artifacts alone  our findings are limited by the lack of     process data and     data on the age and other characteristics related to the programmers  however  the project data that is available in our dataset can facili  tate further studies on computing education  and this is the reason that we are publishing it      threats to validity a threat to the validity of this study is the fact that we did not scrape a random sample  but the most recent         projects  it could be the case that the programming habits of scratch users are changing over time  however  we coun  terbalanced that by using a large dataset which comprises around    of all    million shared scratch projects   furthermore we use the number of blocks in the scratch projects as a measure for the length of a program  while this does not exactly correspond to the  length  of a program in lines  and there can be multiple scratch blocks on one line  we however believe that the number of blocks is a good proxy for size  and we plan a future experiment in which we will compare  lines of scratch code  to  number of blocks      related work the evaluation of block based languages in general  and scratch in particular  as tools for programming education has received significant research attention during the past years  a number of studies have been carried out on the understanding of programming concepts and the program  ming practices of novice programmers in block based envi  ronments  on the programming skills they develop  and on the quality of scratch programs  for example  a study on the internalization of program  ming concepts with scratch with    students was presented in       concepts like loops  conditional loops  message pass  ing  initialization  variables and concurency were examined  and it was found that students had problems with the last three  in a later study with an equal set of subjects      the same authors identified two bad programming habits in scratch  namely bottom up development and extremely fine grained programming  they connected the later to the   https   scratch mit edu statistics  reduced use of if blocks and finite loops and the increased use of infinite loops  a finding that is verified by our study  in          projects created by    students working in groups were evaluated based on a list of criteria related to program  ming concepts  code organization and usability design  large scale analyses of scratch projects have been per  formed using the dataset made available by the lifelong kindergarten group at the mit media lab  which contains data for scratch projects created until       when the web  based programming environment was introduced  in       this dataset was used for exploring the learning patterns of programmers in terms of block use over their first    pro jects  dasgupta et al  investigated how pro ject remixing relates to the adoption of computational thinking concepts      in      the use of programming concepts was examined in relation to the level of participation  commenting  remix  ing  etc   the gender  and the account age of       scratch programmers  most related to our study for the second research question of programming abstractions and concepts is the work by maloney et al        who analyzed     scratch projects for blocks that relate to programming concepts including loops  conditional statements  variables  user interaction  synchro  nization  and random numbers  compared to their findings  our investigation reveals increased use of the first three con  cepts  and especially variables  the scratch automated quality analysis tools hairball     and dr  scratch      are also related to our work on smell detection  the hairball scratch extension is a lint like static analysis tool for scratch that can detect initialization prob  lems and unmatched broadcast and receive blocks  in their work       moreno and robles extended hairball to detect two bad programming habits in scratch  not changing the default object names and duplicating scripts  and apply them for evaluating     projects from the scratch repository  the results on script duplication are substantially different from ours we find projects with script clones to appear half as frequently  the dr  scratch tool      includes bad naming  code duplication and dead code identification functionality  and also evaluates scratch projects in terms of abstraction  parallelism  logical thinking  synchronization  flow control  user interactivity and data representation     conclusions in this paper we presented a large scale study on         projects we scraped from the scratch repository  we ana  lyze these projects in terms of size  complexity  application of programming abstractions and utilization of programming concepts including procedures  variables  conditional state  ments  loops  and broadcast receive functionality  we find that procedures and conditional loops are not commonly used  we further investigate the presence of code smells  in  cluding code duplication  dead code  long method and large class smells  our findings indicate that scratch programs suffer from code smells and especially from dead code and code duplication  in addition to the findings presented in this paper  we provide as contributions the dataset that we used for our study  as well as the project identifiers and information on the edge cases that we found in the dataset in terms of size and number of procedures  variables  cyclomatic complexity  clones and dead code         references     t  l  alves  c  ypma  and j  visser  deriving metric thresholds from benchmark data  in   th ieee international conference on software maintenance  icsm        pages       ieee computer society            b  boe  c  hill  m  len  g  dreschler  p  conrad  and d  franklin  hairball  lint inspired static analysis of scratch projects  in proceeding of the   th acm technical symposium on computer science education  sigcse      pages          new york  ny  usa        acm      k  brennan  c  balch  and m  chung  creative computing  harvard graduate school of education            m  conway  r  pausch  r  gossweiler  and t  burnette  alice  a rapid prototyping system for building virtual environments  in conference companion on human factors in computing systems  chi      pages          new york  ny  usa        acm      s  cooper  w  dann  and r  pausch  teaching objects first in introductory computer science  in proceedings of the   th sigcse technical symposium on computer science education  sigcse      pages          new york  ny  usa        acm      s  dasgupta  w  hale  a  monroy hern  andez  and b  m  hill  remixing as a pathway to computational thinking  in proceedings of the   th acm conference on computer supported cooperative work   social computing  cscw      pages            new york  ny  usa        acm      d  a  fields  m  giang  and y  kafai  programming in the wild  trends in youth computational participation in the online scratch community  in proceedings of the  th workshop in primary and secondary computing education  wipsce      pages       new york  ny  usa        acm      m  fowler  refactoring  improving the design of existing code  addison wesley longman publishing co   inc   boston  ma  usa            e  glinert  towards  second generation  interactive  graphical programming environments  in proceedings of the ieee workshop on visual languages  pages                   f  hermans and e  aivaloglou  do code smells hamper novice programming  in proceedings of the international conference on program comprehension        to appear       f  hermans  m  pinzger  and a  van deursen  detecting and refactoring code smells in spreadsheet formulas  empirical software engineering                            j  h  maloney  k  peppler  y  kafai  m  resnick  and n  rusk  programming by choice  urban youth learning programming with scratch  in proceedings of the   th sigcse technical symposium on computer science education  sigcse      pages          new york  ny  usa        acm       t  j  mccabe  a complexity measure  ieee trans  software eng                            o  meerbaum salant  m  armoni  and m  ben ari                                                    habits of programming in scratch  in proceedings of the   th annual joint conference on innovation and technology in computer science education  iticse      pages          new york  ny  usa        acm  o  meerbaum salant  m  armoni  and m  m  ben ari  learning computer science concepts with scratch  in proceedings of the sixth international workshop on computing education research  icer      pages        new york  ny  usa        acm  j  moreno and g  robles  automatic detection of bad programming habits in scratch  a preliminary study  in      ieee frontiers in education conference  fie   pages      oct        j  moreno leo  n  g  robles  and m  rom  an gonza  lez  dr  scratch  automatic analysis of scratch projects to assess and foster computational thinking  red   revista de educacio  n a distancia             jan        b  moskal  s  cooper  and d  lurie  evaluating the effectiveness of a new instructional approach  in proceedings of the sigcse technical symposium on computer science education        t  w  price and t  barnes  comparing textual and block interfaces in a novice programming environment  in proceedings of the eleventh annual international conference on international computing education research  icer      pages        new york  ny  usa        acm  m  resnick  j  maloney  a  monroy herna  a ndez  n  rusk  e  eastmond  k  brennan  a  millner  e  rosenbaum  j  silver  b  silverman  and y  kafai  scratch  programming for all  commun  acm                nov        l  seiter and b  foreman  modeling the learning progressions of computational thinking of primary grade students  in proceedings of the ninth annual international acm conference on international computing education research  icer      pages        new york  ny  usa        acm  a  wilson  t  hainey  and t  connolly  evaluation of computer games developed by primary school children to gauge understanding of programming concepts  in european conference on games based learning  page      academic conferences international limited        d  wolber  h  abelson  e  spertus  and l  looney  app inventor  create your own android apps  o reilly media  sebastopol  calif    edition edition  may       s  yang  c  domeniconi  m  revelle  m  sweeney  b  u  gelman  c  beckley  and a  johri  uncovering trajectories of informal learning in large online communities of creators  in proceedings of the second        acm conference on learning   scale  l s      pages          new york  ny  usa        acm     
introducing computational thinking in education courses aman yadav dept of educational studies purdue university west lafayette  indiana  usa amanyadav purdue edu ninger zhou dept of educational studies purdue university west lafayette  indiana  usa zhoun purdue edu chris mayfield dept of computer science purdue university west lafayette  indiana  usa cmayfiel cs purdue edu susanne hambrusch dept of computer science purdue university west lafayette  indiana  usa seh purdue edu john t  korb dept of computer science purdue university west lafayette  indiana  usa jtk purdue edu abstract as computational thinking becomes a fundamental skill for the   st century  k    teachers should be exposed to computing principles  this paper describes the implementation and evaluation of a computational thinking module in a required course for elementary and secondary education majors  we summarize the results from open ended and multiple choice questionnaires given both before and after the module to assess the students  attitudes toward and understanding of computational thinking  the results suggest that given relevant information about computational thinking  education students  attitudes toward computer science becomes more favorable and they will be more likely to integrate computing principles in their future teaching  categories and subject descriptors k      computer and information science education   curriculum general terms experimentation  measurement keywords computational thinking  k    education  non majors    computational thinking in k    wing suggested that  computational thinking   ct  is a fundamental skill of analytical thinking for everyone  not just for computer scientists       she described computational thinking as  solving problems  designing systems  and understanding human behavior  by drawing on the concepts fundamental to computer science   wing also pointed out permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page  to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and or a fee  sigcse     march             dallas  texas  usa  copyright      acm                                    the untapped potential of computational thinking for k    education by stating   to reading  writing  and arithmetic  we should add computational thinking to every child s analytical ability   a report on computational thinking by the national research council  nrc  advanced a similar idea  that ct is a cognitive skill which the  average person is expected to possess       similarly  bundy suggested that computational thinking concepts have been used in other disciplines via problem solving processes  and that the ability to think computationally is essential to every discipline      the pervasiveness of computational thinking concepts dictates the importance of exposing students to such notions early in their school years and helping them to become conscious about when and how to apply this essential skill  the nrc report also highlighted      that students can learn thinking strategies such as computational thinking as they study a discipline      that teachers and curricula can model these strategies for students  and     that appropriate guidance can enable students to learn to use these strategies independently   teacher education is one discipline where computational thinking will have significant impact  as we prepare future educators to present their subject areas using ideas from computational thinking  k    students will have greater exposure to computing in general  in this paper  we describe the implementation of a ct module in two sections of a core education course required for all elementary and secondary education majors  we present a pre  and post assessment of the education students  understanding and attitude of computational thinking  which measured the influence the ct module had on them  in particular  only     of the students on the presurvey described computing as   the process of solving problems  as compared to     on the post survey  on the presurvey      of the students agreed that computing relates to any or all fields  and the percentage increased to     on the post survey  overall  the ct module helped the students understand that     they can teach computing concepts in k    classrooms without the use of computers  and     ct concepts can be incorporated across all disciplines  computational thinking in education has the potential to significantly advance the problem solving skills of k    students  however  literature on implementing computational thinking in a k    setting is still relatively sparse  there     have been a number of workshops on integrating computational thinking at the high school level            but there is little research that has systematically and comprehensively examined the influence of computational thinking on preservice teachers  i e   education students   exploratory investigations have demonstrated how exposure to computational thinking enhances the way students approach problems  for example  lewandowski et al  illustrated the idea of  commonsense programming  for students without programming experience      students were asked to propose solutions to avoid selling theater tickets for the same seat twice at multiple box offices  the results showed that     of the solutions correctly identified a race condition  which indicated that the students were indeed equipped with a natural but undeveloped understanding for solving problems computationally  several researchers have made the effort to introduce ct to in service computer science high school teachers during workshop sessions that promote the awareness of integrating cs across all subject areas      the high school teacher participants were reported to have extended their understanding of the scope of cs and considered cs as more than just programming  more importantly  a comparison of the pre  and post survey indicated that the realization of the importance of  developing computational thinking skills for all aspects of life  emerged as a result of the workshop  an important step for successfully integrating computational thinking into the k    curriculum is to prepare future teachers to teach it  section   briefly describes our efforts to showcase a variety of ct concepts to pre service teachers  in section    we present a summary of our pre  and post survey  which demonstrates a positive change of attitude among the students  we conclude the paper with an overall discussion in section       overview of the ct module we developed a one week computational thinking module for the course  learning and motivation   which is required for all elementary and secondary majors  the course introduces future k    teachers to basic concepts of classroom management  learning styles  student motivation  and assessment  the main content of the course includes theories of learning and motivation  the role of formal and informal assessment in fostering learning and motivation  and ways to adapt instruction both to individual students and differences in social  cultural  and contextual factors  since computational thinking naturally includes problem solving and understanding human behavior  it fits well with the topics already covered in class  such as probabilistic reasoning  algorithms and heuristics  and hypothesis testing  we replaced the originally presented unit on problem solving and critical thinking with new lectures on computational thinking  the purpose of the ct module was not only to expose students to ideas in computing  but to show how these ideas can be used in their future teaching careers as well  faculty and students from educational studies and computer science jointly developed the lecture material  special emphasis was placed on highlighting the core concepts of computational thinking  while presenting material the students could relate to and easily apply in a k    classroom  the module was presented around the middle of the semester  and students had not been exposed to ct material in earlier lectures  before the ct module was introduced  students had primarily studied educational theories on how people learn  the ct lectures provided students with an overview of computational thinking and engaged them in activities that showcased ct principles  students worked in pairs and each pair was given a  clicker  to provide responses  see the appendix for an outline of the lectures and clicker questions  the original slides are available on our website   the first lecture introduced students to the definition of computational thinking and five basic ct concepts  problem identification and decomposition  abstraction  logical thinking  algorithms  and debugging  the concepts were introduced through examples  activities  and clicker questions  for example  debugging was discussed by asking students to troubleshoot the scenario of a lamp not working when they get home from school  but was working in the morning  students used clickers to respond to a sequence of questions to locate the problem in order to make the lamp work again  the second lecture focused on the role of computational thinking in day to day life  and emphasized the importance and application of ct in k    education  we discussed how problem solving  abstraction  and critical thinking can be introduced in a classroom setting  the lecture highlighted how computational thinking is a useful tool for dealing with ill defined problems  where there might not be a clear cut solution and information needed to solve the problem may be missing  the lecture also presented information on how to teach algorithms through kinesthetic activities and gave an example of recursion  several members of our project acted out the towers of hanoi  for n       finally  we provided examples of computational thinking in core content areas  such as science and humanities     attitude survey results we assessed the students  attitudes toward computing and their understanding of computational thinking through a pre  and post survey surrounding the ct module  all     students from the two sections of the course were emailed a link to the survey      students      female and    male   completed both the pre survey the week before the ct module and the post survey during the week after the ct module  as a motivation to participate  extra credit was given to students who completed both surveys  the pre  and post surveys were anonymous  but linked together via answers to security questions   the surveys consisted of sixteen multiple choice questions  on a likert scale from strongly agree to strongly disagree  and four open ended questions   see the appendix for the complete post survey  an external evaluator was responsible for collecting and validating the data  we analyzed the responses for patterns and significant differences between preand post surveys  the most interesting results came from the participants  open ended responses  which we present in this section  just over half of the students who responded      were preparing to teach at the elementary level  the remainder      at the secondary level  approximately     of the elementary education participants were female     vs       while at the secondary level  over     were female     vs       about     of the students enrolled responded to the survey   http   cs edu cs purdue edu comp think     a  a  a  a                                                pre survey post survey a   to use computers and or technology to solve a problem and make tasks easier a   the process of solving problems  use of computer or technology not mentioned  a   the study of computers a   other figure    participants  view of computing     participants  view of computing survey participants were asked to describe their view of computing and its purpose  the basic trends of the participants  responses differed greatly from the pre  to postsurvey  as shown in figure     not all percentages add up to      due to blank responses   on the pre survey  a majority       of the participants  responses contained themes that viewed computing as solving problems or making tasks easier through the use of computers and or technology  for example  one student stated   computing is the use of computers or some other form of technology to solve a problem  its purpose is to help solve problems that might be more difficult to solve without some form of technology   only     of participants  responded viewing computing and its purpose as the process of solving problems  use of computer or technology not mentioned   the following comment highlights computing as a process of solving problems without the use of computers or technology   computing is the science of solving a problem using some pre set method that has been established  its purpose is to assist us in solving everyday problems we might be faced with   finally     of the students reported computing as the study of computers  for example   being able to use and apply computer skills to daily life  these skills can run from typing to using different applications and software in many different areas   in the post survey  a majority of the participants  responses       reflected the basic trend that viewed computing as the ability knowledge process used to solve problems and make tasks easier  use of computer or technology not mentioned   for example  a student highlighted this view of computing stating   computing is where you logically think something through  its purpose is so that students can explore to find an answer to a problem   another student reported   i believe that computing does not necessarily involve working with computers but working to solve any type of problem  its purpose is to calculate equations and problems to formulate a correct result   on the other hand      viewed computing as solving problems or making tasks easa  a  a  a  a                                                      pre survey post survey a   the process of solving problems a   to use computers and or technology to solve a problem or make tasks easier a   the study of computers  solving problems like a computer a   other a   not sure figure    participants  view of ct ier through the use of computers and or technology  this view is highlighted by the following comments   computing is using technology or computer software to aid in solving problems  its purpose is to make difficult tasks easier and simpler   only one participant reported computing as the study of computers  by de emphasizing technology and encouraging algorithmic thinking  the lectures helped the education students understand that computational thinking doesn t always require the use of computers to solve problems      participants  view of ct in both the pre  and post survey  participants were asked to define computational thinking from their point of view  figure   summarizes the basic trends in the participants  responses between the pre  and post surveys  although answers varied  we found basic trends among them  one third       of participants  responses in the pre survey reflected trends that viewed computational thinking as  the process of problem solving   which increased to     on the postsurvey  in addition  responses used more specific terminology and examples  e g   pre survey response  process of solving problems  post survey response  process of solving problems using algorithms  etc    on the pre survey      of participants responded that they  didn t know  what their view on computational thinking was  and on the post survey  none of the participants responded that they  didn t know   additionally  on the pre survey  where almost one third       of participants  responses reflected trends regarding computational thinking as  the use of computers or technology to solve a problem or make tasks easier   none of the participants  responses on the post survey reflected the idea that computers and technology absolutely must be involved in the definition of computational thinking  in short  many more students identified the relationship between problem solving and computational thinking after receiving the ct module      a  a  a  a                                                pre survey post survey a   promote problem solving skills   critical thinking in the classroom a   utilizing computers and technology in the classroom a   other a   don t know figure    integrating ct into the classroom     integrating ct into the classroom survey participants were also asked how computational thinking can be integrated into the k    classroom  figure   summarizes their responses  on the pre survey  almost half of the participants  responses reflected the view that in order to integrate computational thinking into the classroom  computers and technology were needed  in contrast  only    of participants  responses reflected that trend on the post survey  during the one week module  many students realized the benefits of understanding ct principles and being able to apply them more systematically as a problem solving technique  this change in attitude is also reflected in the question on whether ct promotes problem solving and critical thinking skills  the responses switched from     agreeing to     of the participants agreeing  also  it seems every student had some concept about computational thinking after the module  as reflected by the  don t know  category  in summary  we saw almost a three fold increase in the number of education majors who now hold the opinion that computational thinking could be used to enhance problem solving activities in a k    classroom      relationship to other fields we also asked the students about the relationship of computational thinking to other disciplines  while     indicated that  computational thinking relates to any or all fields  in the pre survey  that number rose to     in the post survey  in addition  over     of the survey participants either agreed or strongly agreed with the following statements   computational thinking can be integrated into classroom education in other fields   computational thinking should be integrated into classroom education for other disciplines   and  having background knowledge and understanding of computer science is valuable in and of itself   as future work  we plan to embed computational thinking modules in content area courses and teaching methods courses  including hands on training in how to implement kinesthetic activities like computer science unplugged         discussion results from the two surveys suggest that the ct module was effective overall in increasing the students  awareness of computational thinking  specifically  the post survey responses were more sophisticated and showcased students  understanding that computational thinking was more than using computers and technology  students also had a better grasp of how computational thinking can be integrated into their future teaching by promoting problem solving and critical thinking skills  i e   not by merely using computers   these findings have important implications for incorporating computational thinking in education as well as other subject areas  given that computational thinking is becoming a fundamental skill for the   st century  it is important to introduce it in disciplines outside of computer science and at the k    level  specifically  computational thinking concepts must appear as early as the primary grades  and then continue through the secondary grades and beyond      one way to do this is to incorporate computational thinking modules into core education courses to expose future teachers to this idea  results from the current work suggest that such an approach has the potential to change future teachers  understanding of computational thinking and how it can be integrated in their classrooms  in summary  we have shown that given relevant information in computing  education students  attitude toward computing becomes more favorable  they also see applications of computing principles in their careers more readily  we plan to repeat the ct module in  learning and motivation  and are also developing an online version of the module for  introduction to educational technology   another course required of all education majors  we hope that our approach to ct modules will attract education students into computing courses that emphasize computer science principles  as well as traditional programming courses     acknowledgements this work was supported by the nsf cpath program under grant cns         and through a gift from state farm  we especially thank courtney brown for her help with the administration of the two surveys  we also appreciate the cs edu team and the anonymous reviewers for their thoughtful feedback on the paper     references     v  allan  v  barr  d  brylow  and s  hambrusch  computational thinking in high school courses  in sigcse            t  bell  i  h  witten  and m  fellows  computer science unplugged  http   csunplugged org   december           l  blum and t  j  cortina  cs hs  an outreach program for high school cs teachers  in sigcse            a  bundy  computational thinking is pervasive  journal of scientific and practical computing                     committee for the workshops on computational thinking  report of a workshop on the scope and nature of computational thinking  the national academies press            d  d  garcia  c  m  lewis  j  p  dougherty  and m  c  jadud  if   you might be a computational thinker  in sigcse                p  b  henderson  t  j  cortina  and j  m  wing  computational thinking  in sigcse            g  lewandowski  d  bouvier  r  mccartney  k  sanders  and b  simon  commonsense computing  episode     concurrency and concert tickets  in icer      proceedings of the third international workshop on computing education research            j  a  qualls and l  b  sherrell  why computational thinking should be integrated into the curriculum  journal of comp  sci  in colleges                       j  wing  computational thinking  communications of the acm                  appendix a  outline of the ct module lecture    computational thinking and   st century problem solving    object lesson  driving directions    how do you get from school to the mall   clicker questions        how did you think about the problem   ct concepts  algorithm  efficiency    what if the main road was closed   ct concepts  debugging    how do computers solve this problem   ct concepts  abstraction  automation    what is computational thinking    an approach to problem solving which uses abstraction to create algorithmic solutions which can be automated with computation    a fundamental skill used by everyone by the middle of the   st century  i e   just like reading  writing  and arithmetic      daily examples of ct   looking up names in a phone book   buying movie tickets  multiple lines    clicker question     ct is         ct is not        concept     abstraction    ct is reformulating a seemingly difficult problem into one we know how to solve     people standing in line   queue   cafeteria plates   stack    concept     logical thinking   inductive reasoning  observation   pattern   hypothesis   theory   deductive reasoning  theory   hypothesis   observation   confirm    concept     algorithms   activity   peanut butter and jelly sandwich    explain  write it  do it   science olympiad    homework   swap puzzle  on cs fn org    concept     debugging   clicker questions       discuss reasoning behind each answer lecture    computational thinking in k       review of previous lecture   clicker questions       ct concepts  decomposition  abstraction  logical thinking  algorithms  debugging  automation   more definitions for ct    why is ct important for k       enhances problem solving techniques   moves students beyond technology literacy   ct is a higher level cognitive process    ct and problem solving strategies   heuristic  an experience based strategy that facilitates problem solving   algorithm  a specific sequence of steps that guarantees a solution    how do you teach algorithms    demonstrate specific procedures  apply examples   help students explain their thinking and debug   role play  towers of hanoi    using technology to motivate ct   facebook friend network visualization   google s public data explorer   amazon netflix etc recommendations    what other tools have you seen      applying ct to any content area   science  social studies  economics          social sciences  medicine  humanities           the big picture   ct is a fundamental skill for everybody   state of computing in secondary education   highlight  cs principles  proposed ap course b  clicker questions lecture    intro to ct     how extensive were your directions   a  one step  e g   type  mall  into gps or google maps   b  two steps  e g   from downtown take bus      c  several steps  e g   head east on sr    to  rd street   d  a detailed  turn by turn route  e g   from the union   e  none of the above  e g    man  i was way off       how did you figure out the driving directions   a  knew them already  simply  recalled  the route  b  sketched out a high level map on paper  c  thought about several ways  picked one  d  texted a friend when no one was looking  e  modeled the entire city as an undirected graph  solved the  single pair shortest path problem   and applied it to the source and destination        what is the quickest way to serve    pizzas to    hungry students   a  one table with pizzas  the usual case   b  five tables with four pizzas each  c  people stay put and pizzas are passed around  d  four servers bringing the pizza around scenario  you come home and the desk lamp in your apartment stopped working  it worked in the morning      what is your first step to solve the problem   a  check if the lamp is turned on  b  check if the light bulb is working  c  check if the lamp is plugged in  d  check if the outlet is working  e  check if there is power in the room scenario  you checked a e and it is still not working     what do you do next   a  buy a new lamp  b  call your mother friend landlord etc  c  use your roommate s lamp  d  repeat steps a e from before  e  forget about the problem for the day lecture    review of ct     what are the two main ideas of computational thinking   a  abstraction and automation  b  algorithm and analysis  c  debugging and logical thinking  d  all of the above    computational thinking relies on the use of computer programs   a  true  b  false    computational thinking mainly involves computer science and has little impact on other subject areas   a  true  b  false c  post survey indicate whether you     strongly agree      agree      disagree  or     strongly disagree     knowledge of computing will allow me to secure a better job     my career goals do not require that i learn computing skills     i doubt that i can solve problems by using computer applications     i expect to use software in my future educational and career work     i can achieve good grades  c or better  in computing courses     the challenge of solving problems using computer science appeals to me     i expect to use computer applications for future projects involving teamwork     i can learn to understand computing concepts     i am not comfortable with learning computing concepts      i expect to use computing skills in my daily life      i hope that my future career will require the use of computing concepts      i think that computer science is interesting      i will voluntarily take computing courses if i were given the opportunity      computational thinking can be integrated into classroom education in other fields      computational thinking should be integrated into classroom education for other disciplines      having background knowledge and understanding of computer science is valuable in and of itself  open ended questions    in your view  what is computing  what is its purpose     in your view  what is computational thinking     how can we integrate computational thinking in the classroom     how does computational thinking relate to other disciplines and fields  please provide specific examples      
vviewpoints august        vol       no      communications of the acm    doi                         mark guzdial education paving the way for computational thinking drawing on methods from diverse disciplines including computer science  education  sociology  and psychology to improve computing education  t eaching everyone on campus to program is a noble goal  put forth by alan perlis in       perlis  who was awarded the first acm a m  turing award  said that everyone should learn to program as part of a liberal education  he argued that programming was an exploration of process  a topic that concerned everyone  and that the automated execution of process by machine was going to change everything  he saw programming as a step toward understanding a  theory of computation   which would lead to students recasting their understanding of a wide variety of topics  such as calculus and economics  in terms of computation   today  we know that perlis was prescient the automated execution of process is changing how professionals of all disciplines think about their work  as jeanette wing has pointed out  the metaphors and structures of computing are influencing all areas of science and engineering   computing professionals and educators have the responsibility to make computation available to thinkers of all disciplines  part of that responsibility will be met through formal education  while a professional in another field may be able to use an application with little training  the metaphors and ways of thinking about computing must be explicitly taught  to teach computational thinking to everyone on campus may require different approaches than those we use when we can assume our students want to become computing professionals  developing approaches that will work for all students will require us to answer difficult questions like what do non computing students understand about computing  what will they find challenging  what kinds of tools can make computational thinking most easily accessible to them  and how should we organize and structure our classes to make computing accessible to the broad range of students  through a few brief examples  i will show in this column how these illustration by christopher silas neal   cacm v     indb                     am    communications of the acm   august        vol       no    viewpoints questions are being addressed by researchers in the field of computing education research  researchers in computing education draw on both computer science and education  neither field alone is sufficient  while we computer scientists understand computing from a practical  rational  and theoretical perspective  questions about education are inherently human questions  humans are often impractical  irrational  and difficult to make predictions or proofs about  computing education researchers are using experimentation and design to demonstrate we can address important questions about how humans come to understand computing  and how we can make it better  research in computing education will pave the way to make  computational thinking  a   st century literacy that we can share across the campus  understanding computing before programming a research theme in the early     s was how to design programming languages so they would be more like natural languages  an obvious question  then  is how people specify processes in natural language  lance a  miller asked his study participants to specify file manipulation tasks for another person  a task might be  make a list of employees who have a job title of photographer and who are rated superior  given these paper files   miller studied the language used in his participants  descriptions   one of miller s surprises was how rarely his participants explicitly specified any kind of control flow  there was almost no explicit looping in any of their task descriptions  while some tested conditions   if    none ever specified an  else   he found this so surprising that he gave a second set of participants an example task description  without looping and no else specification  the second set of participants easily executed the task description  when asked what they were doing if the condition was not met  or if data was exhausted  they replied  almost unanimously  miller reports    of course  you just check the next person  or if there are no more  you just go on   miller s results predict some of the challenges in learning to program  challenges that are well known to teachers of introductory classes today  while process descriptions by novices tend not to specify what to do under every condition  computers require that specificity  miller s results suggest what kinds of programming languages might be easier for novices  programming languages like apl and matlab  and programming tools for children like squeak s etoys use implicit looping  as did the participants in miller s studies  twenty years later  john pane and his colleagues at carnegie mellon university revisited miller s questions  in new contexts   in one experiment  pane showed his subjects situations and processes that occur in a pacman game  then asked how they would specify them  the subjects responded with explanations like   when pacman gets all the dots  he goes to the next level   like miller  pane found that participants rarely used explicit looping and always used one sided conditionals  pane went further  to characterize the style of programming that the participants used  he found that over half of the participants  task statements were in the form of production rules  as in the example  he also saw the use of constraints and imperative statements  but little evidence of object oriented thinking  participants did talk about accessing behaviors built into an entity  but rarely from the perspective of that entity  instead  it was from the perspective of the player or the programmer  he found no evidence of participants describing categories of entities  defining classes   inheritance  or polymorphism  pane s results suggest that objectoriented thinking is not  natural   in the sense of being characteristic of novices  task descriptions  since obfigure    traditional conditional structure  if  value       then value   value       else sum   sum   value  end if figure    new conditional structure  if  value        value   value       not  value        sum   sum   value  end  value       www acm org dl acm digital library theultimateonline informationtechnology resource    new  author profile pages   improved search capabilities   over    acm publications  plus conference proceedings       years of archives   advanced searching capabilities   over   million pages of downloadable text plus over one million bibliographic citations are available in the acm guide to computing literature to join acm and or subscribe to the digital library  contact acm  phone                  u s    canada                   global  fax                  hours       a m       p m   est email  acmhelp acm org join url www acm org joinacm mail  acm member services general post office po box       new york  ny            usa dl one third page  c layout                pm page     cacm v     indb                     am viewpoints august        vol       no      communications of the acm    jects are the foundation of most modern software today  his results point out where we can expect to find challenges in explaining objects to students  both miller s and pane s results encourage us to think how we might design languages for novices that play to their natural ways of thinking about specifying computation  like the use of eventbased programming in mit s scratch  in the last four years  a multinational group of researchers has explored  commonsense computing   what do our students know before we teach them  given a complex task  how do people without programming knowledge specify an algorithm for that task  in one paper  lewandowski et al   explore concurrency in a complex task of multiple box offices selling tickets for a theater  how well do non programming students avoid selling the same seat twice  the results showed that    solutions      of the total  drawn from five institutions  were correct  only     of the solutions      of the correct solutions  were distributed  so teachers of algorithms classes need not worry about being put out of business  noncomputing students do not naturally come up with the elegant solutions that computer scientists have devised  however  these results suggest that students can  naturally  think about concurrency correctly  problems with implementing concurrent programs might stem more from the challenges in specifying those algorithms in current programming languages  rather than from the complexity of the algorithms themselves  redesigning programming languages both pane s and miller s results make suggestions about the design of programming languages if the goal is to make computational ideas more accessible to novices  testing new forms of programming languages was an area of active exploration by thomas r g  green  elliot soloway  and others  in one paper  green and his colleagues explored alternatives to the traditional conditional structure   a typical structure might look like the structure shown in figure    they tested a new structure where this would be written as shown in figure    this new structure makes explicit the condition for the execution of each clause of the condition  green and his colleagues found that novices were able to correct mistakes using the second form    times faster than programs using the first form  miller and pane found that their participants simply never used an else clause  instead  it seemed obvious   of course   what to do when the tested condition wasn t true  miller s and pane s subjects were doing something different than green s  writing a task description is different than reading and fixing a task description  green s results complement miller s and pane s  novices do not naturally write the else clause they think it s obvious what to do if the test fails  however  conditionals in programs are not always obvious  and it s easier for the novices trying to read those programs if the conditions for each clause s execution are explicit  paving the way for  computational thinking  for all to make  computational thinking  accessible to students across the entire campus  we need to understand how to teach computing better  computing education researchers explore how humans come to understand computing  and how to improve that understanding  computing education research is a close cousin to human computer interaction  since hci researchers explore how humans interact with computing and how to improve that interaction  computing education researchers have found a home in the international computing education research  icer  workshop  whose fourth annual meeting will be held this september in sydney  australia  see www newcastle edu  au conference icer       and in journals like computer science education and journal on educational resources in computing  computing education research draws on a variety of disciplines to make computing education better  social scientists like jane margolis  lecia barker  and carsten schulte help us to understand how students experience our classes  which often differs from what we might expect as teachers  and how we can change our classes to make them more successful for all students  computing education researchers draw on methods from education  sociology  and psychology in order to measure learning about computing and understand the factors that influence that learning  by making computing education better  we can broaden access to computing ideas and capabilities  when we can teach every student programming and the theory of computation in a way that makes sense to them for their discipline  we will see how ubiquitous understanding of computing will advance the entire academy  just as perlis predicted over    years ago  references    lewandowski  g  et al  commonsense computing  episode     concurrency and concert tickets  in proceedings of thethird international workshop on computing education research                     miller  l a  natural language programming  styles  strategies  and contrasts  ibm systems journal                           pane  j f   ratanamahatana  c   and myers  b a  studying the language and structure in nonprogrammers  solutions to programming problems  international journal of human computer studies                        perlis  a  the computer in the university  in m  greenberger  ed   computers and the world of the future  mit press  cambridge  ma                    sime  m e   arblaster  a t   and green  t r g  structuring the programmer s task  journal of occupational psychology                        wing  j  computational thinking  commun  acm        mar                mark guzdial  guzdial cc gatech edu  is a professor in the college of computing at georgia institute of technology in atlanta  ga  the communications  education  column will feature commentary on education issues  presenting research results and opinions that inform how the challenges of computing education can be best addressed         acm                         research in computing education will pave the way to make  computational thinking  a   st century literacy that we can share across the campus    cacm v     indb                     am 
computers   education                   contents lists available at sciencedirect computers   education journal homepage  www elsevier com locate compedu computational thinking and tinkering  exploration of an early childhood robotics curriculum marina umaschi bers  louise flannery  elizabeth r  kazakoff   amanda sullivan tufts university  medford  ma  usa articleinfo abstract article history  received    january      received in revised form    october      accepted    october      keywords  elementary education interactive learning environments pedagogical issues teaching learning strategies robotics programming early childhood    introduction by engaging in construction based robotics activities  children as young as four can play to learn a range of concepts  the tangiblek robotics program paired developmentally appropriate computer program  ming and robotics tools with a constructionist curriculum designed to engage kindergarten children in learning computational thinking  robotics  programming  and problem solving  this paper documents three kindergarten classrooms  exposure to computer programming concepts and explores learning outcomes  results point to strengths of the curriculum and areas where further redesign of the curric  ulum and technologies would be appropriate  overall  the study demonstrates that kindergartners were both interested in and able to learn many aspects of robotics  programming  and computational thinking with the tangiblek curriculum design         elsevier ltd  all rights reserved  for decades  early childhood  preschool to grade two  curricula have focused primarily on literacy and math  especially with the educational reforms of no child left behind  zigler   bishop josef         however  there has been some recent attention to science  technology  engineering  and math  stem  learning for young children  gelman   brenneman        sesame workshop        white house         furthermore  new technology learning standards and best practices for integrating technology into early childhood educa  tion have been developed  barron et al         international society for technology in education  iste         naeyc   fred rogers center for early learning and children s media        u s  department of education         of note  the technology policy statement from naeyc   fred rogers center for early learning and children s media        provides a guide for early childhood education professionals in using interactive digital technologies in balanced and developmentally appropriate ways  it addresses important issues related to using digital technology with children ages three eight years  including the needs for technology use to serve the needs of the children  and for educators to be able to understand  evaluate  and integrate developmentally appropriate technologies in their classrooms  however  there is little research on computer programming specifically for early childhood  the subject this paper explores  as new devices  from smartphones and tablet computers to electronic learning toys  find new audiences with increasingly young children  challenging question arise about how to define developmentally appropriate activities and content for children of different ages  while the majority of research on robotics and programming in education focuses on later schooling  teaching these subjects during foundational early childhood years can be an engaging and rewarding experience for young learners  bers         previous research has shown that children as young as four six years old can build and program simple robotics projects  bers  ponte  juelich  viera    schenker        pp           cejka  rogers    portsmore        kazakoff  sullivan    bers        perlman        p       wyeth        as well as learn powerful ideas from engineering  technology  and computer programming while also building their computational thinking skills  bers         robotic manipulatives allow children to develop fine motor skills and hand eye coordination while also engaging in collabora  tion and teamwork  additionally  robotics can provide a fun and playful way for teachers to integrate academic content with the creation of   corresponding author  devtech research group  eliot pearson department of child development      college ave   medford  ma        usa  tel                    e mail address  elizabeth kazakoff tufts edu  e r  kazakoff                 see front matter        elsevier ltd  all rights reserved  http   dx doi org         j compedu                 m u  bers et al    computers   education                   meaningful projects  through robotics  young children can experiment with concepts of engineering as well as storytelling by creating narrative contexts for their projects  bers         by engaging in these types of robotics projects  young children play to learn while learning to play in a creative context  resnick         computers offer new ways of representing and interacting with information and an entirely new category of  objects to think with   papert         in the form of programmable and interactive robots  computers can become powerful learning tools  robotics offers children the opportunity to engage with content from the domain of computer science  practice problem solving skills  and work on fine motor skills and eye hand coordination  the tangiblek robotics program  a design based research initiative now in its fifth year  has paired develop  mentally appropriate programming and robotics tools with a curriculum to engage kindergartners in learning computational thinking  robotics and programming concepts  as well as problem solving and reasoning  the goal of this paper is to present young children s learning outcomes on computer programming concepts as taught through the tangiblek curriculum in order to highlight the potential for learning of integrating computer programming and robotics into the early childhood classroom       theoretical framework  constructionism and positive technological development the theoretical approach used for designing the educational intervention and curriculum and for integrating the tangiblek robotics program into early childhood classrooms incorporates elements from papert s        constructionist framework  which states that children can learn deeply when they build their own meaningful projects in a community of learners and reflect carefully on the process  papert s        constructionism is rooted in piaget s        constructivism   which conveys the idea that the child actively builds knowledge through experience   and the related  learn by doing  approach to education  while piaget s        theory was developed to explain how knowledge is constructed in an individual s mind  papert        expands on it to focus on the ways that internal constructions are supported by constructions in the world  including through the use of computers and robotics  a constructionist teaching approach provides children the freedom to explore their own interests through technologies  bers        while investigating domain specific content learning and also exercising meta cognitive  problem solving  and reasoning skills  e g   clements   gullo        clements   meredith         papert        discussed that well designed constructionist activities have embedded in them  powerful ideas   central concepts within a domain that are both epistemological and personally useful  interconnected with other disciplines  and have roots in intuitive knowledge that a child has internalized over a long period of time  bers et al         papert         an idea may be considered powerful to the degree that it is useful in building and extending further knowledge  papert         the robotics curriculum described in this paper is composed of powerful ideas from the domains of computer science and engineering  e g   the engineering design process  debugging  robotic motion and sensing  using programming instructions  control flow by sequence  control flow by specific instructions   classroom activities designed to impact learning outcomes and cognitive growth  also have an impact on  and are influenced by  children s social  emotional  and moral development  as a framework to guide the design and implementation of a robotics curriculum that also focuses on these dimensions of the child  bers               positive technological development  ptd  was utilized  ptd takes into consideration the learning environment and pedagogical practices  as well as cultural values and rituals  which mediate teaching and learning  bers        rogoff  goodman turkanis    bartlett         the educational experience proposed by the presented robotics cur  riculum was structured using the ptd framework to encourage six behaviors  which in turn foster the development of beneficial core cognitive and social traits  specifically  engaging in content generation  creative design and problem solving  collaboration  communication  choices of conduct  and community building may lead to a sense of competence and confidence  the ability to connect with and care about others  contribution to entities outside the self  and moral character  bers               for instance  by iteratively planning and revising a robotics project in a supportive environment  children may gain confidence in their abilities to learn and solve problems  alternatively  discussions of how to share limited resources fairly amongst the class are opportunities for positive moral development       learning through computer programming embedded in the exploration of computer programming and robotics  the tangiblek curriculum also fosters computational thinking  this term has been defined in many ways and encompasses a broad and somewhat debated range of analytic and problem solving skills  dis  positions  habits  and approaches used in computer science  barr   stephenson        international society for technology education and the computer science teachers association        lee et al          the tangiblek curriculum specifically fosters computational thinking skills such as  problem representation  systematicity in generating and implementing solutions  exploring multiple possible solutions  problem solving on multiple levels   from approaching the overall challenge to  debugging  or trouble shooting specific difficulties with a given solution s implementation  productive attitudes toward  failure  and misconceptions uncovered along the route to a successful project  and strategies for approaching open ended and often difficult problems  such skills are of general applicability beyond robotics and computational thinking       the tangiblek robotics program the tangiblek robotics program  whose design is informed by the theoretical frameworks of constructionism and ptd  has iteratively implemented and assessed a set of programming and robotics tools  curricula  and pedagogical approaches in close collaboration with hundreds of children and dozens of teachers over the course of five years  the research goals of the tangiblek robotics program are to     provide an evidence based description of young children s learning trajectories in computational thinking and capacity to under  standing computer programming and robotics concepts when given developmentally appropriate materials     develop and test an early childhood curriculum to teach developmentally appropriate concepts from computer programming and robotics to children in kindergarten through second grade     investigate the design features of the programming interface and the mediating role interface design plays in learning to program  m u  bers et al    computers   education                       this paper addresses the first of these goals  to describe young children s learning trajectories in computational thinking and capacity to understand computer programming and robotics concepts  this understanding will allow further revision to the tangiblek curriculum  the tangiblek robotics project makes use of commercially available robotics construction kits and the cherp  creative hybrid envi  ronment for robotics programming  language to give behaviors to the robotic constructions  bers        bers   horn        horn et al         kazakoff   bers        kazakoff  sullivan    bers         cherp is a hybrid tangible and graphical computer language designed to provide young children with an engaging introduction to computer programming in a developmentally appropriate way  the software allows children to create programs to control their robots from tangible wooden blocks and or graphical  on screen icons  the design of cherp avoids the technical and syntax related challenges of text based programming languages  furthermore  the hybrid interface allows children to choose the interface that best suits their changing preferences as physical abilities  perceived social appeal  and the level of challenge of the activity at hand evolve  horn et al          because both tangible and graphical interfaces can represent the same concepts  the tangiblek curriculum introduces increasingly complex powerful ideas from computer science in a robotics context in a structured  developmentally appropriate way  the powerful ideas from computer science addressed in this curriculum include  the engineering design process and debugging  trouble shooting   robotic motion and sensing  and three aspects of programming  choosing the correct pro  gramming instructions  controlling the flow of actions by sequencing the action instructions accordingly  and controlling the flow of actions by using special control flow instructions  section     contains more detailed definitions of each powerful idea  in addition to the concrete robotics and programming concepts and skills introduced in each activity  skills such as observation  reflection  and decomposition of complex processes are interwoven throughout the curriculum  the curriculum  which takes approximately    h of classroom work  includes six structured     to    min activities and a culminating interdisciplinary project  all the activities focus on building and programming a robotic vehicle to accomplish a particular goal  each lesson addresses one or more powerful idea s  within the context of a narrative theme  the six lesson activities and their embedded content are as follows    lesson    the engineering design process children build sturdy  non robotic vehicles to transport toy people on a floor map  children apply the stages of the engineering design process to plan  test  and improve their vehicles    lesson    robotics children share and learn ideas about what robots are and are not  they explore robotic parts by designing and building their own robots  they learn to appropriately connect robotic parts  e g   snap together wires and motors  to make a robot that moves    lesson    choosing and sequencing programming instructions in this activity  children program their robots to dance the  hokey pokey  by choosing relevant instructions and putting them in the correct order or sequence    lesson    looping programs  control flow instructions    children use  repeat  instructions to program their robots to move forward forever  next  they program their robot to move forward only a particular number of times to reach a fixed location    lesson    sensors children use light sensors to program their robots to turn its light on when it is dark out and vice versa  they draw comparisons between robotic sensors and the five human senses    lesson    branching programs  control flow instructions    children are introduced to a pair of conditional control flow instructions   if  and  if not   which are also used with a sensor to make programs that incorporate environmental conditions into the robot s behavior  in addition to the structured activities described above  the tangiblek curriculum includes songs  games  and free play with the robotics and programming materials in order to foster a playful learning environment for children  for example  in lesson    children sing and dance the  robot hokey pokey  and play simon says with the cherp programming commands to recall and apply the programming instructions  throughout the    h curriculum  children have ample opportunity to freely build and design with the robotics materials and to create their own cherp programs  beyond those that are set forth in each of the structured lessons  after completing the six lessons described above  each classroom embarks on a culminating  interdisciplinary project  which invite children to apply the now familiar powerful ideas to a particular theme or context  the teacher decides on a theme drawn from other subjects studied during the year  and each child chooses a challenge within this theme  past classrooms have selected topics such as animal behaviors  vehicles that help the community  or  who am i   children created projects representing snakes that slither  recycling trucks that collect refuse  and sewing needles that travel back and forth through fabric  among many others  the projects allow children to demonstrate the powerful ideas they learned over the six activities as well as to apply them and continue learning about them in a new context  having introduced an overview of the tangiblek robotics program  including its technological  curricular  and theoretical components  we now present a study of three kindergarten classrooms in which the tangiblek robotics program was implemented  the following sections report the distribution of achievement scores children attained on selected computer programming concepts and skills tied to the     m u  bers et al    computers   education                   powerful ideas listed above  achievement scores form the basis on which to discuss the curriculum structure and content and consider the implications for understanding children s early learning trajectories of computational concepts and for further adaptation of the curriculum     study design within the design based research tradition of iterative testing  analysis  and refinement of an intervention   see  e g   cobb  confrey  disessa  lehrer    schauble         the tangiblek robotics program has spent five years exploring what children are capable of learning and accomplishing in the domains of robotics and programming  the study described in this paper examines how successfully children learned the core concepts  powerful ideas  of robotics and programming in the tangiblek curriculum  the study took place during the fourth year of the overall project  following piloting and refinement of the software and curriculum in a range of settings  from classrooms and after school summer programs to the research lab  the extensive testing  exploration  and refinement of the preceding study iterations also laid a foundation for understanding how young children learn and think about core concepts of programming and robotics  for instance  several of the curricular activities were simplified to enable better focus on the target concepts  movement games and songs were added to the curriculum to engage children in multiple modes of understanding concepts and to provide reinforcement for basic knowledge  in addition  some of the programming icons were revised to use more familiar imagery for children       participants each of the three teachers involved in this study volunteered to participate following email notification of the opportunity to principals of a limited number of schools in the greater boston area  all children in each classroom participated in the curriculum  but each family had the option to allow or decline data collection  according to school community needs  consent materials were available in english  portuguese  and spanish  children in the study attended one of three greater boston area kindergarten classrooms  two of which were at a public urban school  and one at a private suburban school  from a total of    children enrolled in the three classes during the study     are included in data analysis  children were included in data analysis unless they missed more than one activity or if data was not collectible for more than one activity  attrition was due to typical classroom absences as well as the difficulty of collecting data with limited researchers in a bustling classroom environment  classroom    a kindergarten in an independent  k    religious based  private school in a suburb of boston  ma  had    children     of whom are included in data analysis  the student population at this school was     white     as asian     as black     hispanic  http   nces  ed gov globallocator    of the children in the kindergarten class      were male and     were female  they ranged from ages     to     years at the start of the study  with a median age of     years  the only kindergarten classroom at this school  this class was taught by a male teacher with seven years of teaching experience  who  on a scale from    none  to    expert   rated his computer experience as    pro  gramming experience as    and robotics experience as    classrooms   and   were located at the same urban k   school  nclb level     located just outside of boston  ma  the makeup of this school during the           school year was       white        hispanic        african american       asian american  and      multi  race  the school was comprised of       english language learners and       of students were classified as low income  massachusetts department of education         a female teacher with six years of teaching experience taught classroom    she rated her computer experience as a    robotics experience as a    and programming experience as a    this classroom had    children enrolled     of whom are included in the data analysis  of those    children      were male and     were female  at the start of the curriculum  the children in this classroom ranged in age from     to     years old  with a median age of     years  a female teacher with    years of teaching experience taught classroom    she also rated her computer experience as a    robotics experience as a    and programming experience as a    the data analysis includes    of    children enrolled in this classroom  of the    participants      were female and     were male  the children s ages at the start of the curriculum in classroom   ranged from     to     years  with a median age of     years old  the overall age range for the    children included in data analysis was         years  and their average age at the start of the curriculum was     years old  over the three classrooms as a whole      of the children were female and     male  the participants in this study are thought to be generally representative of the general kindergartners population  as the sample includes both public and private school students  both male and female teachers  a fairly even proportion of male and female students  and  as described above  a diverse range of ethnic and socioeconomic backgrounds  particularly at to the participating public school       procedure each classroom s head teacher and all research assistants  nearly    research collaborators in total  received training to prepare them for teaching or assisting the robotics curriculum and participating in the research and data collection  the high number of assistants was needed for two reasons  first  a low student to adult ratio in each lesson ensured adequate observation and documentation of students  work  secondly  most research assistants had limited availability across the full set of study sessions  therefore  attention was given to all col  laborators  to ensure they received careful and detailed training  the   h introductory training covered technical  curricular  and pedagogical aspects of the program including how to use the cherp programming language and lego  robotics kits as well as activity content and training on the structure and the teaching approach framed by the ptd model presented earlier  the training also included explanation and examples of how to score children s work in each activity according to a scale of understanding levels  described below  the teachers then implemented the tangiblek curriculum in their own classrooms with technical support from trained research as  sistants  two teachers used the curriculum with the whole class working together  the third teacher worked with half of the class at a time  finishing the entire curriculum with one group before starting it with the other  each curricular activity took one to two       min ses  sion s   the teacher introduced key concepts and the day s activity in a whole group setting along with a short song or game to reinforce the m u  bers et al    computers   education                       concepts  as mentioned earlier  in lesson    each class sang and danced the  hokey pokey  before programming their robots to do this dance  additionally  the game  simon says  was often used in lessons     to reinforce the cherp programming instructions and their corresponding robotic actions  after the whole group activities  children built and or programmed their own robotic vehicles  the children worked independently on their projects but sat in groups of four and received support as needed from the research assistant or classroom teacher at their group while also interacting with their peers  with the variety of coders evaluating children s work  we systematically accounted for potential intercoder differences by varying which adult worked with which children during each lesson  each session s work ended with a group discussion for children to share progress  questions  and successful strategies  and for the teacher to help reinforce the core robotics and programming concepts and the engineering design process  to assess learning outcomes after each activity  research assistants evaluated the robot and or program made by each child  they assessed the child s level of understanding of selected core concepts as seen by successful application of the concepts in the robot or program  if needed  they also talked with children to gain more information about their work and understandings  by examining  for instance  the child s program for correct selection and sequencing of action instructions or proper use of the  repeat  instruction  research assistants scored each child s achievement of the core goals of the lesson using the following   point likert scale designed to document the thoroughness of the child s understanding and application of activity specific concepts and skills as well as their use of general problem  solving skills  a score of   or higher was defined as the target level of achievement    complete achievement of the goal  task  or understanding   mostly complete achievement of the goal  task  or understanding    partially complete achievement of the goal  task  or understanding    very incomplete achievement of the goal  task  or understanding    did not complete the goal  task  or understanding    did not attempt other  in each lesson  children were scored on multiple concepts using this likert scale  for example  in lesson    children programmed their robots to dance the  hokey pokey  by    choosing the correct instructions  a skill referred to here as correspondence  and    putting the instructions in the correct order  sequencing   the concepts of sequencing and correspondence are described in more detail in sections       and        as an illustration of the general scale  children received one point on the correspondence scale for each programming instruction that correctly matched a line of the song  below are examples of children s programs that were scored at each level of correspondence in lesson      begin  forward  backward  forward  shake  spin  end  all correct     begin  forward  forward  forward  shake  spin  end  second forward should be backward     begin  forward  backward  shake  end  missing forward and spin     begin  shake  spin  end  missing forward  backward  forward    begin  shake  end  missing forward  backward  forward  and spin     despite assistance and prompting  the child did not attempt hokey pokey task  these same programs also received a     score for sequencing in lesson         variables examined to examine children s growing computational thinking ability throughout implementation of the tangiblek curriculum  four key vari  ables were observed and assessed  debugging  correspondence  sequencing  and control flow         debugging when faced with a difficult problem or task  children  and adults  are often unable to determine a suitable solution on the first attempt  in these situations   debugging  skills can be helpful  debugging  or trouble shooting  is a form of problem solving used in the fields of engineering and computer science  it encompasses four steps     to debug a problem  the child must first recognize that something is not working or not meeting the stated goal  for example  a child programming her robot to dance the hokey pokey in lesson   watches her program running and realizes that the robot does not  shake it all about      in step   of the debugging process  children either decide to keep their original goal or switch to an appropriate alternative  this child might continue to pursue the original plan of making the robot dance all the parts of the hokey pokey  or  as is common at this age  she might come up with an alternative  such as having their robot do a different dance     the third stage of debugging is generating a hypothesis as to the cause of the problem  the child in our example may hypothesize that the program is missing an instruction that would make their robot shake     finally  the last aspect of debugging is attempting to solve the problem  the child might put a  shake  block in different positions in the program until the program fully matches the song  debugging skills are not limited to the arena of engineering and computer science  previous research has found that children can acquire and transfer debugging skills to activities outside of the programming context with appropriate support  including explicit in  struction  klahr   carver        salomon   perkins         the steps of the debugging process are a critical component of the engineering design process  which refers to the cyclical or iterative process engineers use to design an artifact in order to meet a need  massachusetts department of education         as defined by the ma curriculum frameworks  its steps include  identifying a problem  looking for ideas for solutions and choosing one  devel  oping a prototype  testing  improving  and sharing solutions with others  see fig      the steps of testing and improving  which require debugging  are particularly important in establishing a learning environment where failure   rather than immediate success   is expected and seen as necessary for learning  with the engineering design process  children are not expected to  get it right  the first time      m u  bers et al    computers   education                   in the tangiblek curriculum  debugging and the engineering design process were first introduced in lesson    and the concepts and skills were applied throughout the rest of the curriculum  children were assessed on their ability to apply the four core aspects of debugging  described above  in each lesson and final project         correspondences between actions and instructions a program is a sequence of instructions that a computer  in this case  a robot  acts out in an order specified by the programmer  stair   reynolds         each instruction has a specific meaning  and the order of the instructions leads to the robot s overall actions  making correspondences between actions and instructions encompasses the understanding that each programming instruction represents a specific action carried out by the robot  another way to understand the process of correspondence is to frame it with the notion of symbols  a core concept that children are learning in kindergarten in both math and literacy  each programming instruction is a symbol for the action the robot will carry out  in order to program a robot s behavior  children must understand in general that people use symbolic language to communicate with computers  and they must select specific instructions to accurately represent their intended outcome for the robot s behavior  correspondence was first introduced in lesson   of the curriculum  when students choose and sequence programming instructions to make a robot dance the hokey pokey  accomplishing this task requires children to identify the corresponding programming instruction for each line of the  robot hokey pokey  verse dance  for example  a child who understands the correspondence between actions and in  structions would find the programming instruction block with the  shake  symbol to recreate the line in which the robot  shakes it all about   to measure correspondence  children were assessed on how many of the correct instructions they chose         sequencing instructions sequencing is a component of planning  and involves putting objects or actions in the correct order  zelazo  carter  reznick    frye         to create a successful program  children must use procedural thinking and plan their programs in terms of a sequence of what happens next  before  or until another action  pea   kurland         in both literacy and mathematics  sequencing is essential  for putting phonemes  letters  words  or elements of a formula in the appropriate order  neuman   dickinson         prior research with the tangiblek project showed that children who participated in the program earned significantly higher scores on a test of story sequencing than children who did not  kazakoff   bers        kazakoff  sullivan    bers         in this curriculum  children were first introduced to the idea of sequencing instructions in lesson   s  hokey pokey  challenge  described above   sequencing was also a core component of lessons      in which children had to properly arrange action instructions and increasingly complex control flow instructions in the correct order to achieve particular outcomes in the robot s behavior         use of control flow instructions  control flow  refers to the concept that programmers can control the order in which a robot follows the instructions in its program through various programmatic methods  this curriculum introduced children to control flow instructions and parameters  control flow instructions allow the robot to carry out instructions non sequentially  e g   in a loop  or only under certain conditions  for example  a cherp program can include a  repeat  control flow instruction in the following way   begin  forward  repeat   shake  end repeat  sing  end   to make the robot shake three times and then sing once  with the attachment of a light or touch sensor to the robot  sensor parameters can also be used to qualify the control flow instructions based on environmental stimuli  for instance  a child can program a robot to carry out an action or set of actions only  if  the environment is  dark  or  if light   and another set of actions  if not  light dark    while there are currently no curriculum frameworks explicitly addressing control flow  these activities connect to mathematics  by reinforcing number sense and estimation  or to natural science  by comparing human and animal sensory functions with robot sensors  children are also able to compare and contrast repeating or looping programs to patterns  cyclical events in the natural world  and calendar time  children were assessed on their correct use of control flow structures in lessons     and the final project     results this section presents and compares children s achievement on programming and debugging concepts and other skills taught using the tangiblek robotics curriculum  since the focus of this work is on computational thinking in a robotic context  the assessments presented here evaluate programming concepts instead of robotics knowledge  children s work in each introductory lesson was assessed for two relevant programming concepts  these concepts  seven in total  were reassessed in the final project  additionally  four debugging skills were assessed in all lessons and the final project  each measure uses the likert scale shown above  which ranges from    did not attempt the task  or    did not complete the goal  task  or understanding  to    completely achieved the goal  task  or understanding   analysis was conducted by aggregating scores from all classrooms and using paired sample t tests to compare scores on each concept from one lesson to the next  findings are grouped by the powerful idea to which they relate  note that the teacher in classroom   chose not to formally teach activity    so data for that activity s items come only from two classrooms  a discussion about this choice is provided later in the paper       debugging average scores on the various debugging measures fell in the range of partial to mostly complete understanding and application of the skill  see table     there was little variation in debugging scores between consecutive activities  see fig      with the exception that the average score on keeping the original goal was higher in activity   than in activity    marked in table     in other words  children s ability to keep working on the original goal  or choose an acceptable alternative  was higher in activities that did not require the use of sensors and sensor parameters  scores on the other three components of debugging remained steady in the mid to upper range of the achievement scale across lessons  table   student scores on debugging  debugging step   debugging step   debugging step   n mean sd                                                                                            debugging step   n mean                                                           m u  bers et al    computers   education                       activity   activity   activity   activity   activity   activity   project n mean                                                         sd n                                                         mean sd                                                                          sd                                    note  classroom   did not do activity     denotes significant differences in the mean scores debugging step   between activity    the last activity completed by all classes  and the project  t              and p           for debugging step   from activity   to the project  t              and p           repeated measures anova analyses  see table    were run for the four debugging skill variables across activities  the analyses were run across all seven activities  or in the case of debugging skill    across the four activities where this skill was assessed   in addition  a separate repeated measures anova was run for each debugging skill variable for just activities     since once classroom did not participate in lesson   and the project lesson was unstructured  average debugging score did not vary significantly across activities when all lessons were considered  however  when removing the challenge activity and lesson   where one class did not participate  a repeated measures anova for each debugging variable did show a change across time  meaning there was  perhaps variation in debugging score across the more structure lessons  but  this variation averaged out when children worked on their own projects       powerful ideas of programming in activities   through   and in the culminating project  students completed specific programming challenges and were assessed on their ability to select instructions and put them in the order that would result in the goal behavior for the robot  activities     also used special  control flow  instructions  which can tell the robot to loop through a set of actions repeatedly or to follow one  branch  of instructions or another based on sensor data         choosing the correct programming instructions the overall mean score on students  abilities to choose the correct instructions started off high in activity    scores then dropped  on average  over activities   through    and returned to starting levels in the project  see table   for detailed means   as mean scores fell to statistically significantly lower levels in activity   and again in activity    the percent of students reaching the target level of achievement also dropped  seventy six percent of students achieved in the target range on choosing programming instructions in activity    which used only action instructions  in activity    which introduced the first of the control flow instructions      of children achieved the target level  as did only     in activity    which added the use of sensors and sensor parameters  and     in activity    which used a second  more challenging type of control flow instruction  however      of children reached the target level of achievement on their projects   a similar rate to that in lesson    the first activity to require choosing programming instructions  see fig             control flow by sequencing sequencing ability was also introduced in activity    along with making correspondences between intended robotic actions and pro  gramming instructions  when children made their robots dance the  hokey pokey   three quarters of all students achieved in the target range in this first programming activity  sequencing was also a core component of activities      in which children had to properly arrange fig     mean achievement on debugging across activities  average debugging scores for each activity and project  all four debugging components appear to follow a similar trend  but only the scores for keeping the original goal and attempting to solve the problem had statistically significant changes  of the paired items at the p        level  for debugging step   between activities   and    t              and p           for     m u  bers et al    computers   education                   table   repeated measures anovas by debugging steps  a repeated measures anova was conducted to see if there was a significant difference in means of debugging level over time  all possible activities df                       f p                                  without lesson   or project df f p                             debugging step   sphericity assumed debugging step   greenhouse geisser debugging step   greenhouse geisser sphericity assumed debugging step     denotes significance at the p        level                                                          correction correction correction notes  classroom   did not do activity    the project was open ended  children could choose to use less difficult blocks   greenhouse geisser sphericity assumed                   both actions and increasingly complex control flow instructions in the correct order  in these activities            and     of children  respectively  achieved at the target level  fewer children were able to reach the target level of achievement for sequencing in these activities than in activity    a comparison of mean scores on sequencing from one activity to the next revealed a statistically significant drop between activities   and    differentiating programs with actions only from those requiring two part control instructions as well  see table     as was seen with correspondence scores  the average sequencing score on children s projects was statistically significantly higher than the average score in activity    see fig             control flow by special instructions activities     each introduced a new control flow instruction for creating looping or branching programs  students  on average  achieved a  partially  complete understanding of the concepts  see table   for detailed means   less than     of students reached the target   mostly  complete  level of understanding on all but one of these measures   this degree of understanding was reached by     for looping      for numeric parameters      for sensor parameters      for the first half of the conditional statement  and     for the second half of the conditional statement   there were no differences in average scores found between looping and conditional instructions or comparing the different types of parameters  see fig      the only statistically significant difference in scores was between the two parts of the conditional statement   if  versus  if not    that is  children were  on average  more comfortable making the programming equivalent of the statement  if it s dark out  turn the light on  and less comfortable appending  if not  turn the light off  to that first statement       comparison of concepts between activities and projects differences in children s achievement on each of the above concepts from the introductory activities to the culminating projects were examined in two ways  first  children s scores from activity    the last activity completed by all classes  were compared to children s scores on the final project  this continued the comparison of scores on consecutive activities  secondly  scores from the first activity that introduced a particular concept were compared to corresponding scores from the final project  for example  sequencing scores from activity    the first activity using that concept  were compared to sequencing scores on the final project  this comparison was done to address how children s scores on the same concepts might change with time and exposure  we should note that due to the self selected nature of the final projects  not all children employed every concept to complete them  so n is relatively lower on these comparisons  there were some statistically significant increases in scores from the final introductory activity completed by all classrooms to the culminating projects were seen on two overarching programming concepts  choosing the correct instructions  see table    and sequencing the instructions to accomplish the goal  see table     as well as on two elements of debugging  see table     sticking with the original goal or choosing an acceptable alternative and taking steps to attempt to solve the problem  in fact  after these scores had dropped over the course of the activities  they returned to starting levels in the final projects  as described in the relevant sections above   table   student scores on selecting programming instructions  selecting instructions n mean comparison to subsequent activity activity   activity   activity   activity   project         sd activity                                    df tp                                                                                              a    a this comparison was made as an alternative to the activity   to project comparison as it was the last activity completed by all three classrooms prior to the project              note  classroom   did not do activity      denotes significance at the p        level   denotes significance at the p        level  table   student scores on using sequencing for control flow  sequencing instructions comparison to subsequent activity m u  bers et al    computers   education                       fig     mean achievement on choosing and sequencing instructions average scores for choosing and sequencing programming instructions according to the goal  the dip on both choosing instructions  marked with    and sequencing them  marked with    at activity   represents significantly lower scores as compared to activity   and the project  the drop in score for choosing instructions at activity   is also statistically significant  it was anticipated that the children s scores on the same concepts might increase with exposure  so comparisons were made between children s score on a concept in the activity that introduced it and the score on that same concept in the final project  however  there were no statistically significant differences seen in any such comparisons  see table     in summary  many children in each class reached the target level of achievement on the programming tasks over the course of the curriculum s six activities and culminating project  in the first three activities  which introduced the engineering design process  robotics  and programming  children s levels of achievement were particularly high       on average  reaching target level of achievement   in ac  tivities      which introduced more sophisticated concepts and programming instructions  fewer children       on average  attained the same level of understanding  many children achieved high scores on properly selecting and sequencing instructions when the programming activities involved only action instructions  w    for both skills  and in the final projects  achievement was comparatively lower in activities which involved the conceptually and functionally more complicated control flow instructions and or sensors      for both skills   programs that use special control flow instructions visually appear linear  but the robot does not carry out one action per programming block  as it does with a program containing only actions instructions  the logical flow of the program may be a loop or forked path rather than a line  this introduces a conceptual complexity to programming with control flow instructions that does not exist with action instructions alone  similarly  it appears based on relative scores that using the  if  instruction was simpler than using the  if not  instruction      versus     target achievement   the complexity of each programming concept appears to be reflected in the portion of students who reached target levels of understanding     discussion the results provide critical information on the accessibility of selected concepts from the fields of robotics and computer science for kindergarten children  adding clarity to developmentally appropriate learning expectations in order to revise and improve both the curricular activities and design features for early childhood robotics and programming technologies  the results also shed light on some of the challenges of conducting design based research in a classroom setting  one interesting feature of the results is the trend of decreasing achievement scores across lessons      this is possibly related to the amount of time spent on each topic  each activity in the curriculum introduced a progressively more challenging concept than the activity before it  in the later lessons  children were asked to build on concepts they had only recently learned  while each lesson was carefully designed to teach a particular topic and provide a space for exploration of it  these concepts may not have been fully ingrained or mastered yet while new material was introduced  this could also help explain lower scores in the later lessons  another interesting result relates to the several concepts for which children s average achievement scores increased from the final introductory lesson to the culminating project  with statistical significance  children averaged higher scores on choosing and sequencing activity   activity   activity   activity   project n mean                                         sd activity                                    df t                                     p                         a         a this comparison was made as an alternative to the activity   to project comparison as it was the last activity completed by all three classrooms prior to the project       note  classroom   did not do activity      denotes significance at the p        level   denotes significance at the p        level      m u  bers et al    computers   education                   table   student scores on using special instructions for control flow  control flow instructions comparison to analogous concept concept n mean sd                                                                  df t p                         looping instruction numeric parameters sensor parameters conditional  if  conditional  if not              numeric parameters         looping instruction         conditional  if          looping instruction         note  classroom   did not use conditional statements   denotes a statistically significant difference at the p        level  instructions during the final project than in any introductory activity except the first  and simplest  programming activity  while assistant from adults remained stable throughout all aspects of the curriculum and final projects  some other circumstances were different in the project compared to the lessons  the improved scores might be attributed to the fact that children had more enthusiasm for these personally selected projects that would soon be part of a show and tell celebration as well as more time to experiment at their own pace than in the lessons  alternatively  assuming children chose projects well matched to their level of expertise  it would be reasonable to expect higher demonstrated levels of achievement as their projects likely focused on concepts children already felt more comfortable using  however  there were no statistically significant differences seen in comparisons of control flow instruction and sensor related measures between the activity that introduced each concept and the culminating project  it is possible that even more time exploring these concepts was needed for significant learning gains to occur  surprisingly  children did not always perform better on simpler concepts than on more complex ones  for example  the lack of statistically significant differences between children s understanding of looping versus conditional programs and between numeric versus sensor parameters is unexpected both theoretically and based on anecdotal observations of these activities by researchers present during the activities  the concepts associated with looping and numeric parameters should  in principle  be more straight  forward than those involved in programming with conditional statements and sensor parameters  thus  at least somewhat higher levels of achievement on looping and numeric parameters had been expected compared to conditional statements and sensor parameters  in some of the comparisons described above  the low n  less than half the overall study sample size  may have impacted the results  the statistically significant findings may have varied if  for instance  the students for whom researchers could not collect data tended to have above  or below average achievement levels  as the activities in the curriculum increased in difficulty  the research assistants tended to provide increased support for children with questions  leaving less time to equally observe and assess all children  in fact  it was also observed that some children who perceived an activity to be difficult refrained from attempting it  resulting in no achievement scores for that activity and a lower n on those measures       curriculum discussion while it is beyond the scope of this paper to fully evaluate the tangiblek robotics curriculum  results indicate that the curriculum was generally engaging and developmentally appropriate for kindergarten students  results point to kindergarten teachers being able to effectively implement the curriculum and to kindergartners being both interested in and able to learn and apply many aspects of robotics  programming  and computational thinking  however  the fact that fewer children achieved the target level of understanding on more complex topics than on the introductory concepts might indicate that the curriculum should devote more time for children to build up to and fully explore the complex material in order to fully understand it  in order to test this  a new iteration of the curriculum is currently fig     mean achievement on control flow concepts  a comparison of average scores for the different types of control flow instructions and parameters  the only significant dif  ference in scores was between the two conditional instructions  marked with     table   students scores on concepts in culmination project  project scores comparison to introductory activity m u  bers et al    computers   education                       fig     an illustration of the engineering design process  being developed that will divide the prior curriculum based on action and sensing  and expand the number of lessons and amount of time spent exploring each topic  particularly the more complex ones  in both structured and free play based formats to provide further op  portunities for students  investigation of concepts and to reinforce their learning  additional supporting activities will also be added  kindergarteners vary widely in their levels of cognitive development and learning abilities  and such adaptations to the tangiblek cur  riculum may address this range even more than the current format already does  the results also demonstrate the complexity of assessing sophisticated learning processes in a classroom setting  there was a necessary trade off built into the study design  gathering an adequately detailed picture of children s learning had to be balanced with keeping data collection feasible given that each adult was working with several children in the context of a full classroom  in some cases  particularly the later activities   a different setting  such as individual child sessions  may have provided a better context for some students to demonstrate their abilities  however  the goal of the study was to examine the tangiblek program in a typical kindergarten classroom  and this endeavor was successful  although ultimately some data could not be collected from every student on every measure  information was gathered about the reality of implementing the curriculum in classroom settings and the supports necessary to meet the needs of all students       limitations of the study and future directions the tangiblek curriculum was taught during regular school hours in three schools in the greater boston area  there were both benefits and drawbacks to conducting research in a school setting rather than an experimental setting  by testing the curriculum as taught by kindergarten teachers  in both public and private schools  we have demonstrated that  given professional development in robotics edu  cation  a dedicated teacher can successfully teach this content in her or his own classroom  however  as with any study that takes place in a school setting  the present study faced several environmental limitations  while each of the participating teachers taught the same cur  riculum  it is impossible to control for all teacher  classroom  and school variations that may have influenced results  for example  the three teachers in this study were very different from one another  while some teachers allowed their class to work through difficult concepts on their own  others gave more step by step instructions  teachers were given leeway to teach the curriculum in whatever way they believed best suited the needs of their classrooms  however  this causes methodological issues for data analysis  further research should be con  ducted with a focus on how teaching styles and classroom culture serve to enhance or hinder a robotics curriculum  choosing instructions sequencing repeats numeric parameters sensors sensor parameters ifsa n mean                                                         sd   scoring                                                                          activity                if  df t p                                                                                            note  classroom   did not do activity    a there was no separate measure for using  if not  instructions in the projects      m u  bers et al    computers   education                   another drawback the study encountered was a fluctuating number of daily participants  children were fairly regularly absent  temporarily out of the classroom  or otherwise unable to participate in the class  other times  the busy classroom and divided adult attention prevented assessments from being collected for all children  particularly if an assessment required long and sustained periods of obser  vation  teacher differences also impacted the low number of participants in some activities  for example  one teacher chose not to teach lesson   in order to have more time to review previous concepts before the final project  drastically lowering the n for that lesson  further research should be done expanding the scope of this study by gathering more participants and  if possible  ensuring more consistent completion of each activity  the present study inspires additional research agendas  while the focus of this work is on kindergartners  further investigations should look at the way younger  prek k  and older   st  nd grade  students are able to learn and apply the same powerful ideas  it would be important to determine whether some of the concepts that were particularly challenging to the kindergartners in this study pose less of a challenge with longer exposure or if introduced when children are older  further research will also expand the overall sample size as well as the age and experience range of the sample  other work should attempt to assess the feasibility of implementing this curriculum for a classroom teacher with typical support staff  that is  with minimal involvement of research assistants except for training teachers and conducting data collection  in the present research  participating teachers each had about three trained assistants in the classroom to help troubleshoot technology issues  assess the children s progress  and provide one on one help as needed  for this curriculum to become widespread  it will be necessary to know more about what supports teachers need  modifications to the curriculum  classroom management alternatives  additional adult support  etc   to successfully implement the curriculum  finally  it is beyond the scope of this current study  but a follow up study could look at longitudinal or transfer effects of the tangiblek curriculum  what concepts do the students retain  how is computational thinking having an impact in other areas of their academic and extra curricular lives  are children able to apply the en  gineering design process to other subject areas after completing this curriculum  further research should look at the long term benefits of incorporating programming and robotics into early childhood education  it is important to note that many of the challenges that arose as part of the present study were posed by the robotics hardware itself  and not the curricular activities  this highlights the importance of making developmentally appropriate hardware and software specifically designed for young children  results show that for the children in this study  correctly connecting robotic parts proved more challenging than understanding the function of each part or the underlying computational concept  this result is not surprising since the cherp programming interface and the curricular activities introducing the robot s parts and their purposes were specifically developed for kin  dergartners as part of this research project  while the robotics kit hardware was designed for older children as part of a commercially available lego  product  furthermore  children spent a significant amount of time fixing their robots  which came apart frequently  it was challenging for many children to assemble some of the pieces on their own  and they needed adult help  if children had spent the robot repair time working on their computer programs instead  and if teachers were able to spend that time providing support for learning the central concepts rather than helping re build robots   perhaps children would have attained higher levels of achievement in their under  standing of complex powerful ideas involved in computational thinking  the findings from this study have informed the tangiblek project  in which early childhood teachers  pre kindergarten through  nd grade  will systematically implement a robotics curriculum revised according to several of the points outlined above  the teachers will document their experiences and their students  learning outcomes over the course of a school year using kiwi  a developmentally appropriate robotics hardware that will replace the lego  hardware used in this current study  despite the limitations of the study described in this paper  post study data collected from the teachers speaks to the success of the tangiblek robotics program  all the teachers said they would participate in tangiblek again if given the chance  along with the general success and enthusiasm of the children  this feedback highlights the overall positive and educational nature of the experience     conclusion the early childhood classroom is not typically a place where we expect to find students programming robots  yet  with the availability of developmentally appropriate technologies  this is increasingly possible  and the result may be the advancement of technological fluency in our nation s youth  this paper explored the tangiblek robotics program as a viable option for classroom teachers to integrate develop  mentally appropriate technology education into the early childhood classroom  with cherp  children spend their time building a robot  planning its actions  using physical wooden block or the computer screen to construct programs  and iteratively improving the robot and programs according to initial goals and subsequent discoveries  because the tangible programs and robots exist off screen  children are drawn to investigate the work of other children  work collaboratively  and negotiate sharing materials  as well as develop their fine motor skills  these artifacts serve as points of discussion and reminders of the activity content even after the computer has been turned off  as the analysis presented in this paper has explored  in this rich process of creation in both the physical and digital worlds  children actively engage in problem solving and learn powerful ideas from computer science and robotics  including core concepts of computational thinking  research is essential to understanding the impact of new technologies on the development of children and how children are using and could be using these tools  as parents  educators  policymakers  and researchers it is our responsibility to ensure our children receive the technological education needed for healthy development and a successful future  the tangiblek robotics program introduced in this paper shows that when given age appropriate technologies  curriculum and pedagogies  young children can actively engage in learning from computer programming as applied to the field of robotics  they can then take their first steps into developing computational thinking  acknowledgments the tangiblek project was supported by national science foundation  nsf  drl          any opinions  findings  and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the national science foundation  the authors would like to thank participating schools and teachers for their commitment to and participation in this project  references m u  bers et al    computers   education                       barron  b   cayton hodges  g   bofferding  l   copple  c   darling hammond  l     levine  m          take a giant step  a blueprint for teaching children in a digital age  new york  the joan ganz cooney center at sesame workshop  barr  v     stephenson  c          bringing computational thinking to k     what is involved and what is the role of the computer science education community  acm inroads               http   dx doi org                          bers  m  u          blocks  robots and computers  learning about technology in early childhood  new york  teacher s college press  bers  m  u          beyond computer literacy  supporting youth s positive development through technology  new directions for youth development              bers  m  u          designing digital experiences for positive youth development  from playpen to playground  oxford university press  bers  m  u     horn  m  s          tangible programming in early childhood  revisiting developmental assumptions through new technologies  in i  r  berson    m  j  berson  eds    high tech tots  childhood in a digital world  pp          greenwich  ct  information age publishing  bers  m  u   ponte  i   juelich  k   viera  a     schenker  j          teachers as designers  integrating robotics into early childhood education  information technology in childhood education  cejka  e   rogers  c     portsmore  m          kindergarten robotics  using robotics to motivate math  science  and engineering literacy in elementary school  international journal of engineering education                  clements  d  h     gullo  d  f          effects of computer programming on young children s cognition  journal of educational psychology                    http   dx doi org                               clements  d  h     meredith  j  s          research on logo  effects and efficacy  retrieved from http   el media mit edu logo foundation pubs papers research logo html  cobb  p   confrey  j   disessa  a   lehrer  r     schauble  l          design experiments in educational research  educational researcher               gelman  r     brenneman  k          science learning pathways for young children  early childhood research quarterly  special issue on early learning in math and science                   horn  m  s   davis  p   hubbard  a   keifert  d   leong  z  a     olson  i  c   june        learning sustainability  children  learning  and the next generation eco feedback technology  in proc    th international conference on interaction design and children  short paper   ann arbor  mi  international society for technology in education          nets for students      profiles  washington  dc  iste  retrieved from www iste org standards nets for students  nets for students      profiles aspx pk    international society for technology in education and the computer science teachers association          operational definition of computational thinking for k    thinking  operational definition flyer pdf  international society for technology in education and the computer science teachers association  kazakoff  e     bers  m          programming in a robotics context in the kindergarten classroom  the impact on sequencing skills  journal of educational multimedia and hypermedia                  kazakoff  e   sullivan  a     bers  m          the effect of a classroom based intensive robotics and programming workshop on sequencing ability in early childhood  early childhood education journal                  klahr  d     carver  s          cognitive objectives in a logo debugging curriculum  instruction  learning  and transfer  cognitive psychology               lee  i   martin  f   denner  j   coulter  b   allan  w   erickson  j   et al          computational thinking for youth in practice  acm inroads               massachusetts department of education          massachusetts science and technology engineering curriculum framework  retrieved from  massachusetts department of education http   www doe mass edu frameworks scitech      pdf  naeyc   fred rogers center for early learning and children s media          technology and interactive media as tools in early childhood programs serving children from birth through age    joint position statement  washington  dc  naeyc  latrobe  pa  fred rogers center for early learning at saint vincent college  retrieved from www naeyc  org files naeyc file positions ps technology web  pdf  neuman  s  b     dickinson  d  k   eds            handbook of early literacy research  new york  guilford press  papert  s          mindstorms  children  computers and powerful ideas  new york  basic books  papert  s          what s the big idea  toward a pedagogy of idea power  ibm systems journal                      http   dx doi org         sj           pea  r  d     kurland  d  m          on the cognitive effects of learning computer programming  new ideas in psychology                 http   dx doi org                  x             perlman  r          using computer technology to provide a creative learning environment for preschool children  logo memo no     cambridge  ma  mit artificial intelligence laboratory publications  piaget  j          the construction of reality in the child  new york  basic books  resnick  m          playful learning and creative societies  education update        retrieved from http   web media mit edu wmres papers education update pdf  rogoff  b   goodman turkanis  c     bartlett  l          learning together  children and adults in a school community  new york  ny  oxford university press  salomon  g     perkins  d  n          transfer of cognitive skills from programming  when and how  journal of educational computing research              sesame workshop          sesame workshop and the pnc foundation join white house effort on stem education  retrieved from http   www sesameworkshop org  newsandevents pressreleases stemeducation           stair  r  m     reynolds  g  w          principles of information systems   th ed    boston  ma  course technology   itp  u s  department of education  office of educational technology          transforming american education  learning powered by technology  washington  dc  u s  department of education  office of educational technology  retrieved from http   www ed gov technology netp       white house          educate to innovate  retrieved from http   www whitehouse gov issues education educate innovate  wyeth  p          how young children learn to program with sensor  action  and logic blocks  international journal of the learning sciences                  zelazo  p  d   carter  a   reznick  j  s     frye  d          early development of executive function  a problem solving framework  review of general psychology                 zigler  e  f     bishop josef  s  j          the cognitive child vs  the whole child  lessons form    years of head start  in d  g  singer  r  m  golinkoff    k  hirsh pasek  eds    play     learning  how play motivates and enhances children s cognitive and social emotional growth  pp          new york  ny  oxford university press  
 ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org thinging for computational thinking sabah al fedaghi    ali abdullah alkhaldi  computer engineering department kuwait university  kuwait abstract this paper examines conceptual models and their application to computational thinking  computational thinking is a fundamental skill for everybody  not just for computer scientists  it has been promoted as skills that are as fundamental for all as numeracy and literacy  according to authorities in the field  the best way to characterize computational thinking is the way in which computer scientists think and the manner in which they reason how computer scientists think for the rest of us  core concepts in computational thinking include such notions as algorithmic thinking  abstraction  decomposition  and generalization  this raises several issues and challenges that still need to be addressed  including the fundamental characteristics of computational thinking and its relationship with modeling patterns  e g   object oriented  that lead to programming coding  thinking pattern refers to recurring templates used by designers in thinking  in this paper  we propose a representation of thinking activity by adopting a thinking pattern called thinging that utilizes a diagrammatic technique called thinging machine  tm   we claim that thinging is a valuable process as a fundamental skill for everybody in computational thinking  the viability of such a proclamation is illustrated through examples and a case study  keywords computational thinking  conceptual modeling  abstract machine  thinging  abstraction i  introduction the cognitive faculty of thinking     involves processes by which we reason and solve problems   computational thinking is a fundamental skill for everybody  not just for computer scientists  to reading  writing  and arithmetic  we should add computational thinking to every child s analytic ability       computational thinking is distanced from digital literacy competence  as it focuses on problem solving processes and methods and on creating computable solutions      it has been promoted as skills that are as  fundamental for all as numeracy and literacy       it goes beyond introductory knowledge of computing to treat computer science as an essential part of education today and presents a distinct form of thought  separate from these other academic disciplines  where diagrammatic techniques are used in analysis and strategic planning      in this perspective of computational thinking  computer science modeling techniques are essential in many aspects of modern day research and in understanding things for all people who expect to live and work in a world where information is stored  accessed  and manipulated via computer software      wing     defined computational thinking as something that  involves solving problems  designing systems  and understanding human behavior  by drawing on the concepts fundamental to computer science   it includes        a thought process  thus independent of technology    a specific type of problem solving that entails distinct abilities  e g   being able to design solutions that can be executed by a computer  human  or both   however  bocconi et al      raised several issues and challenges that must be addressed for the effective integration of information technology in compulsory education  including what are the core characteristics of computational thinking and its relationship with programming coding in compulsory education  coding  programming  is regarded as a key   st century skill   coding is the literacy of today and it helps practice   st century skills such as problem solving  modeling and analytical thinking       the authors of european e skills manifesto     declared that  skills like coding are the new literacy  whether you want to be an engineer or a designer  a teacher  nurse or web entrepreneur  you ll need digital skills   in this paper  we seek to contribute to the current debate on computational thinking with particular focus on the following  a  conceptualization in computer science  conceptualization is the first stage of the model building process to arrive at a representation capable of addressing the relevant problem  a conceptual model is mainly formed upon concepts such as components of thinking  it can provide a framework for thinking that structures notions into patterns according to categories to provide a basis to represent internal thinking in an external form  here  we use this modeling in the sense of patterned thinking      e g   object oriented modeling   where pattern refers to recurring templates used by persons in the thinking process  this paper promotes conceptual modeling that is based on the heideggerian     notion of thinging as a framework for computational thinking  heideggerian thinging is generalized as an abstract thinging machine  tm          b  core concepts as will be described in this paper  we propose five basic concepts to model computational thinking    the notion of thing    the notion of tm    five flow operations of things  create  process  release  transfer  and receive  and   triggering   ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org c  programming coding a diagram can be coded  and the code and diagram approximate the conceptual form of the programmer behind both  a tm is expressed as a diagram that can be mapped to programming coding in the same way as flowcharts  it is important to mention this property of the tm  even though it will not be explored in this paper  to achieve a self contained paper  section ii reviews the tm that was adopted in this paper and was used previously in several published papers  as mentioned previously  section iii presents examples of applying tm in computational thinking  section iv applies the tm in an actual case study  ii  thinging machine  tm  drawing on deleuze and guattari       who declared  admittedly from a different prospect  all objects can be understood as machines   tm based conceptual modeling utilizes an abstract thinging machine  hereafter  machine  with five stages of thinging  as shown diagrammatically in fig     in philosophy  thinging refers to  defining a boundary around some portion of reality  separating it from everything else  and then labeling that portion of reality with a name        however  according to our understanding  thinging is when a thing manifests or unfolds itself in our conceptual space  an architect realizes the thing house  which in turn things  verb       that is  it presents its total thingness  which includes living space  shelter from natural elements  family symbol  etc  this issue will be explained later in this paper  our tm modifies heidegger s     notion of thinging by applying it to the life cycle of a thing and not just to its ontological phase  producing   a thing things  in other words  a bridge is not a mere object  rather  it establishes itself in a conceptual realm as unified whole involving riverbanks  streams  and the landscapes  when representing it  we can view thinging as akin to an abstraction  but it differs in being expansive instead of being reductive in detail  in the tm  we capture thinging as a dynamic machine of things that are created  processed  received  released  and transferred the operations of fig     heidegger     offered an example of thinging through the thing jug  when the clay is shaped into a jug  the jug manifests itself in heidegger s words into  what stands forth   its thingness conquests and entraps the void that holds and takes over its task of embracing and shielding the penetrating wine  thus connecting itself to a setting of vine  nature  etc  this conceptualization of the thing jug comes as a reaction to the physical formation of the clay  according to heidegger   we are apprehending it so it seemsas a thing       italics added   the tm expands this thinging by conceptualizing the jug not only through its existence but also through its activities as a machine  an assemblage  that creates  e g   certain shape of void   releases  transfers  e g   air   receives  and processes other things  it is not only a thing that things but also a machine that machines  verb   heidegger     distinguished between objects and things   the handmade jug can be a thing  while the industrially made can of coke remains an object        the industrially made can of coke has minimal thinging and maximal abstracting  see later discussion   note that this does not apply to other industrial devices that are not cut off from their  roots   the thermostat  for example  is an industrial product that manifests itself in its environment  as will be represented later in this paper  for heidegger      things have unique  thingy qualities       that are related to reality and therefore are not typically found in industrially generated objects  according to heidegger      a thing is self sustained  self supporting  or independent something that stands on its own  the condition of being self supporting transpires by means of producing the thing  according to heidegger      to understand the thingness of a thing  one needs to reflect on how thinging expresses the way a  thing things   i e    gathering  or tying together its constituents into a whole   according to thomas et al        heidegger s view can however be seen as a tentative way of examining the nature of entities  a way that can make sense  an artefact that is manufactured instrumentally  without social objectives or considering material spatial agency  may have different qualities than a space or artefact produced under the opposite circumstances  the tm handles things and is itself a thing that is handled by other machines  the stages in the machine can be briefly described as follows  arrive  a thing flows to a new machine  e g   packets arrive at a buffer in a router   accept  a thing enters a machine  for simplification purposes  we assume that all arriving things are accepted  hence  we can combine arrive and accept into the receive stage  release  a thing is marked as ready to be transferred outside the machine  e g   in an airport  passengers wait to board after passport clearance   process  change   a thing changes its form but not its identity  e g   a number changes from binary to hexadecimal   create  a new thing is born in a machine  e g   a logic deduction system deduces a conclusion   transfer  a thing is inputted or outputted in out of a machine  a tm also utilizes the notion of triggering  triggering is the activation of a flow  denoted in tm diagrams by a dashed arrow  it represents a dependency among flows and parts of flows  a flow is said to be triggered if it is created or activated by another flow  e g   a flow of electricity triggers a flow of heat  or activated by another point in the flow  triggering can also be used to initiate events such as starting up a machine  e g   remote signal to turn on   multiple machines can interact by triggering events related to other machines in those machines  stages  fig     thinging machine  create receive release transfer process output input accept arrive  ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org iii  example according to riley and hunt     in their book computational thinking for the modern problem solver  an abstraction is anything that allows us to concentrate on important characteristics while deemphasizing less important  perhaps distracting  details  abstraction is a core concept in computational thinking in addition to such notions as algorithmic thinking  decomposition  and generalization      riley and hunt     stated that programmers are really a kind of problem solver and that computer programmers are arguably the most important of all modern problem solvers  the best way to characterize computational thinking is through the way computer scientists think  as well as the manner in which computer scientists think for the rest of us  as a digital camera uses a handful of focus points  computer scientists learn to focus on the most important issues through abstraction      the notion of abstraction goes all the way back to plato  who proposed to distinguish abstract ideas as ideal entities that capture the essence of things  they are abstraction  that is  ideas that do not exist in the world  we can note two basic aspects of abstraction    not being in reality    being reductive in details abstraction is an important way of thinking  nevertheless  we claim that thinging is also a valuable process as a fundamental skill for everybody in computational thinking  thinging takes a holistic view by  in contrast to abstraction  being expansive in detail  as shown in fig     thinging is an abstraction like process that deemphasizes reduction and hence facilitates seeing the  bigger picture   note that thinging and abstraction can be performed at several levels of expansion and in reduction of details  fig    illustrates the nature of thinging as an inverse of realization in reality  note the reductive nature of object oriented modeling  e g   uml  in the following example  as shown in fig     riley and hunt     abstractly described the thermostat  which involves a class diagram rectangle consisting of three parts diagrammed in three compartments  the middle compartment lists attributes of the thermostat  the operations in a class diagram are listed in the bottom compartment  where operations are abstract references to the behavior of the object  the following model presents an alternative conceptualization of the thermostat  a  static tm of the thermostat the thermostat can be represented as in fig     in line with the previous discussion on the thermostat  its thingness includes switch      fan      and temperature      the switch includes three signals  cool      off      and heat      which flow to change the state     of the cooling heating machine      similarly  signals set the temperature     and change the state of the fan       b  behavior of the thermostat behavior in a tm is represented by events  an event is a thing that can be created  processed  released  transferred  and received  it is also a machine that consists of  at least  three submachines  region  time  and the event itself  as a side note  we may conceptualize the tms as fourfold that is  consisting of space  time  event  and things  fig     thinging is an expansive reverse of realization in reality  fig     the thing jug things through its total thingness  fig     description of the class temperature  adapted from       fig     the tm representation of the thermostat  thing reality abstraction thinging object reality abstraction thinging   thermostat heatswitchsetting cool off heat  fansetting  on auto  temperaturesetting  integer setminfunction f  cool off heat  setfan  b  on auto  settemperature  t  integer  create create create switch thermostat state create cooling heating machine cool off heat receive receive process process create process transfer release transfer release transfer create transfer release transfer temperat ure fan receive process receive transfer transfer transfer receive state create on auto fan release transfer release transfer                    create transfer release transfer process receive    ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org consider the event the switch turns off  see fig      it includes the event itself  circle   in fig      the region of programmers the things currently being dealt with in the event      and the time machine      the region is a subgraph of the static representation diagram of fig     for simplicity s sake  we will represent an event by its region only  accordingly  we can identify four basic events in the static description of fig     as shown in fig       event    e    the switch is cool    event    e    the switch is off    event    e    the switch is heat    event    e    the temperature is set    event    e    the fan is on    event    e    the fan is auto  these events can be written as statements of any programming language  c  control of the thermostat a possible events chronology is shown in fig     which represents the permitted sequence of events  for example  switching directly from cool to heat and vice versa without first turning the cool heat machine off is not permitted  these sequences are shown in fig     a e  as follows     the cool heat machine is off  a  select  cool or heat   then fan  on fan  set the temperature   b  select heat  select the state of the fan  set the temperature      the cool heat machine is on  cool or heat   and the fan is  on or auto   switch fan to  on or auto      the cool heat machine is on  cool or heat   set the cool heat machine off     the cool heat machine is on  cool or heat   set the temperature     the cool heat machine is off  switch fan to  on or auto   fig     he event  the switch turns off  fig     the events of the thermostat  fig     chronology of events  fig     permitted sequence of control operations  d  mapping to class notations selecting the events is a design decision  tm representation shows that riley and hunt     declared only three events  fig         event    e    the switch is cool off heat    event    e    the fan is off auto    event    e    the temperature is set  fig      the events of the thermostat  create switch thermostat create state machine off receive process transfer release transfer region  subdiagram  create process  takes course transfer receive process  consume release transfer time event itself e  e  e  e  e  e  create create create switch thermostat state create cooling heating machine cool off heat receive receive process process create process transfer release transfer release transfer create transfer release transfer temperat ure fan receive process receive transfer transfer transfer receive state create on auto fan release transfer release transfer create transfer release transfer process receive e  e  e  e  e  e  e  e  e  e  e   a  e  e  e  e   b  e  e  e   c  e  e  e   d  e  e  e   e  create switch thermostat state create machine cool off heat receive process create transfer release transfer create transfer release transfer fan temperature receive process receive transfer state create on auto fan release transfer e  e  e   ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org fig      the switch representation in the   events  left  and   events  right  designs of the thermostat  fig     contrasts the switch representation in the   and   designs  the class notation given by riley and hunt     can be viewed as mere names for data items and methods  processes  that can be mapped to the tm  as shown in fig      thus  we can produce the class description from the tm representation  the important point is that the object oriented thinking style  the class description  is produced before describing the methods  whereas in the tm  the tm machines are developed right from the beginning of the analysis  designing the thermostat in terms of three events is the result of this object orientation  which captures the three events because it does not see all the possibilities of design  fig      tm and class entries  consider the   events and   events designs  the   events uses one wire between the thermostat and the cool heat machine  whereas the   events design uses three  each implementation has its merits  the   events design is cheaper  and the   events is more reliable  for example  in the   events design  if heating does not work  the cooling feature will still work when the link to the cool heat machine is cut  the point here is that the object orientation  as discussed by riley and hunt      does not seem to be aware of available alternative designs  this is an important observation in the context of thinking  according to do and gross       in design   drawing is intimately bound with thinking   iv  case study the thermostat s tm modeling is a small artificial example of problem solving by describing it conceptually  our case study involves a large real problem  how to model a help desk in a government ministry  in its actual environment  the workplace of the second author   the maintenance process starts when a user contacts the it department for help  the department calls such a process the help desk process  it is a problematic system that involves implicit contacts and interactions in the alignment between it and business       in this case study  the it department solved the help desk problems using an ad hoc technique that involves thinking of it as a semi automated system that is built piece by piece over several years  there is no current documentation  even though the manager of the help desk drew flowcharts that show the full description of the processes behind how the help desk works for different tasks  as shown in fig      in projecting this system on heidegger s jug  in such an approach  this can be viewed as failure to give thought to  what the jug holds and how it holds   help desk operations are causing many types of managerial  supervision  technical  and legal problems  a possible solution is a holistic approach that involves all related elements in the help desk system  it is a system that exists in reality and needs a better understanding of its thinging  it is misthinged or  in heideggerian language  a broken tool that marks the annihilation of the  equipmental thing   it help desk   in that helping cannot be gathered around it  fig      sample current documentation  create  cool  process if cool if off if heat release transfer transfer receive create create create process process process release transfer transfer release transfer transfer release transfer transfer receive receive receive cool off heat cool off heat create  off  create  heat  create thermostat state create machine cool off heat receive process create transfer release transfer create transfer release transfer receive process receive transfer state create on auto fan release transfer e  e  tempreture setting  integer setminfunction f  cooloff heat  settempreture  t  integer  setfan  b  on auto  fansetting  on auto  heatswitchsetting cool off hea t  e   ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org accordingly  we consider the question   how does the it help desk operate   we conceptualize it as a tm that creates  processes  releases  transfers  and receives things  the helping system includes things that are machines and machines that are things unfolding an integrated wholeness that is itself part of the ministry s machinery  we focus next on thinging the it help desk  a  static model accordingly  we model the help desk system  as shown in fig      in the figure  the user sends a request to the secretary of the workshop  circle     the request is checked to decide whether it is for repair  a  or for spare parts  b   b  request for repair the repair request flows to the workshop administrator      where it is processed to do the following     selecting a specific technician for this request  to accomplish that  the list of technicians is processed     to generate the name of a technician         creating a task  ticket   additionally  the administrator creates a new task form     that includes the request description     and the technician s name      the task then flows     to the technician  who later examines the task to decide on the following     given that it is possible to call the user and solve the problem by phone       the technician places a phone call      to the user and guide the user step by step to solve the problem through the phone          the technician is required to go to the user s workplace      to solve the problem by him  herself       the technician moves from the workshop to the user s location       the user brings the computer to the technician to work on it and repair it       after processing the computer       the technician has one of the two following outcomes     the computer is not repaired       and the technician takes it back to the workshop  there  it is fixed       and the workshop admin      transfers the fixed computer back to the user          the computer is repaired      and transferred back to the user     and      both previous outcomes lead to       where the user gets the computer and processes it to see whether it is repaired     the computer works fine       as a result  the user creates a report      to close the request and sends this report to the workshop admin          the computer repair is not satisfactory       and the user creates a follow up request      for repair and sends it to the secretary  a   request for spare parts the spare parts request flows to the inventory department       where it is processed      to extract the quantity of current spare parts in the inventory      and to transfer it to a program that checks this quantity of spare parts          if the number is zero  the number of the pending requests would be incremented by one       moreover  the request would be released      and added to a queue of pending requests          if the number is greater than zero  the request is processed again     and     to extract the requested quantity of spare parts       note that we renovated an existing system and did not design the best model for this application  for example  it is possible to define the minimum value of inventory instead of permitting it to reach zero  thus  our thinging of the system is tailored to the existing requirements  both the numbers of the requested items      and current quantity      are transferred to a program that calculates the available quantity      that can be delivered to the requester  a simple formula calculates what is called remaining quantity as follows  remaining quantity   current quantity   requested quantity      accordingly  two possibilities arise     the remaining quantity is greater than or is equal to zero       in other words  the full requested quantity can be provided to the user  in that case  the request is released      and transferred to the storage  where it is received and processed      and the stored spare parts are sent to the requester          the remaining quantity is less than zero       as a result  a new quantity called pending is created and calculated as the following  pending   requested quantity   current quantity accordingly  a new request that specifies the quantity that is currently in the possession of the inventory department is created      and forwarded to the storage  and then steps          are repeated  also  a new request that specifies the number of pending quantities is created and considered as a new request       in parallel  according to a certain schedule       the list of pending requests is processed  and each request  the loop is specified in the dynamic tm model  is taken out and processed to create a pending request      that  in turn  is processed  thus leading to the creation of an ordered quantity       the ordered quantity is added to the total number of ordered items       later  the total number of ordered items       along with the current quantity       flows to a committee for examination  and the evaluation of the need for new spare parts is processed       hence  a decision is created      and processed for making orders       which flow to the workshop admin       in the workshop admin  the orders are processed to      create orders to the suppliers      and transfer these orders to the purchase department       there  each order is processed      and put on hold while waiting to assign a budget       a request for a budget is created      by the purchase department and is transferred to the budget department       the budget  ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org department processes the budget request       approves it  and then sends the approval to the purchase department       in the purchase department       the approval is processed  thus leading to placing an order to the supplier       fig      the tm representation of the it department help desk system  workshop admin   receive transfer process   report to close request computer receive process  transfer transfer release receive release transfer if not repaired if repaired technician with computer if acceptable else user process  technician  in user place  storage budget department order budget approval workshop inventory department orders requester process  remaining quantity   current quantity   requested quantity if remaining     pending   requested quantity   current available   current if remaining      process  if current quantity is   if current quantity is greater than   checking current quantity requested quantity current quantity list of pending requests no  of requests in pending add   checking available quantity release create stored spare parts   release create receive release transfer transfe r receive transfer requested quantity or available quantity release transfer create total ordered items transfer transfer pending request create process create process ordered quantity process request budget purchase department transfer release create receive transfe receive r committee transfer receive transfer current quantity receive transfer process create process decision supplier release process transfer process workshop admin receive transfer process release transfer transfer receive transfer release create transfer receive process transfer release create transfe r receive process release transfe r transfer process technician receive transfer transfer phone call process him herself task technician name release transfer receive transfer transfer computer receive transfer transfer transfer receive create release transfer create process  if requires going to user else technicians list release release secretary transfer receive process release transfer                                  process receive transfer transfer release create create transfe r transfer                        request release create create     release release process          create                                                         a b release transfer transfer         transfer receive   transfer receive process          process                                                                              transfer receive receive supplier request for parts request for repair release  ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org fig      events of the tm representation of the it department help desk system  partial   c  behavior model as mentioned previously in the thermostat example  behavior in a tm is represented by events  accordingly  we can identify the following events in the static description of fig      as shown in fig      to save space  we identify only the upper part of fig      requesting parts     event    e    the secretary receives a request for purchasing spare parts    event    e    the inventory department receives and processes the request    event    e    the current quantity is retrieved and processed    event    e    if the current quantity is    add the request to the pending requests list and update the number of pending requests    event    e    if the current quantity is greater than    extract the requested quantity    event    e    find remaining  quantity   current quantity   requested quantity  and process it    event    e    given that remaining        retrieve the requested items from the storage    event    e    send the requested items to the requester    event    e    if remaining      calculate pending   requested  quantity current   create a request for pending items  and add the request to the list of pending requests    event     e     if remaining      calculate available   current and retrieve the requested items from the storage  e  a request secretary e  b storage requested quantity receive process transfer release request for parts transfer pending request create process process list of pending requests no  of requests in pending transfer e  inventory department orders release create transfer budget department budget approval workshop request budget purchase department transfer receivetransfer process process transfer release create transfe r receive process release transfe r create transfer workshop admin transfer release process transfer receive e   transfer release release create order receive process transfer current quantity transfer release current quantity release transfer transfe receive r process  if current quantity is   if current quantity is greater than   e  process process  remaining quantity   current quantity   requested quantity if remaining     pending   requested quantity   current available   current if remaining      checking available quantity create transfer receive release transfer create e  e  release create transfer e  e  e   e e      process create process decision receive committee transfe er   e   total ordered items checking current quantity add   ordered quantity create process e   create e  requester stored spare parts   requested quantity or available quantity receive transfer release process e   e   e   e   e   e   receive receive receive transfer  ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org   event     e     retrieve the pending requests and extract the requested quantities    event     e     both requested pending quantities and current quantities are sent to the ordering committee    event     e     the committee creates orders and sends them to the workshop    event     e     orders are received by the workshop and orders to the supplier are created    event     e     the purchase department receives orders for the supplier    event     e     a request for budget is created    event     e     the request for budget flows to the budget department    event     e     the budget is approved    event     e     orders for the supplier are sent    event     e     ordered items are received from the supplier    event     e     items as sent to the storage  fig     shows the chronology of these events  d  control control can be superimposed onto the events of the tm system  in the case study  suppose that we want to declare the following warning messages related to the management of the system     if the time to order from the supplier in the workshop exceeds t   then create a warning message     if the time to deliver items received from the supplier to the requester exceeds t   then create a warning message  fig     shows the declaration of these rules over the chronology of events  in fig      when the workshop receives an order  the time of the order arrival is created  this time is processed repeatedly  if the time exceeds t  the time period since the receiving of the order then a warning is created  a similar process is followed for the second rule  fig      the chronology of events of the case study  fig      examples of control in the case study  e  e  e  e  e  e  e  e  e  e   e   e   e   e   e   e   e   e   e   e   e   e   budget department budget approval workshop request budget purchase department receive receive transfer transfer process process release transfer transfer release create transfe r receiv e process release transfe r create transfer release create workshop admin transfer receive process transfer release process supplier order supplier transfer receive e   storage e   e   e   e   e   e   e   transfer receive release transfer requester transfer receive e   e  e   e   e   e   e   e   e   e   e  create process create process if time is greater than t  send warning cancel time cancel if time is greater than t  time send warning  ijacsa  international journal of advanced computer science and applications  vol      no                p a g e www ijacsa thesai org fig      simplification of the tm representation of the it department help desk system by removing the stages transfer  release  and receive  v  conclusion we proposed using a new modeling technique  tm  as a foundation in computational thinking  according to the tm approach  a person s  thought machine  forms a train of thought that excludes other modes such as procedural and object oriented modes of thinking  the paper emphasizes this thinking style as a unifying method that could have diverse applications  the tm is an underlying tool for expressing the unified totality of a system s things and machines analogous to carpeting techniques where a ground fabric beneath the design binds pieces and sews the patterns of fabric  to substantiate our claim  we contrast the tm side by side with diagrams of other approaches  e g   the thermostat   although we provided comprehensive evidence of our claim  its inaccuracy or its partial value needs efforts beyond a single researcher  however  the thermostat example and the case study seem to point to some merits that deserve more development  fig     of the case study may raise the issue of the tm diagram s complexity  the tm model can be specified at various levels of granularity  for example  fig     is a simplified version of the lower part of fig      the stages transfer  release  and receive are deleted under the assumption that the direction of the flow arrow is sufficient to represent them  references     r  langacker  foundations of cognitive grammar  theoretical prerequisites  vol     palo alto  ca  stanford university press            d  riley and k  hunt  computational thinking for the modern problem solver  second edition  boca raton  fl  taylor   francis group  llc            s  bocconi  a  chioccariello  g  dettori  a  ferrari  and k  engelhardt  developing computational thinking in compulsory education  luxembourg  publications office of the european union  doi                           j  m  wing   computational thinking and thinking about computing  phil  trans  r  soc  a  mathematical  physical and engineering sciences  vol       pp                       a  mccormack  the e skills manifesto  european schoolnet  digitaleurope   brussels            r  c  anderson   the notion of schemata and educational enterprise  general discussion of the conference   in schooling and the acquisition of knowledge  r  c  anderson  r  j  spiro  and w  e  montague  eds  hillsdale  erlbaum  pp                      m  heidegger   the thing   in poetry  language  thought  a  hofstadter  trans  new york  harper   row        pp               s  al fedaghi   thinging for software engineers   international journal of computer science and information security  vol      no     pp                    s  al fedaghi   thinging vs objectifying in software engineering   international journal of computer science and information security  vol      no      pp                    s  al fedaghi and h  aljenfawi   a small company as a thinging machine     th int  conf  on info  mgmt  and eng   icime   university of salford  manchester  england  september                   s  al fedaghi and n  al huwais   enterprise asset management as a flow machine   international journal of modeling and optimization  vol     pp                      s  al fedaghi   software engineering interpretation of information processing regulations   ieee   nd annual international computer software and applications conference  ieee compsac        turku  finland  pp           july      august               s  al fedaghi   flow based enterprise process modeling   international journal of database theory and application  vol     no     pp                    g  deleuze and f  guattari  anti oedipus  capitalism and schizophrenia  minneapolis  mn  university of minnesota press             j  carreira  philosophy is not a luxury  https   philosophyisnotaluxury com            to thing a new verb   last accessed                  b  latour   why has critique run out of steam  from matters of fact to matters of concern  in critical inquiry  vol      no     pp          winter            l  thomas  m  ratcliffe  and b  j  thomasson   can object  instance  diagrams help first year students understand program behaviour   diagrams  international conference on theory and application of diagrams  pp                      e  y  l  do and m  d  gross   thinking with diagrams in architectural design   artif  intell  rev   vol      pp                      o  ivarsson   quality management for it support services   a case study of an it helpdesk service   master thesis  department of technology management and economics  chalmers university of technology  gothenburg  sweden        report to close request computer process  if not repaired if repaired technician with computer if acceptable else user process  technician  in user place  workshop admin technician phone call process him herself task technician name computer create create process  if requires going to user else secretary create create process request process create a process process request for repair technicians list 
full length article which cognitive abilities underlie computational thinking  criterion validity of the computational thinking test marcos roman gonz   alez       juan carlos perez gonz   alez  carmen jim   enez fern   andez   universidad nacional de educacion a distancia  uned   faculty of education  c  juan del rosal  n         c p         madrid  spain article info article history  received    april      received in revised form    july      accepted    august      available online    september      keywords  computational thinking computational thinking test code literacy computer science education cognitive abilities cognitive assessment educational psychology primary education secondary education abstract computational thinking  ct  is being located at the focus of educational innovation  as a set of problemsolving skills that must be acquired by the new generations of students to thrive in a digital world full of objects driven by software  however  there is still no consensus on a ct definition or how to measure it  in response  we attempt to address both issues from a psychometric approach  on the one hand  a computational thinking test  ctt  is administered on a sample of       spanish students from  th to   th grade  so its descriptive statistics and reliability are reported in this paper  on the second hand  the criterion validity of the ctt is studied with respect to other standardized psychological tests  the primary mental abilities  pma  battery  and the rp   problem solving test  thus  it is intended to provide a new instrument for ct measurement and additionally give evidence of the nature of ct through its associations with key related psychological constructs  results show statistically significant correlations at least moderately intense between ct and  spatial ability  r          reasoning ability  r          and problemsolving ability  r          these results are consistent with recent theoretical proposals linking ct to some components of the cattel horn carroll  chc  model of intelligence  and corroborate the conceptualization of ct as a problem solving ability         elsevier ltd  all rights reserved     introduction we live immersed in a digital ecosystem full of objects driven by software  manovich         in this context  being able to handle the language of computers is emerging as an inescapable skill  a new literacy  which allows us to participate fully and effectively in the digital reality that surrounds us  it is about to  program or be programmed   rushkoff         it is about to be  app enabled or appdependent   gardner   davis         the term  code literacy  has recently been coined to refer to the process of teaching and learning to read write with computer programming languages  prensky        rushkoff         thus  it is considered that a person is code literate when is able to read and write in the language of computers and other machines  and to think computationally  rom  an gonzalez            if code literacy refers ultimately to a new read write practice  computational thinking  ct  refers to the underlying problem solving cognitive process that allows it  in other words  computer programming is the fundamental way that enables ct come alive  lye   koh         although ct can be transferred to various types of problems that do not directly involve programming tasks  wing         given this current reality overrun by the digital  it is not surprising that there is renewed interest in many countries to introduce ct as a set of problem solving skills to be acquired by the new generations of students  even more  ct is becoming viewed at the core of all stem  science  technology  engineering    mathematics  disciplines  henderson  cortina    wing        weintrop et al          although learn to think computationally has long been recognized as important and positive for the cognitive development of students  liao   bright        mayer        papert         as computation has become pervasive  underpinning communication  science  culture and business in our society  howland   good         ct is increasingly seen as an essential skill to create rather than just consume technology  resnick et al          thus  many governments around the world are incorporating computer programming into their national educational curricula  the recent decision to introduce computer science teaching from primary school onwards in the uk  brown et al         and others european countries  european schoolnet        reflects the growing recognition of the importance of ct    corresponding author  e mail addresses  mroman edu uned es  m  roman gonz   alez     jcperez edu  uned es  j  c  perez gonz   alez     mjimenez edu uned es  c  jimenez fern   andez     contents lists available at sciencedirect computers in human behavior journal homepage  www elsevier com locate comphumbeh http   dx doi org         j chb                              elsevier ltd  all rights reserved  computers in human behavior              e    however  there is still little consensus on a formal definition of ct  gouws  bradshaw    wentworth        kalelioglu  g lbahar    kukul         and disagreements over how it should be integrated in educational curricula  lye   koh         similarly  there is a worrying vacuum about how to measure and assess ct  fact that must be addressed  without attention to assessment  ct can have little hope of making its way successfully into any curriculum  furthermore  in order to judge the effectiveness of any curriculum incorporating ct  measures that would enable educators to assess what the student has learned need to be validated  grover   pea         in response  we attempt to address these issues from a psychometric approach  on the one hand  how our computational thinking test  ctt  has been designed and developed is reported  as well as its descriptive statistics and reliability derived from an administration on a sample exceeding a thousand spanish students  on the other hand  the criterion validity  cronbach   meehl        of the ctt is studied with respect to already standardized psychological tests of core cognitive abilities  thus  this paper is aimed at providing a new instrument for measuring ct and additionally giving evidence of the correlations between ct and other well established psychological constructs in the study of cognitive abilities       computational thinking definitions we can distinguish between  a  generic definitions  b  operational definitions  c  educational and curricular definitions         generic definitions one decade ago  in       jeanette wing s foundational paper defined that ct  involves solving problems  designing systems  and understanding human behavior  by drawing on the concepts fundamental to computer science   wing        p       thus  ct s essence is thinking like a computer scientist when confronted with a problem  but this first generic definition has been revisited and specified in successive attempts over the last few years  still not reaching an agreement  grover   pea        kalelioglu et al           so  in      wing clarified  ct  is the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information processing agent   wing        on line   one year later  this definition is simplified by aho  who conceptualizes ct as the thought processes involved in formulating problems so  their solutions can be represented as computational steps and algorithms   aho        p               operational definitions in       the computer science teachers association  csta  and the international society for technology in education  iste  developed an operational definition of computational thinking that provides a framework and common vocabulary for computer science k    educators  ct is a  problem solving process that includes  but is not limited to  the following characteristics  formulating problems in a way that enables us to use a computer and other tools to help solve them  logically organizing and analyzing data  representing data through abstractions such as models and simulations  automating solutions through algorithmic thinking  a series of ordered steps   identifying  analyzing  and implementing possible solutions with the goal of achieving the most efficient and effective combination of steps and resources  generalizing and transferring this problem solving process to a wide variety of problems   csta   iste        on line          educational curricular definitions more than definitions in the strict sense  frameworks for developing ct in the classroom and other educational settings are mentioned next  so  from the uk  the organization computing at school  cas  states that ct involves six different concepts  logic  algorithms  decomposition  patterns  abstraction  and evaluation   and five approaches to working  tinkering  creating  debugging  persevering  and collaborating  in the classroom  cas barefoot         moreover  from the united states  brennan and resnick        describe a ct framework that involves three key dimensions   computational concepts   sequences  loops  events  parallelism  conditionals  operators  and data    computational practices   experimenting and iterating  testing and debugging  reusing and remixing  abstracting and modularizing   and  computational perspectives   expressing  connecting  and questioning   table   shows a crosstab intersecting the ct framework dimensions  brennan   resnick        with the sampling domain of our computational thinking test  ctt   which will be detailed in sub section           computational thinking from the chc model of intelligence while ct involves thinking skills to solve problems algorithmically  e g   brennan   resnick        grover   pea         intelligence  i e   general mental ability or general cognitive ability  involves primarily the ability to reason  plan and solve problems  gottfredson         even authors with alternative approaches to the conceptualization of intelligence recognize intelligence as a  computational capacity  or  the ability to process certain kinds of information in the process of solving problems of fashioning products   gardner        p        within a cognitive approach  it has been recently suggested  ambrosio  xavier    georges        that computational thinking is related to the following three abilities factors from the cattellhorn carroll  chc  model of intelligence  mcgrew        schneider   mcgrew         fluid reasoning  gf   defined as   the use of deliberate and controlled mental operations to solve novel problems that cannot be performed automatically  mental operations often include drawing inferences  concept formation  classification  generating and testing hypothesis  identifying relations  comprehending implications  problem solving  extrapolating  and transforming information  inductive and deductive reasoning are generally considered the hallmark indicators of gf   mcgrew        p     visual processing  gv   defined as  the ability to generate  store  retrieve  and transform visual images and sensations  gv abilities are typically measured by tasks  figural or geometric stimuli  that require the perception and transformation of visual shapes  forms  or images and or tasks that require maintaining spatial orientation with regard to objects that may change or move through space   mcgrew        p     short term memory  gsm   defined as  the ability to apprehend and maintain awareness of a limited number of elements of information in the immediate situation  events that occurred in the last minute or so   a limited capacity system that loses information quickly through the decay of memory traces  unless an individual activates other cognitive resources to maintain the information in immediate awareness   mcgrew        p      therefore  it is expected that a computational thinking test should correlate with other already validated tests aimed at measuring cognitive abilities cited above  m  roman gonz   alez et al    computers in human behavior                 e             computational thinking assessment count on validated measurement instruments is something necessary and valuable in any research area  however  for the moment  there is still a large gap of tests relating to ct that have undergone a comprehensive psychometric validation process  m hling  ruf    hubwieser         as buffum et al         say   developing assessments of student learning is an urgent area of need for the relatively young computer science education community as it advances toward the ranks of more mature disciplines such as physics that have established standardized assessments over time   buffum et al         p        anyway  we find in recent years some remarkable attempts to measure and assess ct in students from  th to   th grade  which are the ones of this paper s interest  from the university of california  comes the instrument fairy assessment in alice  werner  denner  campe    kawamoto         which tries to measure the understanding and use of abstraction  conditional logic  algorithmic thinking and other ct concepts that middle school students utilize to solve problems  however  this instrument is designed ad hoc to be used in the context of programming learning environment alice   graczynska            and it has not been undergone to a psychometric validation process  the research group from clemson university  south carolina  provides a complementary perspective  daily  leonard  jorg  babu      gundersen        leonard et al          these authors propose a kinesthetic approach to learning   embodied learning   and assessment of ct with  th and  th grade students  to do so  they alternate activities for programming motion sequences  choreographies  in the alice environment  with the representation of those same sequences in a physical kinesthetic environment  the assessment tool also combines both settings  but its psychometric properties have not been reported  another interesting research line with middle school students is provided by the group from the university of colorado  they work with students in the video game programming environment agentsheets  within a first group of studies  koh  basawapatna  bennett    repenning         these authors identify several computational thinking patterns  ctp  that young programmers abstract and develop during the creation of their video games  in this context  they design the computational thinking patterns graph  an automated tool that analyzes the games programmed by the students  and represents graphically how far each game has involved the different ctp when compared with a model  within a second group of studies  basawapatna  koh  repenning  webb    marshall         the authors try to assess whether students are able to transfer the ctp acquired during video game programming to a new context of scientific simulations programming  for this assessment  they develop ctp quiz instrument  whose reliability or validity have not been reported  similarly  from the universidad rey juan carlos  madrid  spain  dr  scratch  is presented  moreno leon    robles      a      b         dr  scratch is a free and open source web application designed to analyze  simply and automatically  projects programmed with scratch   resnick et al          as well as it provides feedback that can be used to improve programming skills and to develop ct in middle school students  moreno leon  robles      roman gonz   alez            in order to assign an overall ct score to the project  dr  scratch infers the programmer competence along the following seven ct dimensions  abstraction and problem decomposition  parallelism  logical thinking  synchronization  flow control  user interactivity  and data representation  therefore  dr  scratch is not strictly a cognitive test but a tool for the formative assessment of scratch projects  dr  scratch is currently under validation process  although its convergent validity with respect to other traditional metrics of software quality and complexity has been already reported  moreno leon  robles      roman gonz   alez            furthermore  we consider the bebras international contest   a competition born in lithuania in      which aims to promote the interest and excellence of primary and secondary students around the world in the field of computer science from a ct perspective  cartelli  dagiene    futschek        dagiene   futschek        dagiene   stupuriene         each year  the contest proposes a set of bebras tasks  whose overall approach is the resolution of real problems  significant for the students  through the transfer and projection of their ct over those  these bebras tasks are independent from any particular software or hardware  and can be administered to individuals without any prior programming experience  table   crosstab intersecting ct framework  brennan   resnick        with the sampling domain of our ctt  ct framework ctt dimension description components sampling domain computational concepts concepts students employ as they program sequences   computational concept addressed loops   events e parallelism e conditionals   operators   data e computational practices problem solving practices that occurs in the process of programming experimenting and iterating e required task testing and debugging   reusing and remixing   abstracting and modularizing   computational perspectives students  understandings of themselves  their relationships to others  and the digital world around them expressing e e connecting e questioning e     yes     partly     no    http   www alice org index php    http   www agentsheets com     http   drscratch org     https   scratch mit edu     http   www bebras org       m  roman gonz   alez et al    computers in human behavior                 e    for all these features  the bebras tasks have been pointed out as more than likely embryo for a future pisa  programme for international student assessment  test in the field of computer science  hubwieser   m hling        ja skova    kova  cova            anyway  the bebras international contest is  at the moment  an event for promoting ct  not a measuring instrument  among other considerations  because it is not composed by a stable and determined set of task items  but a set that varies from year to year  with slight modifications along the countries  however  its growing expansion has aroused the interest of psychometry researchers  who have begun to investigate its possible virtues as a ct measurement instrument  thus  descriptive studies about the student s performance on bebras tasks have been recently published  referred to the corresponding editions of the bebras international contest held in germany  hubwieser   m hling               italy  bellettini et al          taiwan  lee  lin    lin        or turkey  kalelioglu  g lbahar    madran         in all of them  and in most of the tasks studied  significantly higher performances in the male group in comparison with the female group were reported  but strictly speaking  we only have knowledge of two tests aimed to middle high school students which are being fully subjected to the psychometric requirements  both instruments are currently undergoing a validation process  a  test for measuring basic programming abilities  m hling et al          it is designed for bavarian students from  th to   th grade  this test is aimed at measuring the students  ability to execute a given program based on the so called  flow control structures   which are considered at the core of the ct for this age group  sequencing  doing one step after another   selection  doing either one thing or another   repetition  doing one thing once and again   these control structures lead to the following ct concepts that are covered by the test  sequence of operations  conditional statement with  if else  and without  if  alternative  loop with fixed number of iterations  repeat times   loop with exit condition  conditional loop  while or repeat until   and the nesting of these structures to create more complex programs  b  commutative assessment  weintrop   wilensky         it is designed for high school students  from  th to   th grade  this test is aimed at measuring students  understanding of different computational concepts  depending on whether they occur through scripts written in visual  block based  or textual programming languages  which is a key transition to reach higher levels of code literacy  the test has a length of    items  and it addresses the following ct concepts  conditionals  defined fixed loops  undefined unfixed loops  simple functions  functions with parameters variables       computational thinking test overall  our computational thinking test  ctt  has been developed following the practical guide to validating computer science knowledge assessments with application to middle school from buffum et al          which is aligned with the international standards for psychological and educational testing  aera  apa    ncme         in addition  the ctt is consistent with other computational thinking tests under validation  aimed to middle high school  such as the test for measuring basic programming abilities  m hling et al         or the commutative assessment  weintrop   wilensky         just described in sub section      the ctt was initially designed with a length of    multiple choice items  version      october        after a content validation process through twenty experts  judgement  this first version was refined to the final one  version      december       of    items length  roman gonz     alez         which is built on the following principles  aim  ctt aims to measure the development level of ct in the subject  operational definition of measured construct  ct involves the ability to formulate and solve problems by relying on the fundamental concepts of computing  and using logic syntax of programming languages  basic sequences  loops  iteration  conditionals  functions and variables  target population  ctt is mainly designed and intended for spanish students between    and    years old   th and  th grade   although it can be also used in lower grades   th and  th grade  and upper grades   th and   th grade   instrument type  multiple choice test with   answer options  only one correct   length and estimated completion time     items     min  each item of the ctt  is designed and characterized according to the following five dimensions of the sampling domain  computational concept addressed  each item addresses one or more of the following seven computational concepts  ordered in increasing difficulty  basic directions and sequences    items   loopserepeat times    items   loopserepeat until    items   ifesimple conditional    items   if elseecomplex conditional    items   while conditional    items   simple functions    items   these  computational concepts  are aligned with some of the ct framework  brennan   resnick        see table    and with the csta computer science standards for  th and  th grade  csta         environment interface of the item  ctt items are presented in any of the following two environments interfaces   the maze      items  or  the canvas     items   both interfaces are common in popular sites for learning programming such as code org  kalelioglu          answer alternatives style  in each item  the response alternatives may be presented in any of these two styles  visual arrows    items  or visual blocks     items   both styles are also common in popular sites for learning programming such as code org  kalelioglu          existence or non existence of nesting  depending on whether the item solution involves a script with     items  or without    items  nesting computational concepts  a concept embedded in another to a higher hierarchy level   m hling et al          required task  depending on which of the following cognitive tasks is required for solving the item  sequencing  the student must sequence  stating in an orderly manner  a set of commands     items   completion  the student must complete an incomplete given set of commands    items   debugging  the student must debug an incorrect given set of commands    items   this dimension is partially aligned with the aforementioned  computational practices  from the ct framework  brennan   resnick        see table     the ctt is administered collectively and on line  and it can be performed both via non mobile or mobile electronic devices  preliminary results about the ctt psychometric properties after its administration on a sample of     spanish students   th and  th grade  have been already reported  roman gonz   alez  p   erez      available at http   goo gl iyekmb  spanish version   other forms and versions of ctt are available  free of charge  only for research purposes  from the first author    https   studio code org s    hour    https   studio code org s course   m  roman gonz   alez et al    computers in human behavior                 e        gonz  alez    jimenez fern     andez         examples of definitive ctt items translated into english are shown in figs   e   with their specifications detailed below     method      participants the ctt was administered on a total sample of       spanish students  boys and girls from    different schools enrolled from  th to   th grade  the distribution of the subjects by gender  grade and age is shown in table    from the total sample              students belong to public schools  and             belong to private schools  considering the device on which the ctt was administered        students did it on a personal computer         and     students         did it so on a tablet  none of the subjects had prior programming formal experience when the ctt was administered  the sampling procedure is not probabilistic and intentional  depending on the reasons that led to sample the different subjects  these can be divided into four sub samples  sub sample a  n         it is composed of individuals belonging to classrooms that subsequently enrolled in the accelerated intro to cs course from code org  sub sample b  n        it is composed of individuals belonging to classrooms that subsequently enrolled in the cs fundamentals course   from code org  sub sample c  n         it is composed of individuals belonging to classrooms that subsequently started to learn programming with scratch  sub sample d  n         it is composed of individuals belonging to classrooms that  although they did not subsequently start to learn programming  were interested on measuring the ct of the students  in addition to our ctt  other standardized tests were administered concurrently to a part of the above subjects  specifically for this paper  administrations of primary mental abilities  pma  battery        n        and rp   problem solving test  n       are considered  all of these additional administrations are performed on subjects belonging to sub sample a  in the following subsection      both standardized tests  pma and rp    are described       instruments in order to address the criterion validation of the ctt  another two standardized instruments are administered  the primary mental abilities  pma  battery  and the rp   problem solving test  which are described next         primary mental abilities  pma  battery the pma battery is aimed at appreciating the basic cognitive abilities through four different subtests  which allow an estimate of the main components of intelligence  this is a well known measure of cognitive abilities  e g   hertzog   bleckley        quiroga et al         developed by thurstone         its maximum administration time is    min  and it can be used from    years old onwards  the spanish technical manual  tea ediciones        reports excellent reliability and validity coefficients about the four subtests  the pma provides a precise measurement of the following cognitive abilities  verbal factor  pma v   ability to understand and express ideas with words  pma v items involve selecting the accurate synonym of a word given  spatial factor  pma s   ability to imagine and devise objects in two and three dimensions  pma s items involve selecting equal figures to a given model  after having been rotated  reasoning factor  pma r   ability to solve logical problems  to understand and plan  pma r items involve selecting the option which continues a logical series given  numerical factor  pma n   ability to handle numbers and quantitative concepts  pma n items involve checking mentally the sum of four two digit numbers         rp   problem solving test rp   problem solving test is aimed to assess speed and flexibility in performing logical operations  its maximum administration time is    min  and it can be used from    years old onwards  the spanish technical manual  seisdedos        reports excellent reliability values for rp    rxx         through the split half method   as well as its criterion validity regarding to changes test of cognitive flexibility   rxy         or to dat   spatial  rxy          fig     ctt  item    loopserepeat times   the maze   visual arrows  no nesting  completion    test cambios de flexibilidad cognitiva  changes test of cognitive flexibility   seisdedos            dat  differential aptitude tests  bennett             m  roman gonz   alez et al    computers in human behavior                 e    fig     ctt  item    loopserepeat times   the canvas   visual blocks  no nesting  debugging  fig     ctt  item     loopserepeat until   ifesimple conditional   the maze   visual blocks  yes nesting  sequencing  fig     ctt  item     loopserepeat times   simple functions   the canvas   visual blocks  yes nesting  sequencing  m  roman gonz   alez et al    computers in human behavior                 e        rp   appreciates a high level cognitive ability  by which a series of logical relations given are understood by the subject in order to determine whether these relations are met in several simple structures  rp   is closely related to the non verbal aspects of intelligence  it seems to be an important predictor to many school or professional activities  and it has been previously used as a proxy of the general mental ability  e g   barros  kausel  cuadra    d az        caceres     conejeros         rp   items involve five structures in which the subject must decide whether the problem conditions are satisfied  fig      rp   requires enough concentration as errors are penalized  it is considered that there are three cognitive abilities underlying rp   performance  seisdedos         reasoning  due to the fact that the logical relations which may satisfy the structures must be previously understood by the subject  spatial ability  as the subject must process the small circles and squares contained in each structure  in order to decide if the condition is satisfied  working memory  which allows the subject to retain the given logical relation without need of constantly consulting it       procedure participating subjects in our research were enrolled in the elective subject of computer science  which is held twice a week    h each   typically  the ctt was administered during the first of the two weekly classes  in the groups in which another standardized instrument was further administered  it was done during the second weekly class  for the ctt collective administration  the computer science teacher followed the instructions which were sent by email in the week before  containing the url to access the on line test  the student s direct answers to the ctt items were stored in the google drive database linked with the instrument  which was subsequently downloaded as an excel xls file  for the collective administration of the standardized instrument  pma or rp     students were previously signed in the on line platform from the publishing house    holder of these tests  commercial rights  come the administration day  the subjects logged in the platform and performed the corresponding instrument  pma battery or rp   test  never both   afterwards  from our administrator profile  we could download the subjects  results as an excel xls file  finally  all  xls files generated during data collection were exported to a single  sav file  which constitutes the data matrix under analysis with spss software  version      from this analysis arise the results exposed below     results and discussion      descriptive statistics table   shows the main descriptive statistics of the ctt score  calculated as the sum of correct answers along the    items of the test  for the entire sample  n           in fig     left   a histogram showing the distribution of the ctt score along the sample is depicted  as it can be seen  the aforementioned distribution fits remarkably the normal curve  although  given the very large size of the sample  the small existing maladjustments are penalized by the kolmogorov smirnov test which rejects the null hypothesis of normality  zk s          p          in fig     right   we show the success rate per item  expressed in per unit  or item difficulty index  that confirms empirically the progressive difficulty of the ctt  which was already anticipated by the experts during the content validation process  roman    gonzalez            the average success rate along the    items is p         medium difficulty   ranging from p         item     very high difficulty  to p         item    very low difficulty   summarizing  it can be stated that  a  the ctt score is almost normally distributed  i e  symmetrically distributed  skewness z    showing proper variability so that is possible to construct suitable scales  percentiles  for the target population  b  the ctt has an appropriate degree of difficulty  medium  for the target population  with an increasing difficulty along its items  as recommended in the design of abilities  tests  e g   carpenter  just    shell        elithorn   telford                differences by grade when the sample is segmented regarding to grade  the descriptive statistics shown in table   are obtained  specifically  results in table   are split according to the spanish educational system by the end of primary education   th and  th grade   the start of secondary education   th and  th grade   and the end of secondary education   th and   th grade   box plots for the ctt score split by aforementioned grades are shown in fig     the outlier belongs to a case from  th grade  which obtained ctt score equal to     i e   z  standard deviations above the mean of its reference group   the anova test shows statistically significant differences in the ctt score regarding to grade  f                    p          the post hoc tukey test additionally shows statistically significant differences between all possible pairs of means  p          hence  it can be stated that the performance on the ctt increases as it does the grade  this result is consistent with our assumption that the ct is a problem solving ability that it should be therefore linked to the cognitive development and maturity of the subjects  ackerman   rolfhus        mayer  caruso    salovey                gender differences about the possible differential performance on the ctt regarding to gender  we find a statistically significant difference in the ctt score in favor of the male group  t          p          resulting an effect size measured through cohen s d  cohen        equal to       table     that can be considered as a low moderate effect  if the aforementioned difference is analyzed along grades  table     higher means in the ctt score are always found in the table   distribution of the total sample  n          by gender  grade and age  gender total boys girls grade  th age   e   y o count             of total                 th   e   y o count            of total                 th   e   y o count               of total                    th       y o count               of total                   th   e   y o count              of total                   th   e   y o count             of total                 total count                 of total                       http   www e teaediciones com       m  roman gonz   alez et al    computers in human behavior                 e    male group  although these gender differences are only statistically significant from  th and  th grade  t          p         onwards  being more intense in  th and   th grade  t          p          hence  it seems that there is a progressive gender gap over the ctt performance  as we advance along the grades  fig      these gender differences are consistent with those found in previous research with bebras tasks  on which most of the investigations report higher yields of the male group  as described in sub section      fig     item example from the rp   problem solving test  table   descriptive statistics of the ctt score for the entire sample  n           mean       std  error of mean      median       mode    std  deviation       variance        skewness      kurtosis       minimum   maximum    percentiles                                                                                                    fig     histogram of the ctt score  left   item difficulty index for each item of the ctt  right   m  roman gonz   alez et al    computers in human behavior                 e             reliability reliability as internal consistency of the ctt  measured by cronbach s alfa is a         z       that can be considered as good reliability  nunnally   bernstein         when reliability is studied regarding to grade and administration s device  table    we find that  a  reliability increases as it does the grade  which is coherent with the greater accuracy and consistency often shown by the answers coming from the upper grades  students  anastasi         b  reliability increases when ctt is administered through mobile devices such as tablets  perhaps because these devices allow the subject to rotate the screen to one side and another  reducing the spatial cognitive load of the items and avoiding that the subjects commit unexpected errors on the same  this interpretation is supported by the results obtained when comparing the average yield in the ctt between subjects who performed it on a computer and subjects who did it so on a tablet  for instance  in  th and  th grade  xcomputer         vs  xtablet          t          p         d          in the future  if we achieve a larger sample of subjects who perform the ctt on tablet  and if these aforementioned significant differences between devices continue  it will be necessary to construct different scales for the ctt depending on the administration device       criterion validity        relative to primary mental abilities  pma  battery correlations between the ctt and the various tests of the pma battery are shown in table    as it can be seen  the ctt has a positive statistically significant correlation  p          moderately intense with pma r  reasoning factor  and pma s  spatial factor   and slightly intense with pma v  verbal factor   there is no statistically significant correlation between ctt and pma n  numerical factor   corresponding scatter plots are shown in fig     at this point  we perform a multiple linear regression over the ctt score  considered as the dependent variable  based on the pma v  pma s  pma r and pma n scores  considered as predictors   table   summarizes de regression model  which is calculated through the  enter  method  this regression model  based on the pma battery  correlates r         with the ctt  which means an adjusted r          that is  the       of the ctt scores  variance is explained from a linear combination of the primary mental abilities measured through the pma battery  normality of the regression model residuals was verified  the regression model is able to explain  statistically significant  the differences in the ctt scores  as f                   p          however  as shown in following table   which contains the coefficients of the regression model  only pma s  spatial factor  and pma r  reasoning factor  are capable  specifically and statistically significant  p          to explain differences in the dependent variable  ctt   the standardized coefficients of the model are  from highest to lowest value  b pma s           b pma r           b pmav           b pma n            from our perspective  these results point out two important issues  firstly  there is still a       of the ctt scores  variance that is not explained by the primary mental abilities measured through the pma battery  which suggests certain independence of ct as a psychological construct  distinct from the traditional aptitudes  secondly  the cognitive abilities with higher explanatory power about ct are reasoning ability and spatial ability  from both there is abundant evidence in the literature that reports certain male superiority  regarding to the former  kuhn and holling        recently report gender differences in reasoning ability favoring males in german students from  th to   th grade  regarding to the latter  there are some meta analysis that demonstrate higher male spatial ability  especially in tasks that involve mentally rotation of figures  linn   petersen        voyer  voyer    bryden         all the above could explain the higher yield of the boys in the ctt seen in sub section               relative to rp   problem solving test correlation between ctt and rp   problem solving test is shown in table     as it can be seen  we find a positive  statistically significant  and moderately strongly intense correlation  r          p         between both instruments  corresponding scatter plot is shown in fig      such as the coefficient of determination r           i e         of shared variance between both scores   recall that rp   test appreciates a high level cognitive ability and it has been previously used as a proxy of the general mental ability  our results table   descriptive statistics of the ctt score split by grades  grades  th    th  th    th  th     th n             mean                   std  error of mean                median                   mode          std  deviation                   variance                      skewness                 kurtosis                   minimum       maximum          percentiles                                                                                                                                                                                                                                       fig     box plots for the ctt score split by grades      m  roman gonz   alez et al    computers in human behavior                 e    indicate that ctt correlate more intensely with rp   than with any of the primary mental abilities measured through pma battery  table      hence  it seems that computational thinking could be fundamentally linked with general mental ability  particularly with fluid intelligence   and to a lesser extent with different cognitive aptitudes  such as logical reasoning and spatial ability  when results of preceding sub sections       and       are triangulated  we find a clear consistency between the magnitude of the correlations ctt  pma and ctt  rp    and the expected composition of computational thinking from the chc model of intelligence exposed in sub section      table      from our point of view  this is a powerful evidence of the criterion concurrent validity of our ctt  as well as an empirical confirmation of the computational thinking construct s composition proposed by ambrosio et al             implications and limitations the ctt has some strengths like  it can be administered in pretest conditions to measure the initial development level of ct in students without prior programming experience from  th to   th grade  it can be collectively administered so it could be used in massive screenings and early detection of students with high abilities  or special needs  for programming tasks  it can be utilized for collecting quantitative data in pre post evaluations of the efficacy of curricula or programs aimed at fostering ct  which would be a desirable practice versus the qualitative approach that has been mostly used in the literature so far  lye   koh         and it could be used along academic and professional guidance processes towards stem disciplines  however  the ctt also has obvious limitations and weaknesses  the ctt provides a static and decontextualized assessment  therefore  we recommend to complement its use with other ct assessment tools designed from a formative perspective  such as dr  scratch  moreno leon et al            in terms of ct framework  brennan   resnick         the ctt is overly focused on  computational concepts   only covers  computational practices  partly  and ignores  computational perspectives   the ctt only demands the projection of computational thinking over logical and visuospatial problems  such as solving mazes or designing geometric patterns  this implies a clear bias of the ctt  as computational thinking can also be projected over problems with different features  such as  modeling scientific simulations  weintrop et al          algorithmic composition of computational music  edwards         or digital interactive storytelling  burke        howland   good         the latter authors report significantly higher values in the computational complexity of scripts written by girls from  th and  th grade in comparison with their male peers within narrative tasks  this table   gender differences in ctt score  n mean std  deviation student s t effect size cohen s d entire sample boys                              girls                 grades  th    th boys                           girls                 th    th boys                              girls                  th     th boys                              girls                   p         fig     box plots for the ctt score split by gender and along grades  table   reliability as internal consistency of the ctt  cronbach s alpha n cronbach s alpha n entire sample             computer             tablet           grades  th    th           computer          tablet            th    th           computer           tablet           th     th           computer           tablet          table   correlations  pearson s r  between ctt and pma battery  pma v pma s pma r pma n ctt                                pma v                        pma s                 pma r              n          p           p         m  roman gonz   alez et al    computers in human behavior                 e        result is consistent with the  slight  female superiority in tasks involving verbal ability reported in the classical literature  hyde   linn         it seems  therefore  that the direction of gender differences in ct may vary depending on the type of problems on which such ability is projected  finally  as the ctt is entirely designed with multiple choice items  it might be measuring ct at its lower cognitive complexity levels   recognize  and  understand    gouws et al   fig     scatter plots between ctt and pma battery  table   summary of the regression model of the ctt onto the pma subtests  model r r square adjusted r square std  error of the estimate        a                   a predictors   constant   pma v  pma s  pma r  pma n  table   standardized coefficientsa of the regression model of the ctt onto the pma subtests  model b standardized coefficients student s t    constant          pma v             pma s               pma r               pma n                 p         a dependent variable  ctt      m  roman gonz   alez et al    computers in human behavior                 e           an instrument intended to measure ct also at higher levels of complexity   apply  and  assimilate   should include items which require not only recognize but also evoke the correct algorithm  as well as open complex problems whose resolution demands students to creatively transfer ct towards different domains     conclusions and further research in this paper we have provided evidences of reliability and criterion validity of a new instrument for the assessment of ct and additionally we expanded our understanding of the ct nature through the theory driven exploration of its associations with other established psychological constructs in the cognitive sphere  we have found expected positive small or moderate significant correlations         r         between ct and three of the four primary mental abilities of the thurstone        model of intelligence  as well as a high correlation  r         between ct and problem solving ability as a proxy of general mental ability  our findings are consistent with recent theoretical proposals by ambrosio et al         linking ct with some core elements of the chc model of intelligence  mcgrew         especially with respect to gf  fluid intelligence  and gv  visual processing   furthermore  our results support the statement that ct is fundamentally linked with general mental ability  and also  though to a lesser extent  with specific cognitive aptitudes  such as inductive reasoning  spatial and verbal abilities  this corroborates the conceptualization of ct as a problem solving ability  e g   brennan   resnick        lye   koh        wing               and it is consistent with the framework recently described by kalelioglu et al           in which ct is defined as a complex and high order thinking skill involved in problem solving processes  overall  it should be noted that this paper contributes to the establishment of the nomological net  cronbach   meehl        of computational thinking as an emergent scientific construct  future research might expand this nomological net exploring how ct is related to other cognitive and computational variables  such as working memory  executive functions  or specific programming skills  among others  finally  we plan the following further research lines concerning the ctt  a  convergent validity studies between ctt and other alternative ct assessment tools  such as dr  scratch  moreno leon    robles      b      a   bebras tasks  dagiene   stupuriene         the test for measuring basic programming abilities  m hling et al          or the commutative assessment  weintrop   wilensky         b  ctt adaptation and translation into other languages  already underway adaptations translations into english and portuguese   and replications of our psychometric studies in other populations  c  enhanced ctt versions including items that require the subject the evocation of algorithms and or items that demand to project and transfer ct on scientific  narrative and musical relevant problems  acknowledgements we thank professor dr  kate howland  university of sussex  for collaborating in the adaptation and translation of ctt items from the spanish language to the english language  references ackerman  p  l     rolfhus  e  l          the locus of adult intelligence  knowledge  abilities  and nonability traits  psychology and aging            e     http    dx doi org                             aera  apa    ncme          standards for educational and psychological testing  washington  dc  aera  aho  a  v          computation and computational thinking  the computer journal  table    correlation between ctt and rp   problem solving test  rp   ctt pearson correlation         sig     tailed        n      p         fig      scatter plot between ctt and rp    table    correlations ctt  pma and ctt  rp    and contingency with gf  gv  and gsm components of chc model  pma n pma v pma s pma r rp   ctt                                        selected components of the chc model of intelligence gf is it measured in the following instruments  no no no yes yes gv no no yes no yes gsm no no no no yes   p         m  roman gonz   alez et al    computers in human behavior                 e                  e     http   dx doi org         comjnl bxs     ambrosio  a  p   xavier  c     georges  f          digital ink for cognitive assessment of computational thinking  in frontiers in education conference  fie        ieee  pp   e    http   dx doi org         fie               anastasi  a          psychological testing   rd ed    oxford  england  macmillan  barefoot  c  a  s          computational thinking  web page   retrieved from  http    barefootcas org uk barefoot primary computing resources concepts  computational thinking   barros  e   kausel  e  e   cuadra  f     d az  d  a          using general mental ability and personality traits to predict job performance in three chilean organizations  international journal of selection and assessment            e     http    dx doi org         ijsa        basawapatna  a   koh  k  h   repenning  a   webb  d  c     marshall  k  s          recognizing computational thinking patterns  proceedings of the   nd acm technical symposium on computer science education     e     http    dx doi org                          bellettini  c   lonati  v   malchiodi  d   monga  m   morpurgo  a     torelli  m          how challenging are bebras tasks  an irt analysis based on the performance of italian students  in proceedings of the      acm conference on innovation and technology in computer science education  pp    e     http   dx doi org                           bennett  g  k          differential aptitude tests  technical manual   new york  psychological corporation  brennan  k     resnick  m          new frameworks for studying and assessing the development of computational thinking  in proceedings of the      annual meeting of the american educational research association  vancouver  canada   retrieved from  http   scratched gse harvard edu ct files aera     pdf  brown  n  c  c   kolling  m   crick  t   peyton jones  s   humphreys  s     sentance  s            bringing computer science back into schools  lessons from the uk  in proceeding of the   th acm technical symposium on computer science education  pp     e      http   dx doi org                          buffum  p  s   lobene  e  v   frankosky  m  h   boyer  k  e   wiebe  e  n     lester  j  c          a practical guide to developing and validating computer science knowledge assessments with application to middle school  in proceedings of the   th acm technical symposium on computer science education  pp     e      http   dx doi org                          burke  q          the markings of a new pencil  introducing programming aswriting in the middle school classroom  the journal of media literacy education           e     retrieved from http   eric ed gov  id ej        caceres  p  a     conejeros  m  l          efecto de un modelo de metodolog a   centrada en el aprendizaje sobre el pensamiento cr tico  el pensamiento creativo y la capacidad de resolucion de problemas en estudiantes con talento   academico    revista espanola de pedagog a                e    retrieved from  http   www jstor org stable           carpenter  p  a   just  m  a     shell  p          what one intelligence test measures  a theoretical account of the processing in the raven progressive matrices test  psychological review            e     http   dx doi org                 x            cartelli  a   dagiene  v     futschek  g          bebras contest and digital competence assessment  analysis of frameworks  in a  cartelli  ed    current trends and future practices for digital literacy and competence  pp    e     hershey  pa  igi global  cohen  j          a power primer  psychological bulletin             e     http    dx doi org                              cronbach  l  j     meehl  p  e          construct validity in psychological tests  psychological bulletin            e     http   dx doi org         h         csta          ke   computer science standards  retrieved from http   csta acm org  curriculum sub currfiles csta k    css pdf  csta    iste          operational definition of computational thinking for ke   education  retrieved from  http   csta acm org curriculum sub currfiles  compthinkingflyer pdf  dagiene  v     futschek  g          bebras international contest on informatics and computer literacy  criteria for good tasks  in r  t  mittermeir    m  m  sys o  eds    informatics education supporting computational thinking  pp    e     berlin  springer  dagiene  v     stupuriene  g          informatics education based on solving attractive tasks through a contest  in proceedings of keycit     ekey competencies in informatics and ict  pp    e     retrieved from  http   www bebras  org sites default files documents publications dagiene  c        pdf  daily  s  b   leonard  a  e   jorg  s   babu  s     gundersen  k          dancing alice    exploring embodied pedagogical strategies for learning computational thinking  in proceedings of the   th acm technical symposium on computer science education  pp    e     http   dx doi org                          ediciones  t  e  a          pma  aptitudes mentales primarias  manual t ecnico   pma  primary mental abilities   technical manual    madrid  tea ediciones  edwards  m          algorithmic composition  computational thinking in music  communications of the acm           e    http   dx doi org                           elithorn  a     telford  a          computer analysis of intellectual skills  international journal of man machine studies           e     http   dx doi org          s                      european schoolnet          computing our future  computer programming and coding  priorities  school curricula and initiatives across europe  technical report   retrieved from http   www eun org publications detail  publicationid      gardner  h          on failing to grasp the core of mi theory  a response to visser et al  intelligence            e     http   dx doi org         j intell              gardner  h     davis  k          the app generation  how today s youth navigate identity  intimacy  and imagination in a digital world  new haven  yale university press  gottfredson  l  s          why g matters  the complexity of everyday life  intelligence           e     http   dx doi org         s                      gouws  l  a   bradshaw  k     wentworth  p          computational thinking in educational activities  an evaluation of the educational game light bot  in proceedings of the   th acm conference on innovation and technology in computer science education  pp    e     http   dx doi org                          graczynska  e          alice as a tool for programming at schools    natural science           e     http   dx doi org         ns             grover  s     pea  r          computational thinking in ke    a review of the state of the field  educational researcher           e    http   dx doi org                 x          henderson  p  b   cortina  t  j     wing  j  m          computational thinking  acm sigcse bulletin            e     http   dx doi org                          hertzog  c     bleckley  m  k          age differences in the structure of intelligence  influences of information processing speed  intelligence            e     http    dx doi org         s                      howland  k     good  j          learning to communicate computationally with flip  a bi modal programming language for game creation  computers   education         e     http   dx doi org         j compedu              hubwieser  p     m hling  a          playing pisa with bebras  in proceedings of the  th workshop in primary and secondary computing education  pp     e      http   dx doi org                          hubwieser  p     m hling  a          investigating the psychometric structure of bebras contest  towards measuring computational thinking skills  in international conference on learning and teaching in computing and engineering  latice   pp    e     http   dx doi org         latice          hyde  j  s     linn  m  c          gender differences in verbal ability  a meta analysis  psychological bulletin            e    http   dx doi org                              ja skova  l     kov     a cov  a  n          bebras contest for blind pupils  in proceedings of the   th workshop in primary and secondary computing education  pp    e     http   dx doi org                          kalelioglu  f          a new way of teaching programming skills to k    students  code org  computers in human behavior         e     http   dx doi org          j chb              kalelioglu  f   g lbahar  y     kukul  v          a framework for computational thinking based on a systematic research review  baltic journal of modern computing           e     retrieved from http   www bjmc lu lv fileadmin  user upload lu portal projekti bjmc contents        kalelioglu pdf  kalelioglu  f   g lbahar  y     madran  o          a snapshot of the first implementation of bebras international informatics contest in turkey  in a  brodnik    j  vahrenhold  eds    informatics in schools  curricula  competences  and competitions  pp     e      berna  springer  http   dx doi org                                koh  k  h   basawapatna  a   bennett  v     repenning  a          towards the automatic recognition of computational thinking for adaptive visual language learning  in visual languages and human centric computing  vl hcc        ieee symposium  pp    e     http   dx doi org         vlhcc          kuhn  j     holling  h          gender  reasoning ability  and scholastic achievement  a multilevel mediation analysis  learning and individual differences            e     http   dx doi org         j lindif              lee  g   lin  y     lin  j          assessment of computational thinking skill among high school and vocational school students in taiwan  in world conference on educational multimedia  hypermedia and telecommunications  pp     e      retrieved from  http   www editlib org p          leonard  a  e   dsouza  n   babu  s  v   daily  s  b   jorg  s   waddell  c   et al            embodying and programming a constellation of multimodal literacy practices  computational thinking  creative movement  biology    virtual environment interactions  journal of language and literacy education           e    retrieved from http   jolle coe uga edu wp content uploads         leonard templatefinal fixed links pdf  liao  y  c     bright  g  w          effects of computer programming on cognitive outcomes  a meta analysis  journal of educational computing research           e     http   dx doi org         e  g hh k ajrr k  m  linn  m  c     petersen  a  c          emergence and characterization of sex differences in spatial ability  a meta analysis  child development             e      http   dx doi org                  lye  s  y     koh  j  h  l          review on teaching and learning of computational thinking through programming  what is next for k     computers in human behavior        e    http   dx doi org         j chb              manovich  l          software takes command  new york  bloomsbury  mayer  r  e          teaching and learning computer programming  multiple research perspectives  new york  routledge  mayer  j  d   caruso  d  r     salovey  p          emotional intelligence meets traditional standards for an intelligence  intelligence            e     http    dx doi org         s                      mcgrew  k  s          chc theory and the human cognitive abilities project  standing on the shoulders of the giants of psychometric intelligence research  intelligence          e    http   dx doi org         j intell              moreno leon  j     robles  g          automatic detection of bad programming       m  roman gonz   alez et al    computers in human behavior                 e    habits in scratch  a preliminary study  frontiers in education conference  fie        ieee   e   http   dx doi org         fie               moreno leon  j     robles  g       a     analyze your scratch projects with dr  scratch and assess your computational thinking skills  scratch conference  pp    e     retrieved from http   jemole me replication     scratch inferct pdf  moreno leon  j     robles  g       b   dr  scratch  a web tool to automatically   evaluate scratch projects  in proceedings of the   th workshop in primary and secondary computing education  pp     e      http   dx doi org                           moreno leon  j   robles  g     rom   an gonz   alez  m          dr  scratch  automatic   analysis of scratch projects to assess and foster computational thinking  red  revista de educacion a distancia         retrieved from http   www um es ead red     moreno robles pdf  moreno leon  j   robles  g     rom   an gonz   alez  m          comparing computa    tional thinking development assessment scores with software complexity metrics  in      ieee global engineering education conference  educon   pp      e       http   dx doi org         educon               m hling  a   ruf  a     hubwieser  p          design and first results of a psychometric test for measuring basic programming abilities  in proceedings of the   th workshop in primary and secondary computing education  pp   e     http    dx doi org                          nunnally  j  c     bernstein  i  h          psychometric theory   rd ed    new york  mcgraw hill  papert  s          mindstorms  children  computers  and powerful ideas  new york  basic books  prensky  m         january      programming is the new literacy  blog post   retrieved fromhttp   www edutopia org literacy computer programming  quiroga  m a   escorial  s   rom     an  f  j   morillo  d   jarabo  a   privado  j     colom  r          can we reliably measure the general factor of intelligence  g  through commercial video games  yes  we can  intelligence       e   http   dx doi org          j intell              resnick  m   maloney  j   monroy hern  andez  a   rusk  n   eastmond  e   brennan  k     silverman  b          scratch  programming for all  communications of the acm            e    http   dx doi org                          roman gonz   alez  m          aprender a programar    apps  como enriquecimiento curricular en alumnado de alta capacidad  bordon    revista de pedagog a            e     http   dx doi org          bordon             roman gonz   alez  m          computational thinking test  design guidelines and   content validation  in  th annual international conference on education and new learning technologies  barcelona  spain   http   dx doi org           rg                roman gonz   alez  m   p   erez gonz   alez  j  c     jim   enez fern     andez  c          test de pensamiento computacional  diseno y psicometr a general  computational   thinking test  design   general psychometry   in iii congreso internacional sobre aprendizaje  innovacion y competitividad  cinaic      madrid  spain      http    dx doi org          rg                rushkoff  d         november      code literacy  a   st century requirement  blog post   retrieved from http   www edutopia org blog code literacy   stcentury requirement douglas rushkoff  rushkoff  d          program or be programmed  new york  or books  schneider  w  j     mcgrew  k  s          the cattell horn carroll model of intelligence  in d  flanagan    p  harrison  eds    contemporary intellectual assessment  theories  tests  and issues   rd ed   pp    e      new york  guilford  seisdedos  n          cambios  test de flexibilidad cognitiva  manual t ecnico   changes  cognitive flexibility test  technical manual    madrid  tea ediciones  seisdedos  n          rp    test de resolucion de problemas  manual t    ecnico   rp    problem solving test  technical manual    madrid  tea ediciones  thurstone  l  l          primary mental abilities  chicago  university of chicago press  voyer  d   voyer  s     bryden  m  p          magnitude of sex differences in spatial abilities  a meta analysis and consideration of critical variables  psychological bulletin             e     http   dx doi org                              weintrop  d   beheshti  e   horn  m   orton  k   jona  k   trouille  l   et al          defining computational thinking for mathematics and science classrooms  journal of science education and technology            e     http   dx doi org          s                  weintrop  d     wilensky  u          using commutative assessments to compare conceptual understanding in blocks based and text based programs  in proceedings of the eleventh annual international conference on international computing education research  icer    pp     e      http   dx doi org                           werner  l   denner  j   campe  s     kawamoto  d  c          the fairy performance assessment  measuring computational thinking in middle school  in proceedings of the   rd acm technical symposium on computer science education  pp     e      http   dx doi org                          wing  j  m          computational thinking  communications of the acm           e    http   dx doi org                          wing  j  m          computational thinking and thinking about computing  philosophical transactions  series a  mathematical  physical  and engineering sciences                 e      http   dx doi org         rsta            wing  j  m          research notebook  computational thinkingewhat and why  the link  the magazine of the carnegie mellon university school of computer science  retrieved from http   www cs cmu edu link research notebookcomputational thinking what and why  m  roman gonz   alez et al    computers in human behavior                 e        
